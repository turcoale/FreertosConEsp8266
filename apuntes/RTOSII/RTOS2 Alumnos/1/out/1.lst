
practicas/1/out/1.elf:     file format elf32-littlearm
practicas/1/out/1.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a003445

Program Header:
0x70000001 off    0x00014514 vaddr 0x1a004514 paddr 0x1a004514 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002e34 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000451c memsz 0x0000451c flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00451c align 2**16
         filesz 0x00000130 memsz 0x00000130 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004514  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  10000000  1a00451c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020130  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020130  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020130  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020130  2**2
                  CONTENTS
  6 .bss          00002d04  10000130  10000130  00000130  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020130  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020130  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020130  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020130  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a004514  1a004514  00014514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020130  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020130  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020130  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020130  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020130  2**2
                  CONTENTS
 17 .noinit       00000000  10002e34  10002e34  00020130  2**2
                  CONTENTS
 18 .debug_info   000234a3  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 0000516f  00000000  00000000  000435d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000b1a3  00000000  00000000  00048742  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000fa0  00000000  00000000  000538e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000f40  00000000  00000000  00054885  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000faec  00000000  00000000  000557c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00013910  00000000  00000000  000652b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    00029255  00000000  00000000  00078bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      000000ee  00000000  00000000  000a1e16  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  000a1f04  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00002bd4  00000000  00000000  000a1f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000130 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004514 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002e34 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a00230c l     F .text	000000bc uartProcessIRQ
10002d9c l     O .bss	00000004 rxIsrCallbackUART0
10002da0 l     O .bss	00000004 rxIsrCallbackUART2
10002da4 l     O .bss	00000004 rxIsrCallbackUART3
10002da8 l     O .bss	00000004 txIsrCallbackUART0
10002dac l     O .bss	00000004 txIsrCallbackUART2
10002db0 l     O .bss	00000004 txIsrCallbackUART3
1a004290 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 qf_mem.c
00000000 l    df *ABS*	00000000 main.c
10000130 l     O .bss	00000001 debugPrint
10000134 l     O .bss	00000200 memoria_para_pool_1
00000000 l    df *ABS*	00000000 heap_1.c
10000334 l     O .bss	00000004 xNextFreeByte
10000338 l     O .bss	00002000 ucHeap
10002338 l     O .bss	00000004 pucAlignedHeap.9926
00000000 l    df *ABS*	00000000 queue.c
1a000520 l     F .text	0000001e prvIsQueueFull
1a000540 l     F .text	0000001a prvIsQueueEmpty
1a00055c l     F .text	00000076 prvCopyDataToQueue
1a0005d4 l     F .text	00000024 prvCopyDataFromQueue
1a0005f8 l     F .text	0000006a prvUnlockQueue
1a0006e4 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
1000233c l     O .bss	00000168 uxIdleTaskStack.9314
100024a4 l     O .bss	00000060 xIdleTaskTCB.9313
10002504 l     O .bss	00000060 xTimerTaskTCB.9320
10002564 l     O .bss	000005a0 uxTimerTaskStack.9321
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a000cc0 l     F .text	00000034 prvResetNextTaskUnblockTime
1a000cf4 l     F .text	00000092 prvInitialiseNewTask
1a000d88 l     F .text	00000068 prvInitialiseTaskLists
1a000df0 l     F .text	000000a8 prvAddNewTaskToReadyList
1a000e98 l     F .text	0000003a prvDeleteTCB
1a000ed4 l     F .text	00000044 prvCheckTasksWaitingTermination
1a000f18 l     F .text	00000028 prvIdleTask
1a000f40 l     F .text	00000094 prvAddCurrentTaskToDelayedList
10002b04 l     O .bss	00000004 xNumOfOverflows
10002b08 l     O .bss	00000004 pxDelayedTaskList
10002b0c l     O .bss	00000004 xSchedulerRunning
10002b10 l     O .bss	00000014 xTasksWaitingTermination
10002b24 l     O .bss	00000004 pxOverflowDelayedTaskList
10002b28 l     O .bss	00000004 uxPendedTicks
10002b2c l     O .bss	0000008c pxReadyTasksLists
10002bb8 l     O .bss	00000004 uxSchedulerSuspended
10002bbc l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002bc0 l     O .bss	00000004 uxCurrentNumberOfTasks
10002bc8 l     O .bss	00000014 xPendingReadyList
10002bdc l     O .bss	00000004 xIdleTaskHandle
10002be0 l     O .bss	00000004 xTickCount
10002be4 l     O .bss	00000004 xNextTaskUnblockTime
10002be8 l     O .bss	00000004 uxTaskNumber
10002bec l     O .bss	00000014 xDelayedTaskList1
10002c00 l     O .bss	00000014 xDelayedTaskList2
10002c14 l     O .bss	00000014 xSuspendedTaskList
10002c28 l     O .bss	00000004 uxTopReadyPriority
10002c2c l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001710 l     F .text	00000020 prvGetNextExpireTime
1a001730 l     F .text	00000048 prvInsertTimerInActiveList
1a001778 l     F .text	0000006c prvCheckForValidListAndQueue
1a0017e4 l     F .text	00000040 prvInitialiseNewTimer
1a001b98 l     F .text	00000016 prvTimerTask
1a001950 l     F .text	0000007c prvSwitchTimerLists
1a0019cc l     F .text	0000002c prvSampleTimeNow
1a0019f8 l     F .text	0000005c prvProcessExpiredTimer
1a001a54 l     F .text	00000074 prvProcessTimerOrBlockTask
1a001ac8 l     F .text	000000d0 prvProcessReceivedCommands
10002c30 l     O .bss	00000004 pxCurrentTimerList
10002c34 l     O .bss	00000014 xActiveTimerList1
10002c48 l     O .bss	00000014 xActiveTimerList2
10002c5c l     O .bss	000000a0 ucStaticTimerQueueStorage.10316
10002cfc l     O .bss	00000004 xLastTime.10265
10002d00 l     O .bss	00000050 xStaticTimerQueue.10315
10002d50 l     O .bss	00000004 xTimerQueue
10002d54 l     O .bss	00000004 pxOverflowTimerList
10002d58 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a001bb0 l     F .text	00000040 prvTaskExitError
1a001bf0 l     F .text	00000022 prvPortStartFirstTask
1a001c18 l     F .text	0000000e vPortEnableVFP
1a001c80 l       .text	00000000 pxCurrentTCBConst2
1a001d60 l       .text	00000000 pxCurrentTCBConst
10002d5c l     O .bss	00000001 ucMaxSysCallPriority
10002d60 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000004 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a001f74 l     F .text	00000010 clearInterrupt
1a001f84 l     F .text	0000005c serveInterrupt
1000000c l     O .data	00000048 ultrasonicSensors
1a004148 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002000 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
10002d6c l     O .bss	00000030 tickerObject.11711
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0024b6 l     F .text	00000002 errorOcurred
1a0024b8 l     F .text	00000002 doNothing
10000054 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a0026e0 l     F .text	00000044 Board_LED_Init
1a002724 l     F .text	00000040 Board_TEC_Init
1a002764 l     F .text	00000040 Board_GPIO_Init
1a0027a4 l     F .text	00000038 Board_SPI_Init
1a0027dc l     F .text	00000024 Board_I2C_Init
1a002800 l     F .text	00000030 Board_ADC_Init
1a0042e0 l     O .text	00000008 GpioButtons
1a0042e8 l     O .text	0000000c GpioLeds
1a0042f4 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 system.c
10002db4 l     O .bss	00000004 heap_end.11488
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00430c l     O .text	0000000c InitClkStates
1a004318 l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000094 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0029f0 l     F .text	0000002c Chip_UART_GetIndex
1a0043b0 l     O .text	00000008 UART_BClock
1a0043b8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002b98 l     F .text	00000014 Chip_ADC_GetClockIndex
1a002bac l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002c70 l     F .text	000000a8 pll_calc_divs
1a002d18 l     F .text	00000104 pll_get_frac
1a002e1c l     F .text	00000048 Chip_Clock_FindBaseClock
1a003088 l     F .text	00000022 Chip_Clock_GetDivRate
10002db8 l     O .bss	00000008 audio_usb_pll_freq
1a0043cc l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004438 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00338c l     F .text	00000014 Chip_SSP_GetClockIndex
1a0033a0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 impure.c
100000d0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a004514 l       .bss_RAM5	00000000 __init_array_end
1a004514 l       .bss_RAM5	00000000 __preinit_array_end
1a004514 l       .bss_RAM5	00000000 __init_array_start
1a004514 l       .bss_RAM5	00000000 __preinit_array_start
1a0040d2 g     F .text	00000010 _malloc_usable_size_r
1a002eb0 g     F .text	0000001c Chip_Clock_GetDividerSource
1a00253c g     F .text	00000044 TIMER2_IRQHandler
1a00018e  w    F .text	00000002 DebugMon_Handler
1a000194  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a000194  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a000194  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001cd4 g     F .text	0000002c vPortExitCritical
1a000194  w    F .text	00000002 I2C0_IRQHandler
10002d64 g     O .bss	00000004 callBackFuncParams
1a000184  w    F .text	00000002 HardFault_Handler
1a000ba8 g     F .text	0000004c vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a002c50 g     F .text	0000000c Chip_ADC_SetResolution
1a004084 g     F .text	00000002 __malloc_unlock
1a001d70 g     F .text	0000002c SysTick_Handler
1a002a70 g     F .text	00000040 Chip_UART_SetBaud
1a0025d4 g     F .text	00000008 printString
1a000194  w    F .text	00000002 SDIO_IRQHandler
1a000194  w    F .text	00000002 ATIMER_IRQHandler
1a004050 g     F .text	00000032 memmove
1a001d00 g     F .text	00000064 PendSV_Handler
1a000944 g     F .text	000000e4 xQueueGenericSendFromISR
1a000182  w    F .text	00000002 NMI_Handler
1a00451c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a000194  w    F .text	00000002 I2C1_IRQHandler
1a000194  w    F .text	00000002 UART1_IRQHandler
1a000194  w    F .text	00000002 GPIO5_IRQHandler
1a000194  w    F .text	00000002 CAN1_IRQHandler
10002bc4 g     O .bss	00000004 pxCurrentTCB
53ff4418 g       *ABS*	00000000 __valid_user_code_checksum
1a00451c g       .ARM.exidx	00000000 _etext
1a000194  w    F .text	00000002 USB1_IRQHandler
1a000194  w    F .text	00000002 I2S0_IRQHandler
1a001598 g     F .text	00000018 vTaskInternalSetTimeOutState
1a002580 g     F .text	00000044 TIMER3_IRQHandler
1a003114 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001b4 g     F .text	00000012 bss_init
1a001dd4 g     F .text	00000128 xPortStartScheduler
1a003814 g     F .text	00000016 memcpy
1a0014a4 g     F .text	00000030 vTaskPlaceOnEventList
1a000194  w    F .text	00000002 SGPIO_IRQHandler
1a003aac g     F .text	000001ec _svfprintf_r
1a001d9c  w    F .text	00000038 vPortSetupTimerInterrupt
1a0034cc g     F .text	00000000 .hidden __aeabi_uldivmod
10002e34 g       .noinit	00000000 _noinit
1a000508 g     F .text	00000016 vPortFree
1a00248a g     F .text	00000018 uartWriteString
10002e30 g     O .bss	00000004 SystemCoreClock
1a002a1c g     F .text	00000054 Chip_UART_Init
1a000194  w    F .text	00000002 ADC0_IRQHandler
1a002288 g     F .text	00000038 tickerCallback
1a001efc g     F .text	0000005c vPortValidateInterruptPriority
1a00018a  w    F .text	00000002 UsageFault_Handler
1a003190 g     F .text	0000004c Chip_Clock_GetRate
1a000c14 g     F .text	00000018 vListInsertEnd
1a000194  w    F .text	00000002 GPIO6_IRQHandler
1a0025c4 g     F .text	00000010 printInitUart
10002e20 g     O .bss	00000008 tickCounter
1a002904 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0034fc g     F .text	000002cc .hidden __udivmoddi4
1a002890 g     F .text	00000020 _sbrk_r
1a0042dc g     O .text	00000004 ExtRateIn
1a000194  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000c0c g     F .text	00000006 vListInitialiseItem
1a0003c4 g     F .text	00000074 myTask
1a001fea g     F .text	0000000a GPIO1_IRQHandler
1a000a28 g     F .text	00000158 xQueueReceive
10002ddc g     O .bss	00000040 xQueueRegistry
1a000ca0 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a000194  w    F .text	00000002 SSP0_IRQHandler
1a004514 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a004086 g     F .text	0000004c _realloc_r
1a0037cc g     F .text	00000048 __libc_init_array
1a000194  w    F .text	00000002 ADC1_IRQHandler
1a0004a4 g     F .text	00000064 pvPortMalloc
1a002854 g     F .text	0000003c Board_Init
1a0034c8 g     F .text	00000002 _init
1a000bf4 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a001168 g     F .text	0000000c xTaskGetTickCount
1a0007b4 g     F .text	00000190 xQueueGenericSend
1a000194  w    F .text	00000002 RTC_IRQHandler
10002e34 g       .bss	00000000 _ebss
1a0024bc g     F .text	00000040 TIMER0_IRQHandler
1a00036a g     F .text	00000046 QMPool_get
1a0022c0 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a000194  w    F .text	00000002 SPI_IRQHandler
1a0029c0 g     F .text	00000030 Chip_I2C_SetClockRate
1a00165c g     F .text	000000b4 xTaskPriorityDisinherit
1a000194  w    F .text	00000002 LCD_IRQHandler
1a002e64 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00150c g     F .text	0000008c xTaskRemoveFromEventList
1a000cbc g     F .text	00000002 vApplicationMallocFailedHook
1a000196 g     F .text	0000001e data_init
1a0024fc g     F .text	00000040 TIMER1_IRQHandler
1a004480 g     O .text	00000020 __sf_fake_stderr
1a00299c g     F .text	00000024 Chip_I2C_Init
1a0024a2 g     F .text	0000000a UART2_IRQHandler
1a0025dc g     F .text	00000010 printEnter
1a003020 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a0039f8 g     F .text	000000b4 __ssputs_r
1a00414c g     O .text	00000136 gpioPinsInit
1a002470 g     F .text	0000001a uartWriteByte
1a0033b8 g     F .text	00000012 Chip_SSP_SetClockRate
1a002272 g     F .text	00000016 gpioToggle
1a001ff4 g     F .text	0000000a GPIO2_IRQHandler
1a003fb0 g     F .text	00000000 memchr
1a0015b0 g     F .text	00000080 xTaskCheckForTimeOut
1a0038a8 g     F .text	0000009c _free_r
1a0030f0 g     F .text	00000024 Chip_Clock_GetBaseClock
10000130 g       .bss	00000000 _bss
1a002c1c g     F .text	00000032 Chip_ADC_SetSampleRate
1a001158 g     F .text	00000010 vTaskSuspendAll
1a000194  w    F .text	00000002 I2S1_IRQHandler
1a0033cc g     F .text	0000003e Chip_SSP_SetBitRate
1a000c60 g     F .text	00000026 uxListRemove
1a003234 g     F .text	00000002 Chip_GPIO_Init
1a004308 g     O .text	00000004 OscRateIn
1a0023f4 g     F .text	0000007c uartInit
1a000fd4 g     F .text	0000007c xTaskCreateStatic
10002e34 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00387c g     F .text	0000002a strncpy
1a0013e0 g     F .text	000000c4 vTaskSwitchContext
1a000194  w    F .text	00000002 SSP1_IRQHandler
1a000708 g     F .text	000000aa xQueueGenericCreateStatic
1a0014d4 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a002034 g     F .text	00000194 gpioInit
1a000c88 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a0018e4 g     F .text	0000006c xTimerGenericCommand
1a000cb8 g     F .text	00000002 vApplicationStackOverflowHook
1a0037c8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a000194  w    F .text	00000002 USB0_IRQHandler
1a000194  w    F .text	00000002 GPIO3_IRQHandler
1a004082 g     F .text	00000002 __malloc_lock
1a000194  w    F .text	00000002 SCT_IRQHandler
1a0003b0 g     F .text	00000012 QMPool_getMin
1a0044a0 g     O .text	00000020 __sf_fake_stdin
1a002ecc g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00382a g     F .text	00000010 memset
1a000186  w    F .text	00000002 MemManage_Handler
1a000438 g     F .text	0000006c main
1a000194  w    F .text	00000002 WDT_IRQHandler
1a000c2c g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a001c60 g     F .text	00000024 SVC_Handler
10000008 g     O .data	00000004 DWT_CTRL
1a001824 g     F .text	00000070 xTimerCreateTimerTask
1a003944 g     F .text	000000b4 _malloc_r
1a0023c8 g     F .text	00000018 uartTxReady
1a000194  w    F .text	00000002 GPIO7_IRQHandler
1a003120 g     F .text	0000003c Chip_Clock_EnableOpts
1a002ee8 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0031dc g     F .text	00000058 fpuInit
1a002fa0 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0028b0 g     F .text	0000001c SystemInit
1a000194  w    F .text	00000002 SPIFI_IRQHandler
1a000194  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0021c8 g     F .text	00000056 gpioWrite
1a001298 g     F .text	000000f8 xTaskResumeAll
1a00383c g     F .text	00000040 sprintf
1a0010b8 g     F .text	000000a0 vTaskStartScheduler
1a002bdc g     F .text	00000040 Chip_ADC_Init
1a0028cc g     F .text	00000038 Board_SetupMuxing
1a00034c g     F .text	0000001e QMPool_put
1a002ab0 g     F .text	000000e8 Chip_UART_SetBaudFDR
10002e28 g     O .bss	00000008 tickRateMS
1a000194  w    F .text	00000002 ETH_IRQHandler
1a003c98 g     F .text	000000ea _printf_common
10002d68 g     O .bss	00000004 tickHookFunction
100000cc g     O .data	00000004 _impure_ptr
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a003aac g     F .text	000001ec _svfiprintf_r
1a0023e0 g     F .text	00000014 uartTxWrite
1a000194  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001630 g     F .text	0000000c vTaskMissedYield
10002e34 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00340c g     F .text	00000038 Chip_SSP_Init
1a000b80 g     F .text	00000028 vQueueAddToRegistry
1a000194  w    F .text	00000002 GINT0_IRQHandler
1a001174 g     F .text	00000124 xTaskIncrementTick
1a000194  w    F .text	00000002 DAC_IRQHandler
1a002830 g     F .text	00000024 Board_Debug_Init
1a000664 g     F .text	00000080 xQueueGenericReset
10000130 g       .data	00000000 _edata
1a00297c g     F .text	00000020 Chip_I2C_EventHandler
1a000194  w    F .text	00000002 M0SUB_IRQHandler
1a001050 g     F .text	00000066 xTaskCreate
1a003238 g     F .text	00000154 Chip_SetupCoreClock
1a001fe0 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a003444 g     F .text	00000084 ResetISR
1a002c5c g     F .text	00000014 SystemCoreClockUpdate
1a000194  w    F .text	00000002 DMA_IRQHandler
1a001390 g     F .text	00000050 vTaskDelay
1a000194  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0044c0 g     O .text	00000020 __sf_fake_stdout
1a00383c g     F .text	00000040 siprintf
1a000300 g     F .text	0000004c QMPool_init
1a00163c g     F .text	00000020 xTaskGetSchedulerState
1a0037c8  w    F .text	00000002 .hidden __aeabi_idiv0
10002dc8 g     O .bss	00000014 mem_pool_1
1a000188  w    F .text	00000002 BusFault_Handler
1a001c2c g     F .text	0000002c pxPortInitialiseStack
1a003d84 g     F .text	00000224 _printf_i
1a00315c g     F .text	00000034 Chip_Clock_Enable
1a0024ac g     F .text	0000000a UART3_IRQHandler
10002dc4 g     O .bss	00000004 __malloc_sbrk_start
1a000194  w    F .text	00000002 MCPWM_IRQHandler
1a001894 g     F .text	0000004e xTimerCreateStatic
1a000194  w    F .text	00000002 M0APP_IRQHandler
1a00221e g     F .text	00000054 gpioRead
1a0025ec g     F .text	000000f4 boardInit
1a001c90 g     F .text	00000044 vPortEnterCritical
10002dc0 g     O .bss	00000004 __malloc_free_list
1a000194  w    F .text	00000002 GINT1_IRQHandler
1a0030ac g     F .text	00000044 Chip_Clock_SetBaseClock
1a001f58 g     F .text	0000001c cyclesCounterInit
1a000194  w    F .text	00000002 GPIO4_IRQHandler
1a002970 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 45 34 00 1a 83 01 00 1a 85 01 00 1a     ....E4..........
1a000010:	87 01 00 1a 89 01 00 1a 8b 01 00 1a 18 44 ff 53     .............D.S
	...
1a00002c:	61 1c 00 1a 8f 01 00 1a 00 00 00 00 01 1d 00 1a     a...............
1a00003c:	71 1d 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     q...............
1a00004c:	00 00 00 00 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00005c:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00006c:	95 01 00 1a bd 24 00 1a fd 24 00 1a 3d 25 00 1a     .....$...$..=%..
1a00007c:	81 25 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     .%..............
1a00008c:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00009c:	95 01 00 1a 79 01 00 1a 95 01 00 1a a3 24 00 1a     ....y........$..
1a0000ac:	ad 24 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     .$..............
1a0000bc:	95 01 00 1a e1 1f 00 1a eb 1f 00 1a f5 1f 00 1a     ................
1a0000cc:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a0000dc:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a0000ec:	95 01 00 1a 00 00 00 00 95 01 00 1a 95 01 00 1a     ................
1a0000fc:	95 01 00 1a 00 00 00 00 95 01 00 1a 95 01 00 1a     ................
1a00010c:	95 01 00 1a 95 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a00451c 	.word	0x1a00451c
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000130 	.word	0x00000130
1a000120:	1a00451c 	.word	0x1a00451c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00451c 	.word	0x1a00451c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00451c 	.word	0x1a00451c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00451c 	.word	0x1a00451c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000130 	.word	0x10000130
1a000154:	00002d04 	.word	0x00002d04
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f002 f8c6 	bl	1a00230c <uartProcessIRQ>
}
1a000180:	bd08      	pop	{r3, pc}

1a000182 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <NMI_Handler>

1a000184 <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <HardFault_Handler>

1a000186 <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <MemManage_Handler>

1a000188 <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <BusFault_Handler>

1a00018a <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a00018a:	e7fe      	b.n	1a00018a <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a00018c:	e7fe      	b.n	1a00018c <UsageFault_Handler+0x2>

1a00018e <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a00018e:	e7fe      	b.n	1a00018e <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000190:	e7fe      	b.n	1a000190 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000192:	e7fe      	b.n	1a000192 <DebugMon_Handler+0x4>

1a000194 <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a000194:	e7fe      	b.n	1a000194 <ADC0_IRQHandler>

1a000196 <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	2300      	movs	r3, #0
1a000198:	4293      	cmp	r3, r2
1a00019a:	d20a      	bcs.n	1a0001b2 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a00019c:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a00019e:	6804      	ldr	r4, [r0, #0]
1a0001a0:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a2:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001a4:	3004      	adds	r0, #4
1a0001a6:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	4293      	cmp	r3, r2
1a0001aa:	d3f8      	bcc.n	1a00019e <data_init+0x8>
}
1a0001ac:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001b0:	4770      	bx	lr
1a0001b2:	4770      	bx	lr

1a0001b4 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	2300      	movs	r3, #0
1a0001b6:	e003      	b.n	1a0001c0 <bss_init+0xc>
        *pulDest++ = 0;
1a0001b8:	2200      	movs	r2, #0
1a0001ba:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001be:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c0:	428b      	cmp	r3, r1
1a0001c2:	d3f9      	bcc.n	1a0001b8 <bss_init+0x4>
}
1a0001c4:	4770      	bx	lr
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <QMPool_init>:
* The following example illustrates how to invoke QMPool_init():
* @include qmp_init.c
*/
void QMPool_init(QMPool * const me, void * const poolSto,
                 uint_fast32_t poolSize, uint_fast16_t blockSize)
{
1a000300:	b4f0      	push	{r4, r5, r6, r7}
    QFreeBlock *fb;
    uint_fast16_t nblocks;
	
    me->free_head = poolSto;
1a000302:	6001      	str	r1, [r0, #0]

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
1a000304:	2404      	movs	r4, #4
1a000306:	8184      	strh	r4, [r0, #12]
    nblocks = (uint_fast16_t)1;/* #free blocks that fit in one memory block */
1a000308:	2601      	movs	r6, #1
    while (me->blockSize < (QMPoolSize)blockSize) {
1a00030a:	e002      	b.n	1a000312 <QMPool_init+0x12>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
1a00030c:	3404      	adds	r4, #4
1a00030e:	8184      	strh	r4, [r0, #12]
        ++nblocks;
1a000310:	3601      	adds	r6, #1
    while (me->blockSize < (QMPoolSize)blockSize) {
1a000312:	8984      	ldrh	r4, [r0, #12]
1a000314:	b29d      	uxth	r5, r3
1a000316:	42ac      	cmp	r4, r5
1a000318:	d3f8      	bcc.n	1a00030c <QMPool_init+0xc>
    }
    blockSize = (uint_fast16_t)me->blockSize; /* round-up to nearest block */
1a00031a:	4627      	mov	r7, r4

    /* chain all blocks together in a free-list... */
    poolSize -= (uint_fast32_t)blockSize; /* don't count the last block */
1a00031c:	1b14      	subs	r4, r2, r4
    me->nTot  = (QMPoolCtr)1;    /* the last block already in the pool */
1a00031e:	2301      	movs	r3, #1
1a000320:	81c3      	strh	r3, [r0, #14]
    fb = (QFreeBlock *)me->free_head; /* start at the head of the free list */
1a000322:	6803      	ldr	r3, [r0, #0]

    /* chain all blocks together in a free-list... */
    while (poolSize >= (uint_fast32_t)blockSize) {
1a000324:	e007      	b.n	1a000336 <QMPool_init+0x36>
        fb->next = &QF_PTR_AT_(fb, nblocks);/*point next link to next block */
1a000326:	eb03 0286 	add.w	r2, r3, r6, lsl #2
1a00032a:	601a      	str	r2, [r3, #0]
        fb = fb->next;           /* advance to the next block */
1a00032c:	681b      	ldr	r3, [r3, #0]
        poolSize -= (uint_fast32_t)blockSize; /* reduce available pool size */
1a00032e:	1be4      	subs	r4, r4, r7
        ++me->nTot;              /* increment the number of blocks so far */
1a000330:	89c5      	ldrh	r5, [r0, #14]
1a000332:	3501      	adds	r5, #1
1a000334:	81c5      	strh	r5, [r0, #14]
    while (poolSize >= (uint_fast32_t)blockSize) {
1a000336:	42bc      	cmp	r4, r7
1a000338:	d2f5      	bcs.n	1a000326 <QMPool_init+0x26>
    }

    fb->next  = (QFreeBlock *)0; /* the last link points to NULL */
1a00033a:	2200      	movs	r2, #0
1a00033c:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;        /* all blocks are free */
1a00033e:	89c2      	ldrh	r2, [r0, #14]
1a000340:	8202      	strh	r2, [r0, #16]
    me->nMin  = me->nTot;        /* the minimum number of free blocks */
1a000342:	8242      	strh	r2, [r0, #18]
    me->start = poolSto;         /* the original start this pool buffer */
1a000344:	6041      	str	r1, [r0, #4]
    me->end   = fb;              /* the last block in this pool */
1a000346:	6083      	str	r3, [r0, #8]
}
1a000348:	bcf0      	pop	{r4, r5, r6, r7}
1a00034a:	4770      	bx	lr

1a00034c <QMPool_put>:
*
* @usage
* The following example illustrates how to use QMPool_put():
* @include qmp_use.c
*/
void QMPool_put(QMPool * const me, void *b) {
1a00034c:	b538      	push	{r3, r4, r5, lr}
1a00034e:	4604      	mov	r4, r0
1a000350:	460d      	mov	r5, r1
    
    /** @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
	portENTER_CRITICAL(); //Enter on critical section
1a000352:	f001 fc9d 	bl	1a001c90 <vPortEnterCritical>

    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
1a000356:	6823      	ldr	r3, [r4, #0]
1a000358:	602b      	str	r3, [r5, #0]
    me->free_head = b;      /* set as new head of the free list */
1a00035a:	6025      	str	r5, [r4, #0]
    ++me->nFree;            /* one more free block in this pool */
1a00035c:	8a23      	ldrh	r3, [r4, #16]
1a00035e:	3301      	adds	r3, #1
1a000360:	b29b      	uxth	r3, r3
1a000362:	8223      	strh	r3, [r4, #16]
    
    portEXIT_CRITICAL(); //Exit from critical section
1a000364:	f001 fcb6 	bl	1a001cd4 <vPortExitCritical>
}
1a000368:	bd38      	pop	{r3, r4, r5, pc}

1a00036a <QMPool_get>:
*
* @usage
* The following example illustrates how to use QMPool_get():
* @include qmp_use.c
*/
void *QMPool_get(QMPool * const me, uint_fast16_t const margin) {
1a00036a:	b538      	push	{r3, r4, r5, lr}
1a00036c:	4604      	mov	r4, r0
1a00036e:	460d      	mov	r5, r1
    QFreeBlock *fb;
    
    portENTER_CRITICAL(); //Enter on critical section
1a000370:	f001 fc8e 	bl	1a001c90 <vPortEnterCritical>

    /* have more free blocks than the requested margin? */
    if (me->nFree > (QMPoolCtr)margin) {
1a000374:	8a23      	ldrh	r3, [r4, #16]
1a000376:	b29b      	uxth	r3, r3
1a000378:	b2ad      	uxth	r5, r5
1a00037a:	42ab      	cmp	r3, r5
1a00037c:	d916      	bls.n	1a0003ac <QMPool_get+0x42>
        void *fb_next;
        fb = (QFreeBlock *)me->free_head; /* get a free block */
1a00037e:	6825      	ldr	r5, [r4, #0]

        fb_next = fb->next; /* put volatile to a temporary to avoid UB */
1a000380:	682a      	ldr	r2, [r5, #0]

        /* is the pool becoming empty? */
        --me->nFree; /* one less free block */
1a000382:	8a23      	ldrh	r3, [r4, #16]
1a000384:	3b01      	subs	r3, #1
1a000386:	b29b      	uxth	r3, r3
1a000388:	8223      	strh	r3, [r4, #16]
        if (me->nFree == (QMPoolCtr)0) {
1a00038a:	8a23      	ldrh	r3, [r4, #16]
1a00038c:	b29b      	uxth	r3, r3
1a00038e:	b92b      	cbnz	r3, 1a00039c <QMPool_get+0x32>

            me->nMin = (QMPoolCtr)0; /* remember that the pool got empty */
1a000390:	8263      	strh	r3, [r4, #18]
            if (me->nMin > me->nFree) {
                me->nMin = me->nFree; /* remember the new minimum */
            }
        }

        me->free_head = fb_next; /* set the head to the next free block */
1a000392:	6022      	str	r2, [r4, #0]

    	fb = (QFreeBlock *)0;

    }

    portEXIT_CRITICAL(); //Exit from critical section
1a000394:	f001 fc9e 	bl	1a001cd4 <vPortExitCritical>

    return fb;  /* return the block or NULL pointer to the caller */
}
1a000398:	4628      	mov	r0, r5
1a00039a:	bd38      	pop	{r3, r4, r5, pc}
            if (me->nMin > me->nFree) {
1a00039c:	8a61      	ldrh	r1, [r4, #18]
1a00039e:	8a23      	ldrh	r3, [r4, #16]
1a0003a0:	b29b      	uxth	r3, r3
1a0003a2:	4299      	cmp	r1, r3
1a0003a4:	d9f5      	bls.n	1a000392 <QMPool_get+0x28>
                me->nMin = me->nFree; /* remember the new minimum */
1a0003a6:	8a23      	ldrh	r3, [r4, #16]
1a0003a8:	8263      	strh	r3, [r4, #18]
1a0003aa:	e7f2      	b.n	1a000392 <QMPool_get+0x28>
    	fb = (QFreeBlock *)0;
1a0003ac:	2500      	movs	r5, #0
1a0003ae:	e7f1      	b.n	1a000394 <QMPool_get+0x2a>

1a0003b0 <QMPool_getMin>:
* @param[in,out] me      pointer (see @ref oop)
*
* @returns
* the minimum number of unused blocks in the given event pool.
*/
uint_fast16_t QMPool_getMin(QMPool * const me) {
1a0003b0:	b510      	push	{r4, lr}
1a0003b2:	4604      	mov	r4, r0
    uint_fast16_t min;
    
    portENTER_CRITICAL(); //Enter on critical section
1a0003b4:	f001 fc6c 	bl	1a001c90 <vPortEnterCritical>

    min = me->nMin;
1a0003b8:	8a64      	ldrh	r4, [r4, #18]

    portEXIT_CRITICAL(); //Exit from critical section
1a0003ba:	f001 fc8b 	bl	1a001cd4 <vPortExitCritical>

    return min;
}
1a0003be:	4620      	mov	r0, r4
1a0003c0:	bd10      	pop	{r4, pc}
1a0003c2:	Address 0x000000001a0003c2 is out of bounds.


1a0003c4 <myTask>:

/*==================[definiciones de funciones externas]=====================*/

// Implementacion de funcion de la tarea
void myTask( void* taskParmPtr )
{
1a0003c4:	b570      	push	{r4, r5, r6, lr}
1a0003c6:	b08e      	sub	sp, #56	; 0x38
	// ---------- INICIALIZACION ------------------------------
	char msg[50+1];
	sprintf( msg, "Numero de elementos: %d", QMPool_getMin(&mem_pool_1) );
1a0003c8:	4817      	ldr	r0, [pc, #92]	; (1a000428 <myTask+0x64>)
1a0003ca:	f7ff fff1 	bl	1a0003b0 <QMPool_getMin>
1a0003ce:	4602      	mov	r2, r0
1a0003d0:	4916      	ldr	r1, [pc, #88]	; (1a00042c <myTask+0x68>)
1a0003d2:	a801      	add	r0, sp, #4
1a0003d4:	f003 fa32 	bl	1a00383c <siprintf>
	debugPrintlnString( msg );
1a0003d8:	4c15      	ldr	r4, [pc, #84]	; (1a000430 <myTask+0x6c>)
1a0003da:	a901      	add	r1, sp, #4
1a0003dc:	7820      	ldrb	r0, [r4, #0]
1a0003de:	f002 f8f9 	bl	1a0025d4 <printString>
1a0003e2:	7820      	ldrb	r0, [r4, #0]
1a0003e4:	f002 f8fa 	bl	1a0025dc <printEnter>

	// ---------- REPETIR POR SIEMPRE --------------------------
	while(TRUE) {
		//Solicito un bloque de memoria
		char * block1 = QMPool_get(&mem_pool_1, 0U); /* asserts on empty pool */
1a0003e8:	4d0f      	ldr	r5, [pc, #60]	; (1a000428 <myTask+0x64>)
1a0003ea:	2100      	movs	r1, #0
1a0003ec:	4628      	mov	r0, r5
1a0003ee:	f7ff ffbc 	bl	1a00036a <QMPool_get>
1a0003f2:	4604      	mov	r4, r0
		// Intercambia el estado del LEDB
		gpioToggle( LEDB );
1a0003f4:	202a      	movs	r0, #42	; 0x2a
1a0003f6:	f001 ff3c 	bl	1a002272 <gpioToggle>
		strncpy(block1, "Blink!", 10U);
1a0003fa:	220a      	movs	r2, #10
1a0003fc:	490d      	ldr	r1, [pc, #52]	; (1a000434 <myTask+0x70>)
1a0003fe:	4620      	mov	r0, r4
1a000400:	f003 fa3c 	bl	1a00387c <strncpy>
		debugPrintlnString( block1 );
1a000404:	4e0a      	ldr	r6, [pc, #40]	; (1a000430 <myTask+0x6c>)
1a000406:	4621      	mov	r1, r4
1a000408:	7830      	ldrb	r0, [r6, #0]
1a00040a:	f002 f8e3 	bl	1a0025d4 <printString>
1a00040e:	7830      	ldrb	r0, [r6, #0]
1a000410:	f002 f8e4 	bl	1a0025dc <printEnter>
		//Libero el bloque de memoria
		QMPool_put(&mem_pool_1, block1);
1a000414:	4621      	mov	r1, r4
1a000416:	4628      	mov	r0, r5
1a000418:	f7ff ff98 	bl	1a00034c <QMPool_put>
		// Envia la tarea al estado bloqueado durante 500ms
		vTaskDelay( 500 / portTICK_RATE_MS );
1a00041c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000420:	f000 ffb6 	bl	1a001390 <vTaskDelay>
1a000424:	e7e0      	b.n	1a0003e8 <myTask+0x24>
1a000426:	bf00      	nop
1a000428:	10002dc8 	.word	0x10002dc8
1a00042c:	1a004110 	.word	0x1a004110
1a000430:	10000130 	.word	0x10000130
1a000434:	1a004128 	.word	0x1a004128

1a000438 <main>:
{
1a000438:	b500      	push	{lr}
1a00043a:	b083      	sub	sp, #12
	boardConfig();
1a00043c:	f002 f8d6 	bl	1a0025ec <boardInit>
	debugPrintConfigUart( UART_USB, 115200 );
1a000440:	4c12      	ldr	r4, [pc, #72]	; (1a00048c <main+0x54>)
1a000442:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000446:	2103      	movs	r1, #3
1a000448:	4620      	mov	r0, r4
1a00044a:	f002 f8bb 	bl	1a0025c4 <printInitUart>
	debugPrintlnString( "Memory Pool con freeRTOS y sAPI." );
1a00044e:	4910      	ldr	r1, [pc, #64]	; (1a000490 <main+0x58>)
1a000450:	7820      	ldrb	r0, [r4, #0]
1a000452:	f002 f8bf 	bl	1a0025d4 <printString>
1a000456:	7820      	ldrb	r0, [r4, #0]
1a000458:	f002 f8c0 	bl	1a0025dc <printEnter>
	gpioWrite( LED3, ON );
1a00045c:	2101      	movs	r1, #1
1a00045e:	202d      	movs	r0, #45	; 0x2d
1a000460:	f001 feb2 	bl	1a0021c8 <gpioWrite>
	QMPool_init(&mem_pool_1,
1a000464:	230a      	movs	r3, #10
1a000466:	f44f 7200 	mov.w	r2, #512	; 0x200
1a00046a:	490a      	ldr	r1, [pc, #40]	; (1a000494 <main+0x5c>)
1a00046c:	480a      	ldr	r0, [pc, #40]	; (1a000498 <main+0x60>)
1a00046e:	f7ff ff47 	bl	1a000300 <QMPool_init>
	xTaskCreate(
1a000472:	2300      	movs	r3, #0
1a000474:	9301      	str	r3, [sp, #4]
1a000476:	2201      	movs	r2, #1
1a000478:	9200      	str	r2, [sp, #0]
1a00047a:	22b4      	movs	r2, #180	; 0xb4
1a00047c:	4907      	ldr	r1, [pc, #28]	; (1a00049c <main+0x64>)
1a00047e:	4808      	ldr	r0, [pc, #32]	; (1a0004a0 <main+0x68>)
1a000480:	f000 fde6 	bl	1a001050 <xTaskCreate>
	vTaskStartScheduler();
1a000484:	f000 fe18 	bl	1a0010b8 <vTaskStartScheduler>
1a000488:	e7fe      	b.n	1a000488 <main+0x50>
1a00048a:	bf00      	nop
1a00048c:	10000130 	.word	0x10000130
1a000490:	1a0040e4 	.word	0x1a0040e4
1a000494:	10000134 	.word	0x10000134
1a000498:	10002dc8 	.word	0x10002dc8
1a00049c:	1a004108 	.word	0x1a004108
1a0004a0:	1a0003c5 	.word	0x1a0003c5

1a0004a4 <pvPortMalloc>:
1a0004a4:	b538      	push	{r3, r4, r5, lr}
1a0004a6:	4604      	mov	r4, r0
1a0004a8:	f010 0f07 	tst.w	r0, #7
1a0004ac:	d002      	beq.n	1a0004b4 <pvPortMalloc+0x10>
1a0004ae:	f020 0407 	bic.w	r4, r0, #7
1a0004b2:	3408      	adds	r4, #8
1a0004b4:	f000 fe50 	bl	1a001158 <vTaskSuspendAll>
1a0004b8:	4b10      	ldr	r3, [pc, #64]	; (1a0004fc <pvPortMalloc+0x58>)
1a0004ba:	681b      	ldr	r3, [r3, #0]
1a0004bc:	b923      	cbnz	r3, 1a0004c8 <pvPortMalloc+0x24>
1a0004be:	4b10      	ldr	r3, [pc, #64]	; (1a000500 <pvPortMalloc+0x5c>)
1a0004c0:	f023 0307 	bic.w	r3, r3, #7
1a0004c4:	4a0d      	ldr	r2, [pc, #52]	; (1a0004fc <pvPortMalloc+0x58>)
1a0004c6:	6013      	str	r3, [r2, #0]
1a0004c8:	4b0e      	ldr	r3, [pc, #56]	; (1a000504 <pvPortMalloc+0x60>)
1a0004ca:	681b      	ldr	r3, [r3, #0]
1a0004cc:	441c      	add	r4, r3
1a0004ce:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a0004d2:	4294      	cmp	r4, r2
1a0004d4:	d807      	bhi.n	1a0004e6 <pvPortMalloc+0x42>
1a0004d6:	42a3      	cmp	r3, r4
1a0004d8:	d207      	bcs.n	1a0004ea <pvPortMalloc+0x46>
1a0004da:	4a08      	ldr	r2, [pc, #32]	; (1a0004fc <pvPortMalloc+0x58>)
1a0004dc:	6815      	ldr	r5, [r2, #0]
1a0004de:	441d      	add	r5, r3
1a0004e0:	4b08      	ldr	r3, [pc, #32]	; (1a000504 <pvPortMalloc+0x60>)
1a0004e2:	601c      	str	r4, [r3, #0]
1a0004e4:	e002      	b.n	1a0004ec <pvPortMalloc+0x48>
1a0004e6:	2500      	movs	r5, #0
1a0004e8:	e000      	b.n	1a0004ec <pvPortMalloc+0x48>
1a0004ea:	2500      	movs	r5, #0
1a0004ec:	f000 fed4 	bl	1a001298 <xTaskResumeAll>
1a0004f0:	b90d      	cbnz	r5, 1a0004f6 <pvPortMalloc+0x52>
1a0004f2:	f000 fbe3 	bl	1a000cbc <vApplicationMallocFailedHook>
1a0004f6:	4628      	mov	r0, r5
1a0004f8:	bd38      	pop	{r3, r4, r5, pc}
1a0004fa:	bf00      	nop
1a0004fc:	10002338 	.word	0x10002338
1a000500:	10000340 	.word	0x10000340
1a000504:	10000334 	.word	0x10000334

1a000508 <vPortFree>:
1a000508:	b140      	cbz	r0, 1a00051c <vPortFree+0x14>
1a00050a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00050e:	f383 8811 	msr	BASEPRI, r3
1a000512:	f3bf 8f6f 	isb	sy
1a000516:	f3bf 8f4f 	dsb	sy
1a00051a:	e7fe      	b.n	1a00051a <vPortFree+0x12>
1a00051c:	4770      	bx	lr
1a00051e:	bf00      	nop

1a000520 <prvIsQueueFull>:
1a000520:	b510      	push	{r4, lr}
1a000522:	4604      	mov	r4, r0
1a000524:	f001 fbb4 	bl	1a001c90 <vPortEnterCritical>
1a000528:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00052a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00052c:	429a      	cmp	r2, r3
1a00052e:	d101      	bne.n	1a000534 <prvIsQueueFull+0x14>
1a000530:	2401      	movs	r4, #1
1a000532:	e000      	b.n	1a000536 <prvIsQueueFull+0x16>
1a000534:	2400      	movs	r4, #0
1a000536:	f001 fbcd 	bl	1a001cd4 <vPortExitCritical>
1a00053a:	4620      	mov	r0, r4
1a00053c:	bd10      	pop	{r4, pc}
1a00053e:	bf00      	nop

1a000540 <prvIsQueueEmpty>:
1a000540:	b510      	push	{r4, lr}
1a000542:	4604      	mov	r4, r0
1a000544:	f001 fba4 	bl	1a001c90 <vPortEnterCritical>
1a000548:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00054a:	b90b      	cbnz	r3, 1a000550 <prvIsQueueEmpty+0x10>
1a00054c:	2401      	movs	r4, #1
1a00054e:	e000      	b.n	1a000552 <prvIsQueueEmpty+0x12>
1a000550:	2400      	movs	r4, #0
1a000552:	f001 fbbf 	bl	1a001cd4 <vPortExitCritical>
1a000556:	4620      	mov	r0, r4
1a000558:	bd10      	pop	{r4, pc}
1a00055a:	bf00      	nop

1a00055c <prvCopyDataToQueue>:
1a00055c:	b570      	push	{r4, r5, r6, lr}
1a00055e:	4604      	mov	r4, r0
1a000560:	4616      	mov	r6, r2
1a000562:	6b85      	ldr	r5, [r0, #56]	; 0x38
1a000564:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000566:	b93a      	cbnz	r2, 1a000578 <prvCopyDataToQueue+0x1c>
1a000568:	6803      	ldr	r3, [r0, #0]
1a00056a:	bb43      	cbnz	r3, 1a0005be <prvCopyDataToQueue+0x62>
1a00056c:	6840      	ldr	r0, [r0, #4]
1a00056e:	f001 f875 	bl	1a00165c <xTaskPriorityDisinherit>
1a000572:	2300      	movs	r3, #0
1a000574:	6063      	str	r3, [r4, #4]
1a000576:	e029      	b.n	1a0005cc <prvCopyDataToQueue+0x70>
1a000578:	b96e      	cbnz	r6, 1a000596 <prvCopyDataToQueue+0x3a>
1a00057a:	6880      	ldr	r0, [r0, #8]
1a00057c:	f003 f94a 	bl	1a003814 <memcpy>
1a000580:	68a2      	ldr	r2, [r4, #8]
1a000582:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000584:	4413      	add	r3, r2
1a000586:	60a3      	str	r3, [r4, #8]
1a000588:	6862      	ldr	r2, [r4, #4]
1a00058a:	4293      	cmp	r3, r2
1a00058c:	d319      	bcc.n	1a0005c2 <prvCopyDataToQueue+0x66>
1a00058e:	6823      	ldr	r3, [r4, #0]
1a000590:	60a3      	str	r3, [r4, #8]
1a000592:	2000      	movs	r0, #0
1a000594:	e01a      	b.n	1a0005cc <prvCopyDataToQueue+0x70>
1a000596:	68c0      	ldr	r0, [r0, #12]
1a000598:	f003 f93c 	bl	1a003814 <memcpy>
1a00059c:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a00059e:	425b      	negs	r3, r3
1a0005a0:	68e2      	ldr	r2, [r4, #12]
1a0005a2:	441a      	add	r2, r3
1a0005a4:	60e2      	str	r2, [r4, #12]
1a0005a6:	6821      	ldr	r1, [r4, #0]
1a0005a8:	428a      	cmp	r2, r1
1a0005aa:	d202      	bcs.n	1a0005b2 <prvCopyDataToQueue+0x56>
1a0005ac:	6862      	ldr	r2, [r4, #4]
1a0005ae:	4413      	add	r3, r2
1a0005b0:	60e3      	str	r3, [r4, #12]
1a0005b2:	2e02      	cmp	r6, #2
1a0005b4:	d107      	bne.n	1a0005c6 <prvCopyDataToQueue+0x6a>
1a0005b6:	b145      	cbz	r5, 1a0005ca <prvCopyDataToQueue+0x6e>
1a0005b8:	3d01      	subs	r5, #1
1a0005ba:	2000      	movs	r0, #0
1a0005bc:	e006      	b.n	1a0005cc <prvCopyDataToQueue+0x70>
1a0005be:	2000      	movs	r0, #0
1a0005c0:	e004      	b.n	1a0005cc <prvCopyDataToQueue+0x70>
1a0005c2:	2000      	movs	r0, #0
1a0005c4:	e002      	b.n	1a0005cc <prvCopyDataToQueue+0x70>
1a0005c6:	2000      	movs	r0, #0
1a0005c8:	e000      	b.n	1a0005cc <prvCopyDataToQueue+0x70>
1a0005ca:	2000      	movs	r0, #0
1a0005cc:	3501      	adds	r5, #1
1a0005ce:	63a5      	str	r5, [r4, #56]	; 0x38
1a0005d0:	bd70      	pop	{r4, r5, r6, pc}
1a0005d2:	bf00      	nop

1a0005d4 <prvCopyDataFromQueue>:
1a0005d4:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0005d6:	b172      	cbz	r2, 1a0005f6 <prvCopyDataFromQueue+0x22>
1a0005d8:	b510      	push	{r4, lr}
1a0005da:	68c3      	ldr	r3, [r0, #12]
1a0005dc:	4413      	add	r3, r2
1a0005de:	60c3      	str	r3, [r0, #12]
1a0005e0:	6844      	ldr	r4, [r0, #4]
1a0005e2:	42a3      	cmp	r3, r4
1a0005e4:	d301      	bcc.n	1a0005ea <prvCopyDataFromQueue+0x16>
1a0005e6:	6803      	ldr	r3, [r0, #0]
1a0005e8:	60c3      	str	r3, [r0, #12]
1a0005ea:	4603      	mov	r3, r0
1a0005ec:	4608      	mov	r0, r1
1a0005ee:	68d9      	ldr	r1, [r3, #12]
1a0005f0:	f003 f910 	bl	1a003814 <memcpy>
1a0005f4:	bd10      	pop	{r4, pc}
1a0005f6:	4770      	bx	lr

1a0005f8 <prvUnlockQueue>:
1a0005f8:	b538      	push	{r3, r4, r5, lr}
1a0005fa:	4605      	mov	r5, r0
1a0005fc:	f001 fb48 	bl	1a001c90 <vPortEnterCritical>
1a000600:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000604:	b2e4      	uxtb	r4, r4
1a000606:	e00a      	b.n	1a00061e <prvUnlockQueue+0x26>
1a000608:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a00060a:	b15b      	cbz	r3, 1a000624 <prvUnlockQueue+0x2c>
1a00060c:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000610:	f000 ff7c 	bl	1a00150c <xTaskRemoveFromEventList>
1a000614:	b108      	cbz	r0, 1a00061a <prvUnlockQueue+0x22>
1a000616:	f001 f80b 	bl	1a001630 <vTaskMissedYield>
1a00061a:	3c01      	subs	r4, #1
1a00061c:	b2e4      	uxtb	r4, r4
1a00061e:	b263      	sxtb	r3, r4
1a000620:	2b00      	cmp	r3, #0
1a000622:	dcf1      	bgt.n	1a000608 <prvUnlockQueue+0x10>
1a000624:	23ff      	movs	r3, #255	; 0xff
1a000626:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
1a00062a:	f001 fb53 	bl	1a001cd4 <vPortExitCritical>
1a00062e:	f001 fb2f 	bl	1a001c90 <vPortEnterCritical>
1a000632:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000636:	b2e4      	uxtb	r4, r4
1a000638:	e00a      	b.n	1a000650 <prvUnlockQueue+0x58>
1a00063a:	692b      	ldr	r3, [r5, #16]
1a00063c:	b15b      	cbz	r3, 1a000656 <prvUnlockQueue+0x5e>
1a00063e:	f105 0010 	add.w	r0, r5, #16
1a000642:	f000 ff63 	bl	1a00150c <xTaskRemoveFromEventList>
1a000646:	b108      	cbz	r0, 1a00064c <prvUnlockQueue+0x54>
1a000648:	f000 fff2 	bl	1a001630 <vTaskMissedYield>
1a00064c:	3c01      	subs	r4, #1
1a00064e:	b2e4      	uxtb	r4, r4
1a000650:	b263      	sxtb	r3, r4
1a000652:	2b00      	cmp	r3, #0
1a000654:	dcf1      	bgt.n	1a00063a <prvUnlockQueue+0x42>
1a000656:	23ff      	movs	r3, #255	; 0xff
1a000658:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
1a00065c:	f001 fb3a 	bl	1a001cd4 <vPortExitCritical>
1a000660:	bd38      	pop	{r3, r4, r5, pc}
1a000662:	bf00      	nop

1a000664 <xQueueGenericReset>:
1a000664:	b538      	push	{r3, r4, r5, lr}
1a000666:	b940      	cbnz	r0, 1a00067a <xQueueGenericReset+0x16>
1a000668:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00066c:	f383 8811 	msr	BASEPRI, r3
1a000670:	f3bf 8f6f 	isb	sy
1a000674:	f3bf 8f4f 	dsb	sy
1a000678:	e7fe      	b.n	1a000678 <xQueueGenericReset+0x14>
1a00067a:	4604      	mov	r4, r0
1a00067c:	460d      	mov	r5, r1
1a00067e:	f001 fb07 	bl	1a001c90 <vPortEnterCritical>
1a000682:	6821      	ldr	r1, [r4, #0]
1a000684:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000686:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000688:	fb03 1002 	mla	r0, r3, r2, r1
1a00068c:	6060      	str	r0, [r4, #4]
1a00068e:	2000      	movs	r0, #0
1a000690:	63a0      	str	r0, [r4, #56]	; 0x38
1a000692:	60a1      	str	r1, [r4, #8]
1a000694:	3a01      	subs	r2, #1
1a000696:	fb02 1303 	mla	r3, r2, r3, r1
1a00069a:	60e3      	str	r3, [r4, #12]
1a00069c:	23ff      	movs	r3, #255	; 0xff
1a00069e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0006a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0006a6:	b97d      	cbnz	r5, 1a0006c8 <xQueueGenericReset+0x64>
1a0006a8:	6923      	ldr	r3, [r4, #16]
1a0006aa:	b1ab      	cbz	r3, 1a0006d8 <xQueueGenericReset+0x74>
1a0006ac:	f104 0010 	add.w	r0, r4, #16
1a0006b0:	f000 ff2c 	bl	1a00150c <xTaskRemoveFromEventList>
1a0006b4:	b180      	cbz	r0, 1a0006d8 <xQueueGenericReset+0x74>
1a0006b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0006ba:	4b09      	ldr	r3, [pc, #36]	; (1a0006e0 <xQueueGenericReset+0x7c>)
1a0006bc:	601a      	str	r2, [r3, #0]
1a0006be:	f3bf 8f4f 	dsb	sy
1a0006c2:	f3bf 8f6f 	isb	sy
1a0006c6:	e007      	b.n	1a0006d8 <xQueueGenericReset+0x74>
1a0006c8:	f104 0010 	add.w	r0, r4, #16
1a0006cc:	f000 fa92 	bl	1a000bf4 <vListInitialise>
1a0006d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0006d4:	f000 fa8e 	bl	1a000bf4 <vListInitialise>
1a0006d8:	f001 fafc 	bl	1a001cd4 <vPortExitCritical>
1a0006dc:	2001      	movs	r0, #1
1a0006de:	bd38      	pop	{r3, r4, r5, pc}
1a0006e0:	e000ed04 	.word	0xe000ed04

1a0006e4 <prvInitialiseNewQueue>:
1a0006e4:	b538      	push	{r3, r4, r5, lr}
1a0006e6:	461d      	mov	r5, r3
1a0006e8:	9c04      	ldr	r4, [sp, #16]
1a0006ea:	460b      	mov	r3, r1
1a0006ec:	b909      	cbnz	r1, 1a0006f2 <prvInitialiseNewQueue+0xe>
1a0006ee:	6024      	str	r4, [r4, #0]
1a0006f0:	e000      	b.n	1a0006f4 <prvInitialiseNewQueue+0x10>
1a0006f2:	6022      	str	r2, [r4, #0]
1a0006f4:	63e0      	str	r0, [r4, #60]	; 0x3c
1a0006f6:	6423      	str	r3, [r4, #64]	; 0x40
1a0006f8:	4620      	mov	r0, r4
1a0006fa:	2101      	movs	r1, #1
1a0006fc:	f7ff ffb2 	bl	1a000664 <xQueueGenericReset>
1a000700:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
1a000704:	bd38      	pop	{r3, r4, r5, pc}
1a000706:	bf00      	nop

1a000708 <xQueueGenericCreateStatic>:
1a000708:	b940      	cbnz	r0, 1a00071c <xQueueGenericCreateStatic+0x14>
1a00070a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00070e:	f383 8811 	msr	BASEPRI, r3
1a000712:	f3bf 8f6f 	isb	sy
1a000716:	f3bf 8f4f 	dsb	sy
1a00071a:	e7fe      	b.n	1a00071a <xQueueGenericCreateStatic+0x12>
1a00071c:	b510      	push	{r4, lr}
1a00071e:	b084      	sub	sp, #16
1a000720:	4604      	mov	r4, r0
1a000722:	b943      	cbnz	r3, 1a000736 <xQueueGenericCreateStatic+0x2e>
1a000724:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000728:	f383 8811 	msr	BASEPRI, r3
1a00072c:	f3bf 8f6f 	isb	sy
1a000730:	f3bf 8f4f 	dsb	sy
1a000734:	e7fe      	b.n	1a000734 <xQueueGenericCreateStatic+0x2c>
1a000736:	b112      	cbz	r2, 1a00073e <xQueueGenericCreateStatic+0x36>
1a000738:	b119      	cbz	r1, 1a000742 <xQueueGenericCreateStatic+0x3a>
1a00073a:	2001      	movs	r0, #1
1a00073c:	e002      	b.n	1a000744 <xQueueGenericCreateStatic+0x3c>
1a00073e:	2001      	movs	r0, #1
1a000740:	e000      	b.n	1a000744 <xQueueGenericCreateStatic+0x3c>
1a000742:	2000      	movs	r0, #0
1a000744:	b940      	cbnz	r0, 1a000758 <xQueueGenericCreateStatic+0x50>
1a000746:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00074a:	f383 8811 	msr	BASEPRI, r3
1a00074e:	f3bf 8f6f 	isb	sy
1a000752:	f3bf 8f4f 	dsb	sy
1a000756:	e7fe      	b.n	1a000756 <xQueueGenericCreateStatic+0x4e>
1a000758:	b912      	cbnz	r2, 1a000760 <xQueueGenericCreateStatic+0x58>
1a00075a:	b919      	cbnz	r1, 1a000764 <xQueueGenericCreateStatic+0x5c>
1a00075c:	2001      	movs	r0, #1
1a00075e:	e002      	b.n	1a000766 <xQueueGenericCreateStatic+0x5e>
1a000760:	2001      	movs	r0, #1
1a000762:	e000      	b.n	1a000766 <xQueueGenericCreateStatic+0x5e>
1a000764:	2000      	movs	r0, #0
1a000766:	b940      	cbnz	r0, 1a00077a <xQueueGenericCreateStatic+0x72>
1a000768:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00076c:	f383 8811 	msr	BASEPRI, r3
1a000770:	f3bf 8f6f 	isb	sy
1a000774:	f3bf 8f4f 	dsb	sy
1a000778:	e7fe      	b.n	1a000778 <xQueueGenericCreateStatic+0x70>
1a00077a:	2050      	movs	r0, #80	; 0x50
1a00077c:	9003      	str	r0, [sp, #12]
1a00077e:	9803      	ldr	r0, [sp, #12]
1a000780:	2850      	cmp	r0, #80	; 0x50
1a000782:	d008      	beq.n	1a000796 <xQueueGenericCreateStatic+0x8e>
1a000784:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000788:	f383 8811 	msr	BASEPRI, r3
1a00078c:	f3bf 8f6f 	isb	sy
1a000790:	f3bf 8f4f 	dsb	sy
1a000794:	e7fe      	b.n	1a000794 <xQueueGenericCreateStatic+0x8c>
1a000796:	4620      	mov	r0, r4
1a000798:	461c      	mov	r4, r3
1a00079a:	b13b      	cbz	r3, 1a0007ac <xQueueGenericCreateStatic+0xa4>
1a00079c:	2301      	movs	r3, #1
1a00079e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
1a0007a2:	9400      	str	r4, [sp, #0]
1a0007a4:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a0007a8:	f7ff ff9c 	bl	1a0006e4 <prvInitialiseNewQueue>
1a0007ac:	4620      	mov	r0, r4
1a0007ae:	b004      	add	sp, #16
1a0007b0:	bd10      	pop	{r4, pc}
1a0007b2:	bf00      	nop

1a0007b4 <xQueueGenericSend>:
1a0007b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0007b6:	b085      	sub	sp, #20
1a0007b8:	9201      	str	r2, [sp, #4]
1a0007ba:	b940      	cbnz	r0, 1a0007ce <xQueueGenericSend+0x1a>
1a0007bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0007c0:	f383 8811 	msr	BASEPRI, r3
1a0007c4:	f3bf 8f6f 	isb	sy
1a0007c8:	f3bf 8f4f 	dsb	sy
1a0007cc:	e7fe      	b.n	1a0007cc <xQueueGenericSend+0x18>
1a0007ce:	4604      	mov	r4, r0
1a0007d0:	b919      	cbnz	r1, 1a0007da <xQueueGenericSend+0x26>
1a0007d2:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0007d4:	b91a      	cbnz	r2, 1a0007de <xQueueGenericSend+0x2a>
1a0007d6:	2201      	movs	r2, #1
1a0007d8:	e002      	b.n	1a0007e0 <xQueueGenericSend+0x2c>
1a0007da:	2201      	movs	r2, #1
1a0007dc:	e000      	b.n	1a0007e0 <xQueueGenericSend+0x2c>
1a0007de:	2200      	movs	r2, #0
1a0007e0:	b942      	cbnz	r2, 1a0007f4 <xQueueGenericSend+0x40>
1a0007e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0007e6:	f383 8811 	msr	BASEPRI, r3
1a0007ea:	f3bf 8f6f 	isb	sy
1a0007ee:	f3bf 8f4f 	dsb	sy
1a0007f2:	e7fe      	b.n	1a0007f2 <xQueueGenericSend+0x3e>
1a0007f4:	2b02      	cmp	r3, #2
1a0007f6:	d103      	bne.n	1a000800 <xQueueGenericSend+0x4c>
1a0007f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0007fa:	2a01      	cmp	r2, #1
1a0007fc:	d102      	bne.n	1a000804 <xQueueGenericSend+0x50>
1a0007fe:	e002      	b.n	1a000806 <xQueueGenericSend+0x52>
1a000800:	2201      	movs	r2, #1
1a000802:	e000      	b.n	1a000806 <xQueueGenericSend+0x52>
1a000804:	2200      	movs	r2, #0
1a000806:	b942      	cbnz	r2, 1a00081a <xQueueGenericSend+0x66>
1a000808:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00080c:	f383 8811 	msr	BASEPRI, r3
1a000810:	f3bf 8f6f 	isb	sy
1a000814:	f3bf 8f4f 	dsb	sy
1a000818:	e7fe      	b.n	1a000818 <xQueueGenericSend+0x64>
1a00081a:	461d      	mov	r5, r3
1a00081c:	460e      	mov	r6, r1
1a00081e:	f000 ff0d 	bl	1a00163c <xTaskGetSchedulerState>
1a000822:	b918      	cbnz	r0, 1a00082c <xQueueGenericSend+0x78>
1a000824:	9b01      	ldr	r3, [sp, #4]
1a000826:	b91b      	cbnz	r3, 1a000830 <xQueueGenericSend+0x7c>
1a000828:	2301      	movs	r3, #1
1a00082a:	e002      	b.n	1a000832 <xQueueGenericSend+0x7e>
1a00082c:	2301      	movs	r3, #1
1a00082e:	e000      	b.n	1a000832 <xQueueGenericSend+0x7e>
1a000830:	2300      	movs	r3, #0
1a000832:	b943      	cbnz	r3, 1a000846 <xQueueGenericSend+0x92>
1a000834:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000838:	f383 8811 	msr	BASEPRI, r3
1a00083c:	f3bf 8f6f 	isb	sy
1a000840:	f3bf 8f4f 	dsb	sy
1a000844:	e7fe      	b.n	1a000844 <xQueueGenericSend+0x90>
1a000846:	2700      	movs	r7, #0
1a000848:	f001 fa22 	bl	1a001c90 <vPortEnterCritical>
1a00084c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00084e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000850:	429a      	cmp	r2, r3
1a000852:	d301      	bcc.n	1a000858 <xQueueGenericSend+0xa4>
1a000854:	2d02      	cmp	r5, #2
1a000856:	d121      	bne.n	1a00089c <xQueueGenericSend+0xe8>
1a000858:	4620      	mov	r0, r4
1a00085a:	4631      	mov	r1, r6
1a00085c:	462a      	mov	r2, r5
1a00085e:	f7ff fe7d 	bl	1a00055c <prvCopyDataToQueue>
1a000862:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000864:	b16b      	cbz	r3, 1a000882 <xQueueGenericSend+0xce>
1a000866:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00086a:	f000 fe4f 	bl	1a00150c <xTaskRemoveFromEventList>
1a00086e:	b188      	cbz	r0, 1a000894 <xQueueGenericSend+0xe0>
1a000870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000874:	4b32      	ldr	r3, [pc, #200]	; (1a000940 <xQueueGenericSend+0x18c>)
1a000876:	601a      	str	r2, [r3, #0]
1a000878:	f3bf 8f4f 	dsb	sy
1a00087c:	f3bf 8f6f 	isb	sy
1a000880:	e008      	b.n	1a000894 <xQueueGenericSend+0xe0>
1a000882:	b138      	cbz	r0, 1a000894 <xQueueGenericSend+0xe0>
1a000884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000888:	4b2d      	ldr	r3, [pc, #180]	; (1a000940 <xQueueGenericSend+0x18c>)
1a00088a:	601a      	str	r2, [r3, #0]
1a00088c:	f3bf 8f4f 	dsb	sy
1a000890:	f3bf 8f6f 	isb	sy
1a000894:	f001 fa1e 	bl	1a001cd4 <vPortExitCritical>
1a000898:	2001      	movs	r0, #1
1a00089a:	e04e      	b.n	1a00093a <xQueueGenericSend+0x186>
1a00089c:	9b01      	ldr	r3, [sp, #4]
1a00089e:	b91b      	cbnz	r3, 1a0008a8 <xQueueGenericSend+0xf4>
1a0008a0:	f001 fa18 	bl	1a001cd4 <vPortExitCritical>
1a0008a4:	2000      	movs	r0, #0
1a0008a6:	e048      	b.n	1a00093a <xQueueGenericSend+0x186>
1a0008a8:	b91f      	cbnz	r7, 1a0008b2 <xQueueGenericSend+0xfe>
1a0008aa:	a802      	add	r0, sp, #8
1a0008ac:	f000 fe74 	bl	1a001598 <vTaskInternalSetTimeOutState>
1a0008b0:	2701      	movs	r7, #1
1a0008b2:	f001 fa0f 	bl	1a001cd4 <vPortExitCritical>
1a0008b6:	f000 fc4f 	bl	1a001158 <vTaskSuspendAll>
1a0008ba:	f001 f9e9 	bl	1a001c90 <vPortEnterCritical>
1a0008be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0008c2:	b25b      	sxtb	r3, r3
1a0008c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0008c8:	d102      	bne.n	1a0008d0 <xQueueGenericSend+0x11c>
1a0008ca:	2300      	movs	r3, #0
1a0008cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0008d0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0008d4:	b25b      	sxtb	r3, r3
1a0008d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0008da:	d102      	bne.n	1a0008e2 <xQueueGenericSend+0x12e>
1a0008dc:	2300      	movs	r3, #0
1a0008de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0008e2:	f001 f9f7 	bl	1a001cd4 <vPortExitCritical>
1a0008e6:	a802      	add	r0, sp, #8
1a0008e8:	a901      	add	r1, sp, #4
1a0008ea:	f000 fe61 	bl	1a0015b0 <xTaskCheckForTimeOut>
1a0008ee:	b9f0      	cbnz	r0, 1a00092e <xQueueGenericSend+0x17a>
1a0008f0:	4620      	mov	r0, r4
1a0008f2:	f7ff fe15 	bl	1a000520 <prvIsQueueFull>
1a0008f6:	b1a0      	cbz	r0, 1a000922 <xQueueGenericSend+0x16e>
1a0008f8:	f104 0010 	add.w	r0, r4, #16
1a0008fc:	9901      	ldr	r1, [sp, #4]
1a0008fe:	f000 fdd1 	bl	1a0014a4 <vTaskPlaceOnEventList>
1a000902:	4620      	mov	r0, r4
1a000904:	f7ff fe78 	bl	1a0005f8 <prvUnlockQueue>
1a000908:	f000 fcc6 	bl	1a001298 <xTaskResumeAll>
1a00090c:	2800      	cmp	r0, #0
1a00090e:	d19b      	bne.n	1a000848 <xQueueGenericSend+0x94>
1a000910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000914:	4b0a      	ldr	r3, [pc, #40]	; (1a000940 <xQueueGenericSend+0x18c>)
1a000916:	601a      	str	r2, [r3, #0]
1a000918:	f3bf 8f4f 	dsb	sy
1a00091c:	f3bf 8f6f 	isb	sy
1a000920:	e792      	b.n	1a000848 <xQueueGenericSend+0x94>
1a000922:	4620      	mov	r0, r4
1a000924:	f7ff fe68 	bl	1a0005f8 <prvUnlockQueue>
1a000928:	f000 fcb6 	bl	1a001298 <xTaskResumeAll>
1a00092c:	e78c      	b.n	1a000848 <xQueueGenericSend+0x94>
1a00092e:	4620      	mov	r0, r4
1a000930:	f7ff fe62 	bl	1a0005f8 <prvUnlockQueue>
1a000934:	f000 fcb0 	bl	1a001298 <xTaskResumeAll>
1a000938:	2000      	movs	r0, #0
1a00093a:	b005      	add	sp, #20
1a00093c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00093e:	bf00      	nop
1a000940:	e000ed04 	.word	0xe000ed04

1a000944 <xQueueGenericSendFromISR>:
1a000944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000948:	b940      	cbnz	r0, 1a00095c <xQueueGenericSendFromISR+0x18>
1a00094a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00094e:	f383 8811 	msr	BASEPRI, r3
1a000952:	f3bf 8f6f 	isb	sy
1a000956:	f3bf 8f4f 	dsb	sy
1a00095a:	e7fe      	b.n	1a00095a <xQueueGenericSendFromISR+0x16>
1a00095c:	4604      	mov	r4, r0
1a00095e:	b919      	cbnz	r1, 1a000968 <xQueueGenericSendFromISR+0x24>
1a000960:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000962:	b918      	cbnz	r0, 1a00096c <xQueueGenericSendFromISR+0x28>
1a000964:	2001      	movs	r0, #1
1a000966:	e002      	b.n	1a00096e <xQueueGenericSendFromISR+0x2a>
1a000968:	2001      	movs	r0, #1
1a00096a:	e000      	b.n	1a00096e <xQueueGenericSendFromISR+0x2a>
1a00096c:	2000      	movs	r0, #0
1a00096e:	b940      	cbnz	r0, 1a000982 <xQueueGenericSendFromISR+0x3e>
1a000970:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000974:	f383 8811 	msr	BASEPRI, r3
1a000978:	f3bf 8f6f 	isb	sy
1a00097c:	f3bf 8f4f 	dsb	sy
1a000980:	e7fe      	b.n	1a000980 <xQueueGenericSendFromISR+0x3c>
1a000982:	2b02      	cmp	r3, #2
1a000984:	d103      	bne.n	1a00098e <xQueueGenericSendFromISR+0x4a>
1a000986:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000988:	2801      	cmp	r0, #1
1a00098a:	d102      	bne.n	1a000992 <xQueueGenericSendFromISR+0x4e>
1a00098c:	e002      	b.n	1a000994 <xQueueGenericSendFromISR+0x50>
1a00098e:	2001      	movs	r0, #1
1a000990:	e000      	b.n	1a000994 <xQueueGenericSendFromISR+0x50>
1a000992:	2000      	movs	r0, #0
1a000994:	b940      	cbnz	r0, 1a0009a8 <xQueueGenericSendFromISR+0x64>
1a000996:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00099a:	f383 8811 	msr	BASEPRI, r3
1a00099e:	f3bf 8f6f 	isb	sy
1a0009a2:	f3bf 8f4f 	dsb	sy
1a0009a6:	e7fe      	b.n	1a0009a6 <xQueueGenericSendFromISR+0x62>
1a0009a8:	461f      	mov	r7, r3
1a0009aa:	4690      	mov	r8, r2
1a0009ac:	4689      	mov	r9, r1
1a0009ae:	f001 faa5 	bl	1a001efc <vPortValidateInterruptPriority>
1a0009b2:	f3ef 8611 	mrs	r6, BASEPRI
1a0009b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009ba:	f383 8811 	msr	BASEPRI, r3
1a0009be:	f3bf 8f6f 	isb	sy
1a0009c2:	f3bf 8f4f 	dsb	sy
1a0009c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0009c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0009ca:	429a      	cmp	r2, r3
1a0009cc:	d301      	bcc.n	1a0009d2 <xQueueGenericSendFromISR+0x8e>
1a0009ce:	2f02      	cmp	r7, #2
1a0009d0:	d11f      	bne.n	1a000a12 <xQueueGenericSendFromISR+0xce>
1a0009d2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a0009d6:	b2ed      	uxtb	r5, r5
1a0009d8:	4620      	mov	r0, r4
1a0009da:	4649      	mov	r1, r9
1a0009dc:	463a      	mov	r2, r7
1a0009de:	f7ff fdbd 	bl	1a00055c <prvCopyDataToQueue>
1a0009e2:	b26b      	sxtb	r3, r5
1a0009e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0009e8:	d10d      	bne.n	1a000a06 <xQueueGenericSendFromISR+0xc2>
1a0009ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0009ec:	b19b      	cbz	r3, 1a000a16 <xQueueGenericSendFromISR+0xd2>
1a0009ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0009f2:	f000 fd8b 	bl	1a00150c <xTaskRemoveFromEventList>
1a0009f6:	b180      	cbz	r0, 1a000a1a <xQueueGenericSendFromISR+0xd6>
1a0009f8:	f1b8 0f00 	cmp.w	r8, #0
1a0009fc:	d00f      	beq.n	1a000a1e <xQueueGenericSendFromISR+0xda>
1a0009fe:	2001      	movs	r0, #1
1a000a00:	f8c8 0000 	str.w	r0, [r8]
1a000a04:	e00c      	b.n	1a000a20 <xQueueGenericSendFromISR+0xdc>
1a000a06:	1c6b      	adds	r3, r5, #1
1a000a08:	b2db      	uxtb	r3, r3
1a000a0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000a0e:	2001      	movs	r0, #1
1a000a10:	e006      	b.n	1a000a20 <xQueueGenericSendFromISR+0xdc>
1a000a12:	2000      	movs	r0, #0
1a000a14:	e004      	b.n	1a000a20 <xQueueGenericSendFromISR+0xdc>
1a000a16:	2001      	movs	r0, #1
1a000a18:	e002      	b.n	1a000a20 <xQueueGenericSendFromISR+0xdc>
1a000a1a:	2001      	movs	r0, #1
1a000a1c:	e000      	b.n	1a000a20 <xQueueGenericSendFromISR+0xdc>
1a000a1e:	2001      	movs	r0, #1
1a000a20:	f386 8811 	msr	BASEPRI, r6
1a000a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a000a28 <xQueueReceive>:
1a000a28:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000a2a:	b085      	sub	sp, #20
1a000a2c:	9201      	str	r2, [sp, #4]
1a000a2e:	b940      	cbnz	r0, 1a000a42 <xQueueReceive+0x1a>
1a000a30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a34:	f383 8811 	msr	BASEPRI, r3
1a000a38:	f3bf 8f6f 	isb	sy
1a000a3c:	f3bf 8f4f 	dsb	sy
1a000a40:	e7fe      	b.n	1a000a40 <xQueueReceive+0x18>
1a000a42:	4604      	mov	r4, r0
1a000a44:	b919      	cbnz	r1, 1a000a4e <xQueueReceive+0x26>
1a000a46:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000a48:	b91b      	cbnz	r3, 1a000a52 <xQueueReceive+0x2a>
1a000a4a:	2301      	movs	r3, #1
1a000a4c:	e002      	b.n	1a000a54 <xQueueReceive+0x2c>
1a000a4e:	2301      	movs	r3, #1
1a000a50:	e000      	b.n	1a000a54 <xQueueReceive+0x2c>
1a000a52:	2300      	movs	r3, #0
1a000a54:	b943      	cbnz	r3, 1a000a68 <xQueueReceive+0x40>
1a000a56:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a5a:	f383 8811 	msr	BASEPRI, r3
1a000a5e:	f3bf 8f6f 	isb	sy
1a000a62:	f3bf 8f4f 	dsb	sy
1a000a66:	e7fe      	b.n	1a000a66 <xQueueReceive+0x3e>
1a000a68:	460e      	mov	r6, r1
1a000a6a:	f000 fde7 	bl	1a00163c <xTaskGetSchedulerState>
1a000a6e:	b918      	cbnz	r0, 1a000a78 <xQueueReceive+0x50>
1a000a70:	9b01      	ldr	r3, [sp, #4]
1a000a72:	b91b      	cbnz	r3, 1a000a7c <xQueueReceive+0x54>
1a000a74:	2301      	movs	r3, #1
1a000a76:	e002      	b.n	1a000a7e <xQueueReceive+0x56>
1a000a78:	2301      	movs	r3, #1
1a000a7a:	e000      	b.n	1a000a7e <xQueueReceive+0x56>
1a000a7c:	2300      	movs	r3, #0
1a000a7e:	b943      	cbnz	r3, 1a000a92 <xQueueReceive+0x6a>
1a000a80:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a84:	f383 8811 	msr	BASEPRI, r3
1a000a88:	f3bf 8f6f 	isb	sy
1a000a8c:	f3bf 8f4f 	dsb	sy
1a000a90:	e7fe      	b.n	1a000a90 <xQueueReceive+0x68>
1a000a92:	2700      	movs	r7, #0
1a000a94:	f001 f8fc 	bl	1a001c90 <vPortEnterCritical>
1a000a98:	6ba5      	ldr	r5, [r4, #56]	; 0x38
1a000a9a:	b1c5      	cbz	r5, 1a000ace <xQueueReceive+0xa6>
1a000a9c:	4620      	mov	r0, r4
1a000a9e:	4631      	mov	r1, r6
1a000aa0:	f7ff fd98 	bl	1a0005d4 <prvCopyDataFromQueue>
1a000aa4:	3d01      	subs	r5, #1
1a000aa6:	63a5      	str	r5, [r4, #56]	; 0x38
1a000aa8:	6923      	ldr	r3, [r4, #16]
1a000aaa:	b163      	cbz	r3, 1a000ac6 <xQueueReceive+0x9e>
1a000aac:	f104 0010 	add.w	r0, r4, #16
1a000ab0:	f000 fd2c 	bl	1a00150c <xTaskRemoveFromEventList>
1a000ab4:	b138      	cbz	r0, 1a000ac6 <xQueueReceive+0x9e>
1a000ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000aba:	4b30      	ldr	r3, [pc, #192]	; (1a000b7c <xQueueReceive+0x154>)
1a000abc:	601a      	str	r2, [r3, #0]
1a000abe:	f3bf 8f4f 	dsb	sy
1a000ac2:	f3bf 8f6f 	isb	sy
1a000ac6:	f001 f905 	bl	1a001cd4 <vPortExitCritical>
1a000aca:	2001      	movs	r0, #1
1a000acc:	e053      	b.n	1a000b76 <xQueueReceive+0x14e>
1a000ace:	9b01      	ldr	r3, [sp, #4]
1a000ad0:	b91b      	cbnz	r3, 1a000ada <xQueueReceive+0xb2>
1a000ad2:	f001 f8ff 	bl	1a001cd4 <vPortExitCritical>
1a000ad6:	2000      	movs	r0, #0
1a000ad8:	e04d      	b.n	1a000b76 <xQueueReceive+0x14e>
1a000ada:	b91f      	cbnz	r7, 1a000ae4 <xQueueReceive+0xbc>
1a000adc:	a802      	add	r0, sp, #8
1a000ade:	f000 fd5b 	bl	1a001598 <vTaskInternalSetTimeOutState>
1a000ae2:	2701      	movs	r7, #1
1a000ae4:	f001 f8f6 	bl	1a001cd4 <vPortExitCritical>
1a000ae8:	f000 fb36 	bl	1a001158 <vTaskSuspendAll>
1a000aec:	f001 f8d0 	bl	1a001c90 <vPortEnterCritical>
1a000af0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000af4:	b25b      	sxtb	r3, r3
1a000af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000afa:	d102      	bne.n	1a000b02 <xQueueReceive+0xda>
1a000afc:	2300      	movs	r3, #0
1a000afe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000b02:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000b06:	b25b      	sxtb	r3, r3
1a000b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000b0c:	d102      	bne.n	1a000b14 <xQueueReceive+0xec>
1a000b0e:	2300      	movs	r3, #0
1a000b10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000b14:	f001 f8de 	bl	1a001cd4 <vPortExitCritical>
1a000b18:	a802      	add	r0, sp, #8
1a000b1a:	a901      	add	r1, sp, #4
1a000b1c:	f000 fd48 	bl	1a0015b0 <xTaskCheckForTimeOut>
1a000b20:	b9f0      	cbnz	r0, 1a000b60 <xQueueReceive+0x138>
1a000b22:	4620      	mov	r0, r4
1a000b24:	f7ff fd0c 	bl	1a000540 <prvIsQueueEmpty>
1a000b28:	b1a0      	cbz	r0, 1a000b54 <xQueueReceive+0x12c>
1a000b2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000b2e:	9901      	ldr	r1, [sp, #4]
1a000b30:	f000 fcb8 	bl	1a0014a4 <vTaskPlaceOnEventList>
1a000b34:	4620      	mov	r0, r4
1a000b36:	f7ff fd5f 	bl	1a0005f8 <prvUnlockQueue>
1a000b3a:	f000 fbad 	bl	1a001298 <xTaskResumeAll>
1a000b3e:	2800      	cmp	r0, #0
1a000b40:	d1a8      	bne.n	1a000a94 <xQueueReceive+0x6c>
1a000b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b46:	4b0d      	ldr	r3, [pc, #52]	; (1a000b7c <xQueueReceive+0x154>)
1a000b48:	601a      	str	r2, [r3, #0]
1a000b4a:	f3bf 8f4f 	dsb	sy
1a000b4e:	f3bf 8f6f 	isb	sy
1a000b52:	e79f      	b.n	1a000a94 <xQueueReceive+0x6c>
1a000b54:	4620      	mov	r0, r4
1a000b56:	f7ff fd4f 	bl	1a0005f8 <prvUnlockQueue>
1a000b5a:	f000 fb9d 	bl	1a001298 <xTaskResumeAll>
1a000b5e:	e799      	b.n	1a000a94 <xQueueReceive+0x6c>
1a000b60:	4620      	mov	r0, r4
1a000b62:	f7ff fd49 	bl	1a0005f8 <prvUnlockQueue>
1a000b66:	f000 fb97 	bl	1a001298 <xTaskResumeAll>
1a000b6a:	4620      	mov	r0, r4
1a000b6c:	f7ff fce8 	bl	1a000540 <prvIsQueueEmpty>
1a000b70:	2800      	cmp	r0, #0
1a000b72:	d08f      	beq.n	1a000a94 <xQueueReceive+0x6c>
1a000b74:	2000      	movs	r0, #0
1a000b76:	b005      	add	sp, #20
1a000b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000b7a:	bf00      	nop
1a000b7c:	e000ed04 	.word	0xe000ed04

1a000b80 <vQueueAddToRegistry>:
1a000b80:	2300      	movs	r3, #0
1a000b82:	e00b      	b.n	1a000b9c <vQueueAddToRegistry+0x1c>
1a000b84:	4a07      	ldr	r2, [pc, #28]	; (1a000ba4 <vQueueAddToRegistry+0x24>)
1a000b86:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a000b8a:	b932      	cbnz	r2, 1a000b9a <vQueueAddToRegistry+0x1a>
1a000b8c:	4a05      	ldr	r2, [pc, #20]	; (1a000ba4 <vQueueAddToRegistry+0x24>)
1a000b8e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
1a000b92:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a000b96:	6058      	str	r0, [r3, #4]
1a000b98:	4770      	bx	lr
1a000b9a:	3301      	adds	r3, #1
1a000b9c:	2b07      	cmp	r3, #7
1a000b9e:	d9f1      	bls.n	1a000b84 <vQueueAddToRegistry+0x4>
1a000ba0:	4770      	bx	lr
1a000ba2:	bf00      	nop
1a000ba4:	10002ddc 	.word	0x10002ddc

1a000ba8 <vQueueWaitForMessageRestricted>:
1a000ba8:	b570      	push	{r4, r5, r6, lr}
1a000baa:	4604      	mov	r4, r0
1a000bac:	460e      	mov	r6, r1
1a000bae:	4615      	mov	r5, r2
1a000bb0:	f001 f86e 	bl	1a001c90 <vPortEnterCritical>
1a000bb4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000bb8:	b25b      	sxtb	r3, r3
1a000bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000bbe:	d102      	bne.n	1a000bc6 <vQueueWaitForMessageRestricted+0x1e>
1a000bc0:	2300      	movs	r3, #0
1a000bc2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000bc6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000bca:	b25b      	sxtb	r3, r3
1a000bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000bd0:	d102      	bne.n	1a000bd8 <vQueueWaitForMessageRestricted+0x30>
1a000bd2:	2300      	movs	r3, #0
1a000bd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000bd8:	f001 f87c 	bl	1a001cd4 <vPortExitCritical>
1a000bdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000bde:	b92b      	cbnz	r3, 1a000bec <vQueueWaitForMessageRestricted+0x44>
1a000be0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000be4:	4631      	mov	r1, r6
1a000be6:	462a      	mov	r2, r5
1a000be8:	f000 fc74 	bl	1a0014d4 <vTaskPlaceOnEventListRestricted>
1a000bec:	4620      	mov	r0, r4
1a000bee:	f7ff fd03 	bl	1a0005f8 <prvUnlockQueue>
1a000bf2:	bd70      	pop	{r4, r5, r6, pc}

1a000bf4 <vListInitialise>:
1a000bf4:	f100 0308 	add.w	r3, r0, #8
1a000bf8:	6043      	str	r3, [r0, #4]
1a000bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000bfe:	6082      	str	r2, [r0, #8]
1a000c00:	60c3      	str	r3, [r0, #12]
1a000c02:	6103      	str	r3, [r0, #16]
1a000c04:	2300      	movs	r3, #0
1a000c06:	6003      	str	r3, [r0, #0]
1a000c08:	4770      	bx	lr
1a000c0a:	bf00      	nop

1a000c0c <vListInitialiseItem>:
1a000c0c:	2300      	movs	r3, #0
1a000c0e:	6103      	str	r3, [r0, #16]
1a000c10:	4770      	bx	lr
1a000c12:	bf00      	nop

1a000c14 <vListInsertEnd>:
1a000c14:	6843      	ldr	r3, [r0, #4]
1a000c16:	604b      	str	r3, [r1, #4]
1a000c18:	689a      	ldr	r2, [r3, #8]
1a000c1a:	608a      	str	r2, [r1, #8]
1a000c1c:	689a      	ldr	r2, [r3, #8]
1a000c1e:	6051      	str	r1, [r2, #4]
1a000c20:	6099      	str	r1, [r3, #8]
1a000c22:	6108      	str	r0, [r1, #16]
1a000c24:	6803      	ldr	r3, [r0, #0]
1a000c26:	3301      	adds	r3, #1
1a000c28:	6003      	str	r3, [r0, #0]
1a000c2a:	4770      	bx	lr

1a000c2c <vListInsert>:
1a000c2c:	b430      	push	{r4, r5}
1a000c2e:	680d      	ldr	r5, [r1, #0]
1a000c30:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000c34:	d101      	bne.n	1a000c3a <vListInsert+0xe>
1a000c36:	6902      	ldr	r2, [r0, #16]
1a000c38:	e007      	b.n	1a000c4a <vListInsert+0x1e>
1a000c3a:	f100 0208 	add.w	r2, r0, #8
1a000c3e:	e000      	b.n	1a000c42 <vListInsert+0x16>
1a000c40:	461a      	mov	r2, r3
1a000c42:	6853      	ldr	r3, [r2, #4]
1a000c44:	681c      	ldr	r4, [r3, #0]
1a000c46:	42ac      	cmp	r4, r5
1a000c48:	d9fa      	bls.n	1a000c40 <vListInsert+0x14>
1a000c4a:	6853      	ldr	r3, [r2, #4]
1a000c4c:	604b      	str	r3, [r1, #4]
1a000c4e:	6099      	str	r1, [r3, #8]
1a000c50:	608a      	str	r2, [r1, #8]
1a000c52:	6051      	str	r1, [r2, #4]
1a000c54:	6108      	str	r0, [r1, #16]
1a000c56:	6803      	ldr	r3, [r0, #0]
1a000c58:	3301      	adds	r3, #1
1a000c5a:	6003      	str	r3, [r0, #0]
1a000c5c:	bc30      	pop	{r4, r5}
1a000c5e:	4770      	bx	lr

1a000c60 <uxListRemove>:
1a000c60:	6903      	ldr	r3, [r0, #16]
1a000c62:	6842      	ldr	r2, [r0, #4]
1a000c64:	6881      	ldr	r1, [r0, #8]
1a000c66:	6091      	str	r1, [r2, #8]
1a000c68:	6882      	ldr	r2, [r0, #8]
1a000c6a:	6841      	ldr	r1, [r0, #4]
1a000c6c:	6051      	str	r1, [r2, #4]
1a000c6e:	685a      	ldr	r2, [r3, #4]
1a000c70:	4282      	cmp	r2, r0
1a000c72:	d101      	bne.n	1a000c78 <uxListRemove+0x18>
1a000c74:	6882      	ldr	r2, [r0, #8]
1a000c76:	605a      	str	r2, [r3, #4]
1a000c78:	2200      	movs	r2, #0
1a000c7a:	6102      	str	r2, [r0, #16]
1a000c7c:	681a      	ldr	r2, [r3, #0]
1a000c7e:	3a01      	subs	r2, #1
1a000c80:	601a      	str	r2, [r3, #0]
1a000c82:	6818      	ldr	r0, [r3, #0]
1a000c84:	4770      	bx	lr
1a000c86:	bf00      	nop

1a000c88 <vApplicationGetIdleTaskMemory>:
1a000c88:	4b03      	ldr	r3, [pc, #12]	; (1a000c98 <vApplicationGetIdleTaskMemory+0x10>)
1a000c8a:	6003      	str	r3, [r0, #0]
1a000c8c:	4b03      	ldr	r3, [pc, #12]	; (1a000c9c <vApplicationGetIdleTaskMemory+0x14>)
1a000c8e:	600b      	str	r3, [r1, #0]
1a000c90:	235a      	movs	r3, #90	; 0x5a
1a000c92:	6013      	str	r3, [r2, #0]
1a000c94:	4770      	bx	lr
1a000c96:	bf00      	nop
1a000c98:	100024a4 	.word	0x100024a4
1a000c9c:	1000233c 	.word	0x1000233c

1a000ca0 <vApplicationGetTimerTaskMemory>:
1a000ca0:	4b03      	ldr	r3, [pc, #12]	; (1a000cb0 <vApplicationGetTimerTaskMemory+0x10>)
1a000ca2:	6003      	str	r3, [r0, #0]
1a000ca4:	4b03      	ldr	r3, [pc, #12]	; (1a000cb4 <vApplicationGetTimerTaskMemory+0x14>)
1a000ca6:	600b      	str	r3, [r1, #0]
1a000ca8:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a000cac:	6013      	str	r3, [r2, #0]
1a000cae:	4770      	bx	lr
1a000cb0:	10002504 	.word	0x10002504
1a000cb4:	10002564 	.word	0x10002564

1a000cb8 <vApplicationStackOverflowHook>:
1a000cb8:	e7fe      	b.n	1a000cb8 <vApplicationStackOverflowHook>
1a000cba:	bf00      	nop

1a000cbc <vApplicationMallocFailedHook>:
1a000cbc:	e7fe      	b.n	1a000cbc <vApplicationMallocFailedHook>
1a000cbe:	bf00      	nop

1a000cc0 <prvResetNextTaskUnblockTime>:
1a000cc0:	4b0a      	ldr	r3, [pc, #40]	; (1a000cec <prvResetNextTaskUnblockTime+0x2c>)
1a000cc2:	681b      	ldr	r3, [r3, #0]
1a000cc4:	681b      	ldr	r3, [r3, #0]
1a000cc6:	b90b      	cbnz	r3, 1a000ccc <prvResetNextTaskUnblockTime+0xc>
1a000cc8:	2301      	movs	r3, #1
1a000cca:	e000      	b.n	1a000cce <prvResetNextTaskUnblockTime+0xe>
1a000ccc:	2300      	movs	r3, #0
1a000cce:	b123      	cbz	r3, 1a000cda <prvResetNextTaskUnblockTime+0x1a>
1a000cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000cd4:	4b06      	ldr	r3, [pc, #24]	; (1a000cf0 <prvResetNextTaskUnblockTime+0x30>)
1a000cd6:	601a      	str	r2, [r3, #0]
1a000cd8:	4770      	bx	lr
1a000cda:	4b04      	ldr	r3, [pc, #16]	; (1a000cec <prvResetNextTaskUnblockTime+0x2c>)
1a000cdc:	681b      	ldr	r3, [r3, #0]
1a000cde:	68db      	ldr	r3, [r3, #12]
1a000ce0:	68db      	ldr	r3, [r3, #12]
1a000ce2:	685a      	ldr	r2, [r3, #4]
1a000ce4:	4b02      	ldr	r3, [pc, #8]	; (1a000cf0 <prvResetNextTaskUnblockTime+0x30>)
1a000ce6:	601a      	str	r2, [r3, #0]
1a000ce8:	4770      	bx	lr
1a000cea:	bf00      	nop
1a000cec:	10002b08 	.word	0x10002b08
1a000cf0:	10002be4 	.word	0x10002be4

1a000cf4 <prvInitialiseNewTask>:
1a000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000cf8:	4682      	mov	sl, r0
1a000cfa:	460d      	mov	r5, r1
1a000cfc:	4617      	mov	r7, r2
1a000cfe:	4699      	mov	r9, r3
1a000d00:	9e08      	ldr	r6, [sp, #32]
1a000d02:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a000d06:	9c0a      	ldr	r4, [sp, #40]	; 0x28
1a000d08:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a000d0a:	21a5      	movs	r1, #165	; 0xa5
1a000d0c:	0092      	lsls	r2, r2, #2
1a000d0e:	f002 fd8c 	bl	1a00382a <memset>
1a000d12:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a000d14:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a000d18:	3a01      	subs	r2, #1
1a000d1a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
1a000d1e:	f027 0707 	bic.w	r7, r7, #7
1a000d22:	6467      	str	r7, [r4, #68]	; 0x44
1a000d24:	2300      	movs	r3, #0
1a000d26:	e006      	b.n	1a000d36 <prvInitialiseNewTask+0x42>
1a000d28:	5ce9      	ldrb	r1, [r5, r3]
1a000d2a:	18e2      	adds	r2, r4, r3
1a000d2c:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
1a000d30:	5cea      	ldrb	r2, [r5, r3]
1a000d32:	b112      	cbz	r2, 1a000d3a <prvInitialiseNewTask+0x46>
1a000d34:	3301      	adds	r3, #1
1a000d36:	2b0f      	cmp	r3, #15
1a000d38:	d9f6      	bls.n	1a000d28 <prvInitialiseNewTask+0x34>
1a000d3a:	2300      	movs	r3, #0
1a000d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a000d40:	2e06      	cmp	r6, #6
1a000d42:	d900      	bls.n	1a000d46 <prvInitialiseNewTask+0x52>
1a000d44:	2606      	movs	r6, #6
1a000d46:	62e6      	str	r6, [r4, #44]	; 0x2c
1a000d48:	6526      	str	r6, [r4, #80]	; 0x50
1a000d4a:	2500      	movs	r5, #0
1a000d4c:	6565      	str	r5, [r4, #84]	; 0x54
1a000d4e:	1d20      	adds	r0, r4, #4
1a000d50:	f7ff ff5c 	bl	1a000c0c <vListInitialiseItem>
1a000d54:	f104 0018 	add.w	r0, r4, #24
1a000d58:	f7ff ff58 	bl	1a000c0c <vListInitialiseItem>
1a000d5c:	6124      	str	r4, [r4, #16]
1a000d5e:	f1c6 0607 	rsb	r6, r6, #7
1a000d62:	61a6      	str	r6, [r4, #24]
1a000d64:	6264      	str	r4, [r4, #36]	; 0x24
1a000d66:	65a5      	str	r5, [r4, #88]	; 0x58
1a000d68:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
1a000d6c:	4638      	mov	r0, r7
1a000d6e:	4651      	mov	r1, sl
1a000d70:	464a      	mov	r2, r9
1a000d72:	f000 ff5b 	bl	1a001c2c <pxPortInitialiseStack>
1a000d76:	6020      	str	r0, [r4, #0]
1a000d78:	f1b8 0f00 	cmp.w	r8, #0
1a000d7c:	d001      	beq.n	1a000d82 <prvInitialiseNewTask+0x8e>
1a000d7e:	f8c8 4000 	str.w	r4, [r8]
1a000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000d86:	bf00      	nop

1a000d88 <prvInitialiseTaskLists>:
1a000d88:	b538      	push	{r3, r4, r5, lr}
1a000d8a:	2400      	movs	r4, #0
1a000d8c:	e007      	b.n	1a000d9e <prvInitialiseTaskLists+0x16>
1a000d8e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000d92:	009b      	lsls	r3, r3, #2
1a000d94:	480e      	ldr	r0, [pc, #56]	; (1a000dd0 <prvInitialiseTaskLists+0x48>)
1a000d96:	4418      	add	r0, r3
1a000d98:	f7ff ff2c 	bl	1a000bf4 <vListInitialise>
1a000d9c:	3401      	adds	r4, #1
1a000d9e:	2c06      	cmp	r4, #6
1a000da0:	d9f5      	bls.n	1a000d8e <prvInitialiseTaskLists+0x6>
1a000da2:	4d0c      	ldr	r5, [pc, #48]	; (1a000dd4 <prvInitialiseTaskLists+0x4c>)
1a000da4:	4628      	mov	r0, r5
1a000da6:	f7ff ff25 	bl	1a000bf4 <vListInitialise>
1a000daa:	4c0b      	ldr	r4, [pc, #44]	; (1a000dd8 <prvInitialiseTaskLists+0x50>)
1a000dac:	4620      	mov	r0, r4
1a000dae:	f7ff ff21 	bl	1a000bf4 <vListInitialise>
1a000db2:	480a      	ldr	r0, [pc, #40]	; (1a000ddc <prvInitialiseTaskLists+0x54>)
1a000db4:	f7ff ff1e 	bl	1a000bf4 <vListInitialise>
1a000db8:	4809      	ldr	r0, [pc, #36]	; (1a000de0 <prvInitialiseTaskLists+0x58>)
1a000dba:	f7ff ff1b 	bl	1a000bf4 <vListInitialise>
1a000dbe:	4809      	ldr	r0, [pc, #36]	; (1a000de4 <prvInitialiseTaskLists+0x5c>)
1a000dc0:	f7ff ff18 	bl	1a000bf4 <vListInitialise>
1a000dc4:	4b08      	ldr	r3, [pc, #32]	; (1a000de8 <prvInitialiseTaskLists+0x60>)
1a000dc6:	601d      	str	r5, [r3, #0]
1a000dc8:	4b08      	ldr	r3, [pc, #32]	; (1a000dec <prvInitialiseTaskLists+0x64>)
1a000dca:	601c      	str	r4, [r3, #0]
1a000dcc:	bd38      	pop	{r3, r4, r5, pc}
1a000dce:	bf00      	nop
1a000dd0:	10002b2c 	.word	0x10002b2c
1a000dd4:	10002bec 	.word	0x10002bec
1a000dd8:	10002c00 	.word	0x10002c00
1a000ddc:	10002bc8 	.word	0x10002bc8
1a000de0:	10002b10 	.word	0x10002b10
1a000de4:	10002c14 	.word	0x10002c14
1a000de8:	10002b08 	.word	0x10002b08
1a000dec:	10002b24 	.word	0x10002b24

1a000df0 <prvAddNewTaskToReadyList>:
1a000df0:	b510      	push	{r4, lr}
1a000df2:	4604      	mov	r4, r0
1a000df4:	f000 ff4c 	bl	1a001c90 <vPortEnterCritical>
1a000df8:	4a20      	ldr	r2, [pc, #128]	; (1a000e7c <prvAddNewTaskToReadyList+0x8c>)
1a000dfa:	6813      	ldr	r3, [r2, #0]
1a000dfc:	3301      	adds	r3, #1
1a000dfe:	6013      	str	r3, [r2, #0]
1a000e00:	4b1f      	ldr	r3, [pc, #124]	; (1a000e80 <prvAddNewTaskToReadyList+0x90>)
1a000e02:	681b      	ldr	r3, [r3, #0]
1a000e04:	b93b      	cbnz	r3, 1a000e16 <prvAddNewTaskToReadyList+0x26>
1a000e06:	4b1e      	ldr	r3, [pc, #120]	; (1a000e80 <prvAddNewTaskToReadyList+0x90>)
1a000e08:	601c      	str	r4, [r3, #0]
1a000e0a:	6813      	ldr	r3, [r2, #0]
1a000e0c:	2b01      	cmp	r3, #1
1a000e0e:	d10d      	bne.n	1a000e2c <prvAddNewTaskToReadyList+0x3c>
1a000e10:	f7ff ffba 	bl	1a000d88 <prvInitialiseTaskLists>
1a000e14:	e00a      	b.n	1a000e2c <prvAddNewTaskToReadyList+0x3c>
1a000e16:	4b1b      	ldr	r3, [pc, #108]	; (1a000e84 <prvAddNewTaskToReadyList+0x94>)
1a000e18:	681b      	ldr	r3, [r3, #0]
1a000e1a:	b93b      	cbnz	r3, 1a000e2c <prvAddNewTaskToReadyList+0x3c>
1a000e1c:	4b18      	ldr	r3, [pc, #96]	; (1a000e80 <prvAddNewTaskToReadyList+0x90>)
1a000e1e:	681b      	ldr	r3, [r3, #0]
1a000e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000e22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000e24:	429a      	cmp	r2, r3
1a000e26:	d801      	bhi.n	1a000e2c <prvAddNewTaskToReadyList+0x3c>
1a000e28:	4b15      	ldr	r3, [pc, #84]	; (1a000e80 <prvAddNewTaskToReadyList+0x90>)
1a000e2a:	601c      	str	r4, [r3, #0]
1a000e2c:	4a16      	ldr	r2, [pc, #88]	; (1a000e88 <prvAddNewTaskToReadyList+0x98>)
1a000e2e:	6813      	ldr	r3, [r2, #0]
1a000e30:	3301      	adds	r3, #1
1a000e32:	6013      	str	r3, [r2, #0]
1a000e34:	64a3      	str	r3, [r4, #72]	; 0x48
1a000e36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a000e38:	2301      	movs	r3, #1
1a000e3a:	4083      	lsls	r3, r0
1a000e3c:	4913      	ldr	r1, [pc, #76]	; (1a000e8c <prvAddNewTaskToReadyList+0x9c>)
1a000e3e:	680a      	ldr	r2, [r1, #0]
1a000e40:	4313      	orrs	r3, r2
1a000e42:	600b      	str	r3, [r1, #0]
1a000e44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a000e48:	0080      	lsls	r0, r0, #2
1a000e4a:	4b11      	ldr	r3, [pc, #68]	; (1a000e90 <prvAddNewTaskToReadyList+0xa0>)
1a000e4c:	4418      	add	r0, r3
1a000e4e:	1d21      	adds	r1, r4, #4
1a000e50:	f7ff fee0 	bl	1a000c14 <vListInsertEnd>
1a000e54:	f000 ff3e 	bl	1a001cd4 <vPortExitCritical>
1a000e58:	4b0a      	ldr	r3, [pc, #40]	; (1a000e84 <prvAddNewTaskToReadyList+0x94>)
1a000e5a:	681b      	ldr	r3, [r3, #0]
1a000e5c:	b16b      	cbz	r3, 1a000e7a <prvAddNewTaskToReadyList+0x8a>
1a000e5e:	4b08      	ldr	r3, [pc, #32]	; (1a000e80 <prvAddNewTaskToReadyList+0x90>)
1a000e60:	681b      	ldr	r3, [r3, #0]
1a000e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000e64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000e66:	429a      	cmp	r2, r3
1a000e68:	d207      	bcs.n	1a000e7a <prvAddNewTaskToReadyList+0x8a>
1a000e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e6e:	4b09      	ldr	r3, [pc, #36]	; (1a000e94 <prvAddNewTaskToReadyList+0xa4>)
1a000e70:	601a      	str	r2, [r3, #0]
1a000e72:	f3bf 8f4f 	dsb	sy
1a000e76:	f3bf 8f6f 	isb	sy
1a000e7a:	bd10      	pop	{r4, pc}
1a000e7c:	10002bc0 	.word	0x10002bc0
1a000e80:	10002bc4 	.word	0x10002bc4
1a000e84:	10002b0c 	.word	0x10002b0c
1a000e88:	10002be8 	.word	0x10002be8
1a000e8c:	10002c28 	.word	0x10002c28
1a000e90:	10002b2c 	.word	0x10002b2c
1a000e94:	e000ed04 	.word	0xe000ed04

1a000e98 <prvDeleteTCB>:
1a000e98:	b510      	push	{r4, lr}
1a000e9a:	4604      	mov	r4, r0
1a000e9c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a000ea0:	b933      	cbnz	r3, 1a000eb0 <prvDeleteTCB+0x18>
1a000ea2:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a000ea4:	f7ff fb30 	bl	1a000508 <vPortFree>
1a000ea8:	4620      	mov	r0, r4
1a000eaa:	f7ff fb2d 	bl	1a000508 <vPortFree>
1a000eae:	bd10      	pop	{r4, pc}
1a000eb0:	2b01      	cmp	r3, #1
1a000eb2:	d102      	bne.n	1a000eba <prvDeleteTCB+0x22>
1a000eb4:	f7ff fb28 	bl	1a000508 <vPortFree>
1a000eb8:	bd10      	pop	{r4, pc}
1a000eba:	2b02      	cmp	r3, #2
1a000ebc:	d008      	beq.n	1a000ed0 <prvDeleteTCB+0x38>
1a000ebe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ec2:	f383 8811 	msr	BASEPRI, r3
1a000ec6:	f3bf 8f6f 	isb	sy
1a000eca:	f3bf 8f4f 	dsb	sy
1a000ece:	e7fe      	b.n	1a000ece <prvDeleteTCB+0x36>
1a000ed0:	bd10      	pop	{r4, pc}
1a000ed2:	bf00      	nop

1a000ed4 <prvCheckTasksWaitingTermination>:
1a000ed4:	b510      	push	{r4, lr}
1a000ed6:	e014      	b.n	1a000f02 <prvCheckTasksWaitingTermination+0x2e>
1a000ed8:	f000 feda 	bl	1a001c90 <vPortEnterCritical>
1a000edc:	4b0b      	ldr	r3, [pc, #44]	; (1a000f0c <prvCheckTasksWaitingTermination+0x38>)
1a000ede:	68db      	ldr	r3, [r3, #12]
1a000ee0:	68dc      	ldr	r4, [r3, #12]
1a000ee2:	1d20      	adds	r0, r4, #4
1a000ee4:	f7ff febc 	bl	1a000c60 <uxListRemove>
1a000ee8:	4a09      	ldr	r2, [pc, #36]	; (1a000f10 <prvCheckTasksWaitingTermination+0x3c>)
1a000eea:	6813      	ldr	r3, [r2, #0]
1a000eec:	3b01      	subs	r3, #1
1a000eee:	6013      	str	r3, [r2, #0]
1a000ef0:	4a08      	ldr	r2, [pc, #32]	; (1a000f14 <prvCheckTasksWaitingTermination+0x40>)
1a000ef2:	6813      	ldr	r3, [r2, #0]
1a000ef4:	3b01      	subs	r3, #1
1a000ef6:	6013      	str	r3, [r2, #0]
1a000ef8:	f000 feec 	bl	1a001cd4 <vPortExitCritical>
1a000efc:	4620      	mov	r0, r4
1a000efe:	f7ff ffcb 	bl	1a000e98 <prvDeleteTCB>
1a000f02:	4b04      	ldr	r3, [pc, #16]	; (1a000f14 <prvCheckTasksWaitingTermination+0x40>)
1a000f04:	681b      	ldr	r3, [r3, #0]
1a000f06:	2b00      	cmp	r3, #0
1a000f08:	d1e6      	bne.n	1a000ed8 <prvCheckTasksWaitingTermination+0x4>
1a000f0a:	bd10      	pop	{r4, pc}
1a000f0c:	10002b10 	.word	0x10002b10
1a000f10:	10002bc0 	.word	0x10002bc0
1a000f14:	10002bbc 	.word	0x10002bbc

1a000f18 <prvIdleTask>:
1a000f18:	b508      	push	{r3, lr}
1a000f1a:	f7ff ffdb 	bl	1a000ed4 <prvCheckTasksWaitingTermination>
1a000f1e:	4b06      	ldr	r3, [pc, #24]	; (1a000f38 <prvIdleTask+0x20>)
1a000f20:	681b      	ldr	r3, [r3, #0]
1a000f22:	2b01      	cmp	r3, #1
1a000f24:	d9f9      	bls.n	1a000f1a <prvIdleTask+0x2>
1a000f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f2a:	4b04      	ldr	r3, [pc, #16]	; (1a000f3c <prvIdleTask+0x24>)
1a000f2c:	601a      	str	r2, [r3, #0]
1a000f2e:	f3bf 8f4f 	dsb	sy
1a000f32:	f3bf 8f6f 	isb	sy
1a000f36:	e7f0      	b.n	1a000f1a <prvIdleTask+0x2>
1a000f38:	10002b2c 	.word	0x10002b2c
1a000f3c:	e000ed04 	.word	0xe000ed04

1a000f40 <prvAddCurrentTaskToDelayedList>:
1a000f40:	b570      	push	{r4, r5, r6, lr}
1a000f42:	4604      	mov	r4, r0
1a000f44:	460e      	mov	r6, r1
1a000f46:	4b1c      	ldr	r3, [pc, #112]	; (1a000fb8 <prvAddCurrentTaskToDelayedList+0x78>)
1a000f48:	681d      	ldr	r5, [r3, #0]
1a000f4a:	4b1c      	ldr	r3, [pc, #112]	; (1a000fbc <prvAddCurrentTaskToDelayedList+0x7c>)
1a000f4c:	6818      	ldr	r0, [r3, #0]
1a000f4e:	3004      	adds	r0, #4
1a000f50:	f7ff fe86 	bl	1a000c60 <uxListRemove>
1a000f54:	b948      	cbnz	r0, 1a000f6a <prvAddCurrentTaskToDelayedList+0x2a>
1a000f56:	4b19      	ldr	r3, [pc, #100]	; (1a000fbc <prvAddCurrentTaskToDelayedList+0x7c>)
1a000f58:	681b      	ldr	r3, [r3, #0]
1a000f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000f5c:	2301      	movs	r3, #1
1a000f5e:	4093      	lsls	r3, r2
1a000f60:	4917      	ldr	r1, [pc, #92]	; (1a000fc0 <prvAddCurrentTaskToDelayedList+0x80>)
1a000f62:	680a      	ldr	r2, [r1, #0]
1a000f64:	ea22 0303 	bic.w	r3, r2, r3
1a000f68:	600b      	str	r3, [r1, #0]
1a000f6a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a000f6e:	d107      	bne.n	1a000f80 <prvAddCurrentTaskToDelayedList+0x40>
1a000f70:	b136      	cbz	r6, 1a000f80 <prvAddCurrentTaskToDelayedList+0x40>
1a000f72:	4b12      	ldr	r3, [pc, #72]	; (1a000fbc <prvAddCurrentTaskToDelayedList+0x7c>)
1a000f74:	6819      	ldr	r1, [r3, #0]
1a000f76:	4813      	ldr	r0, [pc, #76]	; (1a000fc4 <prvAddCurrentTaskToDelayedList+0x84>)
1a000f78:	3104      	adds	r1, #4
1a000f7a:	f7ff fe4b 	bl	1a000c14 <vListInsertEnd>
1a000f7e:	bd70      	pop	{r4, r5, r6, pc}
1a000f80:	442c      	add	r4, r5
1a000f82:	4b0e      	ldr	r3, [pc, #56]	; (1a000fbc <prvAddCurrentTaskToDelayedList+0x7c>)
1a000f84:	681b      	ldr	r3, [r3, #0]
1a000f86:	605c      	str	r4, [r3, #4]
1a000f88:	42ac      	cmp	r4, r5
1a000f8a:	d207      	bcs.n	1a000f9c <prvAddCurrentTaskToDelayedList+0x5c>
1a000f8c:	4b0e      	ldr	r3, [pc, #56]	; (1a000fc8 <prvAddCurrentTaskToDelayedList+0x88>)
1a000f8e:	6818      	ldr	r0, [r3, #0]
1a000f90:	4b0a      	ldr	r3, [pc, #40]	; (1a000fbc <prvAddCurrentTaskToDelayedList+0x7c>)
1a000f92:	6819      	ldr	r1, [r3, #0]
1a000f94:	3104      	adds	r1, #4
1a000f96:	f7ff fe49 	bl	1a000c2c <vListInsert>
1a000f9a:	bd70      	pop	{r4, r5, r6, pc}
1a000f9c:	4b0b      	ldr	r3, [pc, #44]	; (1a000fcc <prvAddCurrentTaskToDelayedList+0x8c>)
1a000f9e:	6818      	ldr	r0, [r3, #0]
1a000fa0:	4b06      	ldr	r3, [pc, #24]	; (1a000fbc <prvAddCurrentTaskToDelayedList+0x7c>)
1a000fa2:	6819      	ldr	r1, [r3, #0]
1a000fa4:	3104      	adds	r1, #4
1a000fa6:	f7ff fe41 	bl	1a000c2c <vListInsert>
1a000faa:	4b09      	ldr	r3, [pc, #36]	; (1a000fd0 <prvAddCurrentTaskToDelayedList+0x90>)
1a000fac:	681b      	ldr	r3, [r3, #0]
1a000fae:	429c      	cmp	r4, r3
1a000fb0:	d201      	bcs.n	1a000fb6 <prvAddCurrentTaskToDelayedList+0x76>
1a000fb2:	4b07      	ldr	r3, [pc, #28]	; (1a000fd0 <prvAddCurrentTaskToDelayedList+0x90>)
1a000fb4:	601c      	str	r4, [r3, #0]
1a000fb6:	bd70      	pop	{r4, r5, r6, pc}
1a000fb8:	10002be0 	.word	0x10002be0
1a000fbc:	10002bc4 	.word	0x10002bc4
1a000fc0:	10002c28 	.word	0x10002c28
1a000fc4:	10002c14 	.word	0x10002c14
1a000fc8:	10002b24 	.word	0x10002b24
1a000fcc:	10002b08 	.word	0x10002b08
1a000fd0:	10002be4 	.word	0x10002be4

1a000fd4 <xTaskCreateStatic>:
1a000fd4:	b570      	push	{r4, r5, r6, lr}
1a000fd6:	b086      	sub	sp, #24
1a000fd8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a000fda:	9c0c      	ldr	r4, [sp, #48]	; 0x30
1a000fdc:	b945      	cbnz	r5, 1a000ff0 <xTaskCreateStatic+0x1c>
1a000fde:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fe2:	f383 8811 	msr	BASEPRI, r3
1a000fe6:	f3bf 8f6f 	isb	sy
1a000fea:	f3bf 8f4f 	dsb	sy
1a000fee:	e7fe      	b.n	1a000fee <xTaskCreateStatic+0x1a>
1a000ff0:	b944      	cbnz	r4, 1a001004 <xTaskCreateStatic+0x30>
1a000ff2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ff6:	f383 8811 	msr	BASEPRI, r3
1a000ffa:	f3bf 8f6f 	isb	sy
1a000ffe:	f3bf 8f4f 	dsb	sy
1a001002:	e7fe      	b.n	1a001002 <xTaskCreateStatic+0x2e>
1a001004:	2660      	movs	r6, #96	; 0x60
1a001006:	9604      	str	r6, [sp, #16]
1a001008:	9e04      	ldr	r6, [sp, #16]
1a00100a:	2e60      	cmp	r6, #96	; 0x60
1a00100c:	d008      	beq.n	1a001020 <xTaskCreateStatic+0x4c>
1a00100e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001012:	f383 8811 	msr	BASEPRI, r3
1a001016:	f3bf 8f6f 	isb	sy
1a00101a:	f3bf 8f4f 	dsb	sy
1a00101e:	e7fe      	b.n	1a00101e <xTaskCreateStatic+0x4a>
1a001020:	b18c      	cbz	r4, 1a001046 <xTaskCreateStatic+0x72>
1a001022:	b185      	cbz	r5, 1a001046 <xTaskCreateStatic+0x72>
1a001024:	6325      	str	r5, [r4, #48]	; 0x30
1a001026:	2502      	movs	r5, #2
1a001028:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
1a00102c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a00102e:	9500      	str	r5, [sp, #0]
1a001030:	ad05      	add	r5, sp, #20
1a001032:	9501      	str	r5, [sp, #4]
1a001034:	9402      	str	r4, [sp, #8]
1a001036:	2500      	movs	r5, #0
1a001038:	9503      	str	r5, [sp, #12]
1a00103a:	f7ff fe5b 	bl	1a000cf4 <prvInitialiseNewTask>
1a00103e:	4620      	mov	r0, r4
1a001040:	f7ff fed6 	bl	1a000df0 <prvAddNewTaskToReadyList>
1a001044:	e001      	b.n	1a00104a <xTaskCreateStatic+0x76>
1a001046:	2300      	movs	r3, #0
1a001048:	9305      	str	r3, [sp, #20]
1a00104a:	9805      	ldr	r0, [sp, #20]
1a00104c:	b006      	add	sp, #24
1a00104e:	bd70      	pop	{r4, r5, r6, pc}

1a001050 <xTaskCreate>:
1a001050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001054:	b085      	sub	sp, #20
1a001056:	4680      	mov	r8, r0
1a001058:	460f      	mov	r7, r1
1a00105a:	4615      	mov	r5, r2
1a00105c:	461e      	mov	r6, r3
1a00105e:	0090      	lsls	r0, r2, #2
1a001060:	f7ff fa20 	bl	1a0004a4 <pvPortMalloc>
1a001064:	b160      	cbz	r0, 1a001080 <xTaskCreate+0x30>
1a001066:	4681      	mov	r9, r0
1a001068:	2060      	movs	r0, #96	; 0x60
1a00106a:	f7ff fa1b 	bl	1a0004a4 <pvPortMalloc>
1a00106e:	4604      	mov	r4, r0
1a001070:	b110      	cbz	r0, 1a001078 <xTaskCreate+0x28>
1a001072:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
1a001076:	e004      	b.n	1a001082 <xTaskCreate+0x32>
1a001078:	4648      	mov	r0, r9
1a00107a:	f7ff fa45 	bl	1a000508 <vPortFree>
1a00107e:	e000      	b.n	1a001082 <xTaskCreate+0x32>
1a001080:	2400      	movs	r4, #0
1a001082:	b19c      	cbz	r4, 1a0010ac <xTaskCreate+0x5c>
1a001084:	2300      	movs	r3, #0
1a001086:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
1a00108a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a00108c:	9200      	str	r2, [sp, #0]
1a00108e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a001090:	9201      	str	r2, [sp, #4]
1a001092:	9402      	str	r4, [sp, #8]
1a001094:	9303      	str	r3, [sp, #12]
1a001096:	4640      	mov	r0, r8
1a001098:	4639      	mov	r1, r7
1a00109a:	462a      	mov	r2, r5
1a00109c:	4633      	mov	r3, r6
1a00109e:	f7ff fe29 	bl	1a000cf4 <prvInitialiseNewTask>
1a0010a2:	4620      	mov	r0, r4
1a0010a4:	f7ff fea4 	bl	1a000df0 <prvAddNewTaskToReadyList>
1a0010a8:	2001      	movs	r0, #1
1a0010aa:	e001      	b.n	1a0010b0 <xTaskCreate+0x60>
1a0010ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010b0:	b005      	add	sp, #20
1a0010b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0010b6:	bf00      	nop

1a0010b8 <vTaskStartScheduler>:
1a0010b8:	b510      	push	{r4, lr}
1a0010ba:	b088      	sub	sp, #32
1a0010bc:	2400      	movs	r4, #0
1a0010be:	9405      	str	r4, [sp, #20]
1a0010c0:	9406      	str	r4, [sp, #24]
1a0010c2:	a805      	add	r0, sp, #20
1a0010c4:	a906      	add	r1, sp, #24
1a0010c6:	aa07      	add	r2, sp, #28
1a0010c8:	f7ff fdde 	bl	1a000c88 <vApplicationGetIdleTaskMemory>
1a0010cc:	9400      	str	r4, [sp, #0]
1a0010ce:	9b06      	ldr	r3, [sp, #24]
1a0010d0:	9301      	str	r3, [sp, #4]
1a0010d2:	9b05      	ldr	r3, [sp, #20]
1a0010d4:	9302      	str	r3, [sp, #8]
1a0010d6:	481a      	ldr	r0, [pc, #104]	; (1a001140 <vTaskStartScheduler+0x88>)
1a0010d8:	491a      	ldr	r1, [pc, #104]	; (1a001144 <vTaskStartScheduler+0x8c>)
1a0010da:	9a07      	ldr	r2, [sp, #28]
1a0010dc:	4623      	mov	r3, r4
1a0010de:	f7ff ff79 	bl	1a000fd4 <xTaskCreateStatic>
1a0010e2:	4b19      	ldr	r3, [pc, #100]	; (1a001148 <vTaskStartScheduler+0x90>)
1a0010e4:	6018      	str	r0, [r3, #0]
1a0010e6:	b108      	cbz	r0, 1a0010ec <vTaskStartScheduler+0x34>
1a0010e8:	2001      	movs	r0, #1
1a0010ea:	e000      	b.n	1a0010ee <vTaskStartScheduler+0x36>
1a0010ec:	2000      	movs	r0, #0
1a0010ee:	2801      	cmp	r0, #1
1a0010f0:	d101      	bne.n	1a0010f6 <vTaskStartScheduler+0x3e>
1a0010f2:	f000 fb97 	bl	1a001824 <xTimerCreateTimerTask>
1a0010f6:	2801      	cmp	r0, #1
1a0010f8:	d114      	bne.n	1a001124 <vTaskStartScheduler+0x6c>
1a0010fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010fe:	f383 8811 	msr	BASEPRI, r3
1a001102:	f3bf 8f6f 	isb	sy
1a001106:	f3bf 8f4f 	dsb	sy
1a00110a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00110e:	4b0f      	ldr	r3, [pc, #60]	; (1a00114c <vTaskStartScheduler+0x94>)
1a001110:	601a      	str	r2, [r3, #0]
1a001112:	2201      	movs	r2, #1
1a001114:	4b0e      	ldr	r3, [pc, #56]	; (1a001150 <vTaskStartScheduler+0x98>)
1a001116:	601a      	str	r2, [r3, #0]
1a001118:	2200      	movs	r2, #0
1a00111a:	4b0e      	ldr	r3, [pc, #56]	; (1a001154 <vTaskStartScheduler+0x9c>)
1a00111c:	601a      	str	r2, [r3, #0]
1a00111e:	f000 fe59 	bl	1a001dd4 <xPortStartScheduler>
1a001122:	e00b      	b.n	1a00113c <vTaskStartScheduler+0x84>
1a001124:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001128:	d108      	bne.n	1a00113c <vTaskStartScheduler+0x84>
1a00112a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00112e:	f383 8811 	msr	BASEPRI, r3
1a001132:	f3bf 8f6f 	isb	sy
1a001136:	f3bf 8f4f 	dsb	sy
1a00113a:	e7fe      	b.n	1a00113a <vTaskStartScheduler+0x82>
1a00113c:	b008      	add	sp, #32
1a00113e:	bd10      	pop	{r4, pc}
1a001140:	1a000f19 	.word	0x1a000f19
1a001144:	1a004130 	.word	0x1a004130
1a001148:	10002bdc 	.word	0x10002bdc
1a00114c:	10002be4 	.word	0x10002be4
1a001150:	10002b0c 	.word	0x10002b0c
1a001154:	10002be0 	.word	0x10002be0

1a001158 <vTaskSuspendAll>:
1a001158:	4a02      	ldr	r2, [pc, #8]	; (1a001164 <vTaskSuspendAll+0xc>)
1a00115a:	6813      	ldr	r3, [r2, #0]
1a00115c:	3301      	adds	r3, #1
1a00115e:	6013      	str	r3, [r2, #0]
1a001160:	4770      	bx	lr
1a001162:	bf00      	nop
1a001164:	10002bb8 	.word	0x10002bb8

1a001168 <xTaskGetTickCount>:
1a001168:	4b01      	ldr	r3, [pc, #4]	; (1a001170 <xTaskGetTickCount+0x8>)
1a00116a:	6818      	ldr	r0, [r3, #0]
1a00116c:	4770      	bx	lr
1a00116e:	bf00      	nop
1a001170:	10002be0 	.word	0x10002be0

1a001174 <xTaskIncrementTick>:
1a001174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001176:	4b3d      	ldr	r3, [pc, #244]	; (1a00126c <xTaskIncrementTick+0xf8>)
1a001178:	681b      	ldr	r3, [r3, #0]
1a00117a:	2b00      	cmp	r3, #0
1a00117c:	d169      	bne.n	1a001252 <xTaskIncrementTick+0xde>
1a00117e:	4b3c      	ldr	r3, [pc, #240]	; (1a001270 <xTaskIncrementTick+0xfc>)
1a001180:	681d      	ldr	r5, [r3, #0]
1a001182:	3501      	adds	r5, #1
1a001184:	601d      	str	r5, [r3, #0]
1a001186:	b9c5      	cbnz	r5, 1a0011ba <xTaskIncrementTick+0x46>
1a001188:	4b3a      	ldr	r3, [pc, #232]	; (1a001274 <xTaskIncrementTick+0x100>)
1a00118a:	681b      	ldr	r3, [r3, #0]
1a00118c:	681b      	ldr	r3, [r3, #0]
1a00118e:	b143      	cbz	r3, 1a0011a2 <xTaskIncrementTick+0x2e>
1a001190:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001194:	f383 8811 	msr	BASEPRI, r3
1a001198:	f3bf 8f6f 	isb	sy
1a00119c:	f3bf 8f4f 	dsb	sy
1a0011a0:	e7fe      	b.n	1a0011a0 <xTaskIncrementTick+0x2c>
1a0011a2:	4a34      	ldr	r2, [pc, #208]	; (1a001274 <xTaskIncrementTick+0x100>)
1a0011a4:	6811      	ldr	r1, [r2, #0]
1a0011a6:	4b34      	ldr	r3, [pc, #208]	; (1a001278 <xTaskIncrementTick+0x104>)
1a0011a8:	6818      	ldr	r0, [r3, #0]
1a0011aa:	6010      	str	r0, [r2, #0]
1a0011ac:	6019      	str	r1, [r3, #0]
1a0011ae:	4a33      	ldr	r2, [pc, #204]	; (1a00127c <xTaskIncrementTick+0x108>)
1a0011b0:	6813      	ldr	r3, [r2, #0]
1a0011b2:	3301      	adds	r3, #1
1a0011b4:	6013      	str	r3, [r2, #0]
1a0011b6:	f7ff fd83 	bl	1a000cc0 <prvResetNextTaskUnblockTime>
1a0011ba:	4b31      	ldr	r3, [pc, #196]	; (1a001280 <xTaskIncrementTick+0x10c>)
1a0011bc:	681b      	ldr	r3, [r3, #0]
1a0011be:	429d      	cmp	r5, r3
1a0011c0:	d203      	bcs.n	1a0011ca <xTaskIncrementTick+0x56>
1a0011c2:	2400      	movs	r4, #0
1a0011c4:	e03a      	b.n	1a00123c <xTaskIncrementTick+0xc8>
1a0011c6:	2401      	movs	r4, #1
1a0011c8:	e000      	b.n	1a0011cc <xTaskIncrementTick+0x58>
1a0011ca:	2400      	movs	r4, #0
1a0011cc:	4b29      	ldr	r3, [pc, #164]	; (1a001274 <xTaskIncrementTick+0x100>)
1a0011ce:	681b      	ldr	r3, [r3, #0]
1a0011d0:	681b      	ldr	r3, [r3, #0]
1a0011d2:	b90b      	cbnz	r3, 1a0011d8 <xTaskIncrementTick+0x64>
1a0011d4:	2301      	movs	r3, #1
1a0011d6:	e000      	b.n	1a0011da <xTaskIncrementTick+0x66>
1a0011d8:	2300      	movs	r3, #0
1a0011da:	b123      	cbz	r3, 1a0011e6 <xTaskIncrementTick+0x72>
1a0011dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0011e0:	4b27      	ldr	r3, [pc, #156]	; (1a001280 <xTaskIncrementTick+0x10c>)
1a0011e2:	601a      	str	r2, [r3, #0]
1a0011e4:	e02a      	b.n	1a00123c <xTaskIncrementTick+0xc8>
1a0011e6:	4b23      	ldr	r3, [pc, #140]	; (1a001274 <xTaskIncrementTick+0x100>)
1a0011e8:	681b      	ldr	r3, [r3, #0]
1a0011ea:	68db      	ldr	r3, [r3, #12]
1a0011ec:	68de      	ldr	r6, [r3, #12]
1a0011ee:	6873      	ldr	r3, [r6, #4]
1a0011f0:	429d      	cmp	r5, r3
1a0011f2:	d202      	bcs.n	1a0011fa <xTaskIncrementTick+0x86>
1a0011f4:	4a22      	ldr	r2, [pc, #136]	; (1a001280 <xTaskIncrementTick+0x10c>)
1a0011f6:	6013      	str	r3, [r2, #0]
1a0011f8:	e020      	b.n	1a00123c <xTaskIncrementTick+0xc8>
1a0011fa:	1d37      	adds	r7, r6, #4
1a0011fc:	4638      	mov	r0, r7
1a0011fe:	f7ff fd2f 	bl	1a000c60 <uxListRemove>
1a001202:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001204:	b11b      	cbz	r3, 1a00120e <xTaskIncrementTick+0x9a>
1a001206:	f106 0018 	add.w	r0, r6, #24
1a00120a:	f7ff fd29 	bl	1a000c60 <uxListRemove>
1a00120e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001210:	2201      	movs	r2, #1
1a001212:	fa02 f103 	lsl.w	r1, r2, r3
1a001216:	481b      	ldr	r0, [pc, #108]	; (1a001284 <xTaskIncrementTick+0x110>)
1a001218:	6802      	ldr	r2, [r0, #0]
1a00121a:	430a      	orrs	r2, r1
1a00121c:	6002      	str	r2, [r0, #0]
1a00121e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001222:	009b      	lsls	r3, r3, #2
1a001224:	4818      	ldr	r0, [pc, #96]	; (1a001288 <xTaskIncrementTick+0x114>)
1a001226:	4418      	add	r0, r3
1a001228:	4639      	mov	r1, r7
1a00122a:	f7ff fcf3 	bl	1a000c14 <vListInsertEnd>
1a00122e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001230:	4b16      	ldr	r3, [pc, #88]	; (1a00128c <xTaskIncrementTick+0x118>)
1a001232:	681b      	ldr	r3, [r3, #0]
1a001234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001236:	429a      	cmp	r2, r3
1a001238:	d2c5      	bcs.n	1a0011c6 <xTaskIncrementTick+0x52>
1a00123a:	e7c7      	b.n	1a0011cc <xTaskIncrementTick+0x58>
1a00123c:	4b13      	ldr	r3, [pc, #76]	; (1a00128c <xTaskIncrementTick+0x118>)
1a00123e:	681b      	ldr	r3, [r3, #0]
1a001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001242:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001246:	009b      	lsls	r3, r3, #2
1a001248:	4a0f      	ldr	r2, [pc, #60]	; (1a001288 <xTaskIncrementTick+0x114>)
1a00124a:	58d3      	ldr	r3, [r2, r3]
1a00124c:	2b01      	cmp	r3, #1
1a00124e:	d806      	bhi.n	1a00125e <xTaskIncrementTick+0xea>
1a001250:	e006      	b.n	1a001260 <xTaskIncrementTick+0xec>
1a001252:	4a0f      	ldr	r2, [pc, #60]	; (1a001290 <xTaskIncrementTick+0x11c>)
1a001254:	6813      	ldr	r3, [r2, #0]
1a001256:	3301      	adds	r3, #1
1a001258:	6013      	str	r3, [r2, #0]
1a00125a:	2400      	movs	r4, #0
1a00125c:	e000      	b.n	1a001260 <xTaskIncrementTick+0xec>
1a00125e:	2401      	movs	r4, #1
1a001260:	4b0c      	ldr	r3, [pc, #48]	; (1a001294 <xTaskIncrementTick+0x120>)
1a001262:	681b      	ldr	r3, [r3, #0]
1a001264:	b103      	cbz	r3, 1a001268 <xTaskIncrementTick+0xf4>
1a001266:	2401      	movs	r4, #1
1a001268:	4620      	mov	r0, r4
1a00126a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00126c:	10002bb8 	.word	0x10002bb8
1a001270:	10002be0 	.word	0x10002be0
1a001274:	10002b08 	.word	0x10002b08
1a001278:	10002b24 	.word	0x10002b24
1a00127c:	10002b04 	.word	0x10002b04
1a001280:	10002be4 	.word	0x10002be4
1a001284:	10002c28 	.word	0x10002c28
1a001288:	10002b2c 	.word	0x10002b2c
1a00128c:	10002bc4 	.word	0x10002bc4
1a001290:	10002b28 	.word	0x10002b28
1a001294:	10002c2c 	.word	0x10002c2c

1a001298 <xTaskResumeAll>:
1a001298:	b538      	push	{r3, r4, r5, lr}
1a00129a:	4b34      	ldr	r3, [pc, #208]	; (1a00136c <xTaskResumeAll+0xd4>)
1a00129c:	681b      	ldr	r3, [r3, #0]
1a00129e:	b943      	cbnz	r3, 1a0012b2 <xTaskResumeAll+0x1a>
1a0012a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012a4:	f383 8811 	msr	BASEPRI, r3
1a0012a8:	f3bf 8f6f 	isb	sy
1a0012ac:	f3bf 8f4f 	dsb	sy
1a0012b0:	e7fe      	b.n	1a0012b0 <xTaskResumeAll+0x18>
1a0012b2:	f000 fced 	bl	1a001c90 <vPortEnterCritical>
1a0012b6:	4b2d      	ldr	r3, [pc, #180]	; (1a00136c <xTaskResumeAll+0xd4>)
1a0012b8:	681a      	ldr	r2, [r3, #0]
1a0012ba:	3a01      	subs	r2, #1
1a0012bc:	601a      	str	r2, [r3, #0]
1a0012be:	681b      	ldr	r3, [r3, #0]
1a0012c0:	2b00      	cmp	r3, #0
1a0012c2:	d14c      	bne.n	1a00135e <xTaskResumeAll+0xc6>
1a0012c4:	4b2a      	ldr	r3, [pc, #168]	; (1a001370 <xTaskResumeAll+0xd8>)
1a0012c6:	681b      	ldr	r3, [r3, #0]
1a0012c8:	bb33      	cbnz	r3, 1a001318 <xTaskResumeAll+0x80>
1a0012ca:	2400      	movs	r4, #0
1a0012cc:	e04a      	b.n	1a001364 <xTaskResumeAll+0xcc>
1a0012ce:	4b29      	ldr	r3, [pc, #164]	; (1a001374 <xTaskResumeAll+0xdc>)
1a0012d0:	68db      	ldr	r3, [r3, #12]
1a0012d2:	68dc      	ldr	r4, [r3, #12]
1a0012d4:	f104 0018 	add.w	r0, r4, #24
1a0012d8:	f7ff fcc2 	bl	1a000c60 <uxListRemove>
1a0012dc:	1d25      	adds	r5, r4, #4
1a0012de:	4628      	mov	r0, r5
1a0012e0:	f7ff fcbe 	bl	1a000c60 <uxListRemove>
1a0012e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0012e6:	2201      	movs	r2, #1
1a0012e8:	fa02 f103 	lsl.w	r1, r2, r3
1a0012ec:	4822      	ldr	r0, [pc, #136]	; (1a001378 <xTaskResumeAll+0xe0>)
1a0012ee:	6802      	ldr	r2, [r0, #0]
1a0012f0:	430a      	orrs	r2, r1
1a0012f2:	6002      	str	r2, [r0, #0]
1a0012f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0012f8:	009b      	lsls	r3, r3, #2
1a0012fa:	4820      	ldr	r0, [pc, #128]	; (1a00137c <xTaskResumeAll+0xe4>)
1a0012fc:	4418      	add	r0, r3
1a0012fe:	4629      	mov	r1, r5
1a001300:	f7ff fc88 	bl	1a000c14 <vListInsertEnd>
1a001304:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001306:	4b1e      	ldr	r3, [pc, #120]	; (1a001380 <xTaskResumeAll+0xe8>)
1a001308:	681b      	ldr	r3, [r3, #0]
1a00130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00130c:	429a      	cmp	r2, r3
1a00130e:	d304      	bcc.n	1a00131a <xTaskResumeAll+0x82>
1a001310:	2201      	movs	r2, #1
1a001312:	4b1c      	ldr	r3, [pc, #112]	; (1a001384 <xTaskResumeAll+0xec>)
1a001314:	601a      	str	r2, [r3, #0]
1a001316:	e000      	b.n	1a00131a <xTaskResumeAll+0x82>
1a001318:	2400      	movs	r4, #0
1a00131a:	4b16      	ldr	r3, [pc, #88]	; (1a001374 <xTaskResumeAll+0xdc>)
1a00131c:	681b      	ldr	r3, [r3, #0]
1a00131e:	2b00      	cmp	r3, #0
1a001320:	d1d5      	bne.n	1a0012ce <xTaskResumeAll+0x36>
1a001322:	b10c      	cbz	r4, 1a001328 <xTaskResumeAll+0x90>
1a001324:	f7ff fccc 	bl	1a000cc0 <prvResetNextTaskUnblockTime>
1a001328:	4b17      	ldr	r3, [pc, #92]	; (1a001388 <xTaskResumeAll+0xf0>)
1a00132a:	681c      	ldr	r4, [r3, #0]
1a00132c:	b154      	cbz	r4, 1a001344 <xTaskResumeAll+0xac>
1a00132e:	f7ff ff21 	bl	1a001174 <xTaskIncrementTick>
1a001332:	b110      	cbz	r0, 1a00133a <xTaskResumeAll+0xa2>
1a001334:	2201      	movs	r2, #1
1a001336:	4b13      	ldr	r3, [pc, #76]	; (1a001384 <xTaskResumeAll+0xec>)
1a001338:	601a      	str	r2, [r3, #0]
1a00133a:	3c01      	subs	r4, #1
1a00133c:	d1f7      	bne.n	1a00132e <xTaskResumeAll+0x96>
1a00133e:	2200      	movs	r2, #0
1a001340:	4b11      	ldr	r3, [pc, #68]	; (1a001388 <xTaskResumeAll+0xf0>)
1a001342:	601a      	str	r2, [r3, #0]
1a001344:	4b0f      	ldr	r3, [pc, #60]	; (1a001384 <xTaskResumeAll+0xec>)
1a001346:	681b      	ldr	r3, [r3, #0]
1a001348:	b15b      	cbz	r3, 1a001362 <xTaskResumeAll+0xca>
1a00134a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00134e:	4b0f      	ldr	r3, [pc, #60]	; (1a00138c <xTaskResumeAll+0xf4>)
1a001350:	601a      	str	r2, [r3, #0]
1a001352:	f3bf 8f4f 	dsb	sy
1a001356:	f3bf 8f6f 	isb	sy
1a00135a:	2401      	movs	r4, #1
1a00135c:	e002      	b.n	1a001364 <xTaskResumeAll+0xcc>
1a00135e:	2400      	movs	r4, #0
1a001360:	e000      	b.n	1a001364 <xTaskResumeAll+0xcc>
1a001362:	2400      	movs	r4, #0
1a001364:	f000 fcb6 	bl	1a001cd4 <vPortExitCritical>
1a001368:	4620      	mov	r0, r4
1a00136a:	bd38      	pop	{r3, r4, r5, pc}
1a00136c:	10002bb8 	.word	0x10002bb8
1a001370:	10002bc0 	.word	0x10002bc0
1a001374:	10002bc8 	.word	0x10002bc8
1a001378:	10002c28 	.word	0x10002c28
1a00137c:	10002b2c 	.word	0x10002b2c
1a001380:	10002bc4 	.word	0x10002bc4
1a001384:	10002c2c 	.word	0x10002c2c
1a001388:	10002b28 	.word	0x10002b28
1a00138c:	e000ed04 	.word	0xe000ed04

1a001390 <vTaskDelay>:
1a001390:	b510      	push	{r4, lr}
1a001392:	b1a8      	cbz	r0, 1a0013c0 <vTaskDelay+0x30>
1a001394:	4604      	mov	r4, r0
1a001396:	4b10      	ldr	r3, [pc, #64]	; (1a0013d8 <vTaskDelay+0x48>)
1a001398:	681b      	ldr	r3, [r3, #0]
1a00139a:	b143      	cbz	r3, 1a0013ae <vTaskDelay+0x1e>
1a00139c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013a0:	f383 8811 	msr	BASEPRI, r3
1a0013a4:	f3bf 8f6f 	isb	sy
1a0013a8:	f3bf 8f4f 	dsb	sy
1a0013ac:	e7fe      	b.n	1a0013ac <vTaskDelay+0x1c>
1a0013ae:	f7ff fed3 	bl	1a001158 <vTaskSuspendAll>
1a0013b2:	4620      	mov	r0, r4
1a0013b4:	2100      	movs	r1, #0
1a0013b6:	f7ff fdc3 	bl	1a000f40 <prvAddCurrentTaskToDelayedList>
1a0013ba:	f7ff ff6d 	bl	1a001298 <xTaskResumeAll>
1a0013be:	e000      	b.n	1a0013c2 <vTaskDelay+0x32>
1a0013c0:	2000      	movs	r0, #0
1a0013c2:	b938      	cbnz	r0, 1a0013d4 <vTaskDelay+0x44>
1a0013c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0013c8:	4b04      	ldr	r3, [pc, #16]	; (1a0013dc <vTaskDelay+0x4c>)
1a0013ca:	601a      	str	r2, [r3, #0]
1a0013cc:	f3bf 8f4f 	dsb	sy
1a0013d0:	f3bf 8f6f 	isb	sy
1a0013d4:	bd10      	pop	{r4, pc}
1a0013d6:	bf00      	nop
1a0013d8:	10002bb8 	.word	0x10002bb8
1a0013dc:	e000ed04 	.word	0xe000ed04

1a0013e0 <vTaskSwitchContext>:
1a0013e0:	4b2b      	ldr	r3, [pc, #172]	; (1a001490 <vTaskSwitchContext+0xb0>)
1a0013e2:	681b      	ldr	r3, [r3, #0]
1a0013e4:	b11b      	cbz	r3, 1a0013ee <vTaskSwitchContext+0xe>
1a0013e6:	2201      	movs	r2, #1
1a0013e8:	4b2a      	ldr	r3, [pc, #168]	; (1a001494 <vTaskSwitchContext+0xb4>)
1a0013ea:	601a      	str	r2, [r3, #0]
1a0013ec:	4770      	bx	lr
1a0013ee:	b510      	push	{r4, lr}
1a0013f0:	2200      	movs	r2, #0
1a0013f2:	4b28      	ldr	r3, [pc, #160]	; (1a001494 <vTaskSwitchContext+0xb4>)
1a0013f4:	601a      	str	r2, [r3, #0]
1a0013f6:	4b28      	ldr	r3, [pc, #160]	; (1a001498 <vTaskSwitchContext+0xb8>)
1a0013f8:	681b      	ldr	r3, [r3, #0]
1a0013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0013fc:	681a      	ldr	r2, [r3, #0]
1a0013fe:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001402:	d10b      	bne.n	1a00141c <vTaskSwitchContext+0x3c>
1a001404:	685a      	ldr	r2, [r3, #4]
1a001406:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00140a:	d107      	bne.n	1a00141c <vTaskSwitchContext+0x3c>
1a00140c:	689a      	ldr	r2, [r3, #8]
1a00140e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001412:	d103      	bne.n	1a00141c <vTaskSwitchContext+0x3c>
1a001414:	68db      	ldr	r3, [r3, #12]
1a001416:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00141a:	d005      	beq.n	1a001428 <vTaskSwitchContext+0x48>
1a00141c:	4b1e      	ldr	r3, [pc, #120]	; (1a001498 <vTaskSwitchContext+0xb8>)
1a00141e:	6818      	ldr	r0, [r3, #0]
1a001420:	6819      	ldr	r1, [r3, #0]
1a001422:	3134      	adds	r1, #52	; 0x34
1a001424:	f7ff fc48 	bl	1a000cb8 <vApplicationStackOverflowHook>
1a001428:	4b1c      	ldr	r3, [pc, #112]	; (1a00149c <vTaskSwitchContext+0xbc>)
1a00142a:	681b      	ldr	r3, [r3, #0]
1a00142c:	fab3 f383 	clz	r3, r3
1a001430:	b2db      	uxtb	r3, r3
1a001432:	f1c3 031f 	rsb	r3, r3, #31
1a001436:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a00143a:	0092      	lsls	r2, r2, #2
1a00143c:	4918      	ldr	r1, [pc, #96]	; (1a0014a0 <vTaskSwitchContext+0xc0>)
1a00143e:	588a      	ldr	r2, [r1, r2]
1a001440:	b942      	cbnz	r2, 1a001454 <vTaskSwitchContext+0x74>
1a001442:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001446:	f383 8811 	msr	BASEPRI, r3
1a00144a:	f3bf 8f6f 	isb	sy
1a00144e:	f3bf 8f4f 	dsb	sy
1a001452:	e7fe      	b.n	1a001452 <vTaskSwitchContext+0x72>
1a001454:	4c12      	ldr	r4, [pc, #72]	; (1a0014a0 <vTaskSwitchContext+0xc0>)
1a001456:	009a      	lsls	r2, r3, #2
1a001458:	18d1      	adds	r1, r2, r3
1a00145a:	0089      	lsls	r1, r1, #2
1a00145c:	4421      	add	r1, r4
1a00145e:	6848      	ldr	r0, [r1, #4]
1a001460:	6840      	ldr	r0, [r0, #4]
1a001462:	6048      	str	r0, [r1, #4]
1a001464:	441a      	add	r2, r3
1a001466:	0092      	lsls	r2, r2, #2
1a001468:	3208      	adds	r2, #8
1a00146a:	4422      	add	r2, r4
1a00146c:	4290      	cmp	r0, r2
1a00146e:	d105      	bne.n	1a00147c <vTaskSwitchContext+0x9c>
1a001470:	6841      	ldr	r1, [r0, #4]
1a001472:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001476:	0092      	lsls	r2, r2, #2
1a001478:	4422      	add	r2, r4
1a00147a:	6051      	str	r1, [r2, #4]
1a00147c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001480:	009b      	lsls	r3, r3, #2
1a001482:	4a07      	ldr	r2, [pc, #28]	; (1a0014a0 <vTaskSwitchContext+0xc0>)
1a001484:	4413      	add	r3, r2
1a001486:	685b      	ldr	r3, [r3, #4]
1a001488:	68da      	ldr	r2, [r3, #12]
1a00148a:	4b03      	ldr	r3, [pc, #12]	; (1a001498 <vTaskSwitchContext+0xb8>)
1a00148c:	601a      	str	r2, [r3, #0]
1a00148e:	bd10      	pop	{r4, pc}
1a001490:	10002bb8 	.word	0x10002bb8
1a001494:	10002c2c 	.word	0x10002c2c
1a001498:	10002bc4 	.word	0x10002bc4
1a00149c:	10002c28 	.word	0x10002c28
1a0014a0:	10002b2c 	.word	0x10002b2c

1a0014a4 <vTaskPlaceOnEventList>:
1a0014a4:	b940      	cbnz	r0, 1a0014b8 <vTaskPlaceOnEventList+0x14>
1a0014a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014aa:	f383 8811 	msr	BASEPRI, r3
1a0014ae:	f3bf 8f6f 	isb	sy
1a0014b2:	f3bf 8f4f 	dsb	sy
1a0014b6:	e7fe      	b.n	1a0014b6 <vTaskPlaceOnEventList+0x12>
1a0014b8:	b510      	push	{r4, lr}
1a0014ba:	460c      	mov	r4, r1
1a0014bc:	4b04      	ldr	r3, [pc, #16]	; (1a0014d0 <vTaskPlaceOnEventList+0x2c>)
1a0014be:	6819      	ldr	r1, [r3, #0]
1a0014c0:	3118      	adds	r1, #24
1a0014c2:	f7ff fbb3 	bl	1a000c2c <vListInsert>
1a0014c6:	4620      	mov	r0, r4
1a0014c8:	2101      	movs	r1, #1
1a0014ca:	f7ff fd39 	bl	1a000f40 <prvAddCurrentTaskToDelayedList>
1a0014ce:	bd10      	pop	{r4, pc}
1a0014d0:	10002bc4 	.word	0x10002bc4

1a0014d4 <vTaskPlaceOnEventListRestricted>:
1a0014d4:	b538      	push	{r3, r4, r5, lr}
1a0014d6:	b940      	cbnz	r0, 1a0014ea <vTaskPlaceOnEventListRestricted+0x16>
1a0014d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014dc:	f383 8811 	msr	BASEPRI, r3
1a0014e0:	f3bf 8f6f 	isb	sy
1a0014e4:	f3bf 8f4f 	dsb	sy
1a0014e8:	e7fe      	b.n	1a0014e8 <vTaskPlaceOnEventListRestricted+0x14>
1a0014ea:	460d      	mov	r5, r1
1a0014ec:	4614      	mov	r4, r2
1a0014ee:	4a06      	ldr	r2, [pc, #24]	; (1a001508 <vTaskPlaceOnEventListRestricted+0x34>)
1a0014f0:	6811      	ldr	r1, [r2, #0]
1a0014f2:	3118      	adds	r1, #24
1a0014f4:	f7ff fb8e 	bl	1a000c14 <vListInsertEnd>
1a0014f8:	b10c      	cbz	r4, 1a0014fe <vTaskPlaceOnEventListRestricted+0x2a>
1a0014fa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a0014fe:	4628      	mov	r0, r5
1a001500:	4621      	mov	r1, r4
1a001502:	f7ff fd1d 	bl	1a000f40 <prvAddCurrentTaskToDelayedList>
1a001506:	bd38      	pop	{r3, r4, r5, pc}
1a001508:	10002bc4 	.word	0x10002bc4

1a00150c <xTaskRemoveFromEventList>:
1a00150c:	b538      	push	{r3, r4, r5, lr}
1a00150e:	68c3      	ldr	r3, [r0, #12]
1a001510:	68dc      	ldr	r4, [r3, #12]
1a001512:	b944      	cbnz	r4, 1a001526 <xTaskRemoveFromEventList+0x1a>
1a001514:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001518:	f383 8811 	msr	BASEPRI, r3
1a00151c:	f3bf 8f6f 	isb	sy
1a001520:	f3bf 8f4f 	dsb	sy
1a001524:	e7fe      	b.n	1a001524 <xTaskRemoveFromEventList+0x18>
1a001526:	f104 0518 	add.w	r5, r4, #24
1a00152a:	4628      	mov	r0, r5
1a00152c:	f7ff fb98 	bl	1a000c60 <uxListRemove>
1a001530:	4b13      	ldr	r3, [pc, #76]	; (1a001580 <xTaskRemoveFromEventList+0x74>)
1a001532:	681b      	ldr	r3, [r3, #0]
1a001534:	b9a3      	cbnz	r3, 1a001560 <xTaskRemoveFromEventList+0x54>
1a001536:	1d25      	adds	r5, r4, #4
1a001538:	4628      	mov	r0, r5
1a00153a:	f7ff fb91 	bl	1a000c60 <uxListRemove>
1a00153e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001540:	2201      	movs	r2, #1
1a001542:	fa02 f103 	lsl.w	r1, r2, r3
1a001546:	480f      	ldr	r0, [pc, #60]	; (1a001584 <xTaskRemoveFromEventList+0x78>)
1a001548:	6802      	ldr	r2, [r0, #0]
1a00154a:	430a      	orrs	r2, r1
1a00154c:	6002      	str	r2, [r0, #0]
1a00154e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001552:	009b      	lsls	r3, r3, #2
1a001554:	480c      	ldr	r0, [pc, #48]	; (1a001588 <xTaskRemoveFromEventList+0x7c>)
1a001556:	4418      	add	r0, r3
1a001558:	4629      	mov	r1, r5
1a00155a:	f7ff fb5b 	bl	1a000c14 <vListInsertEnd>
1a00155e:	e003      	b.n	1a001568 <xTaskRemoveFromEventList+0x5c>
1a001560:	480a      	ldr	r0, [pc, #40]	; (1a00158c <xTaskRemoveFromEventList+0x80>)
1a001562:	4629      	mov	r1, r5
1a001564:	f7ff fb56 	bl	1a000c14 <vListInsertEnd>
1a001568:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00156a:	4b09      	ldr	r3, [pc, #36]	; (1a001590 <xTaskRemoveFromEventList+0x84>)
1a00156c:	681b      	ldr	r3, [r3, #0]
1a00156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001570:	429a      	cmp	r2, r3
1a001572:	d903      	bls.n	1a00157c <xTaskRemoveFromEventList+0x70>
1a001574:	2001      	movs	r0, #1
1a001576:	4b07      	ldr	r3, [pc, #28]	; (1a001594 <xTaskRemoveFromEventList+0x88>)
1a001578:	6018      	str	r0, [r3, #0]
1a00157a:	bd38      	pop	{r3, r4, r5, pc}
1a00157c:	2000      	movs	r0, #0
1a00157e:	bd38      	pop	{r3, r4, r5, pc}
1a001580:	10002bb8 	.word	0x10002bb8
1a001584:	10002c28 	.word	0x10002c28
1a001588:	10002b2c 	.word	0x10002b2c
1a00158c:	10002bc8 	.word	0x10002bc8
1a001590:	10002bc4 	.word	0x10002bc4
1a001594:	10002c2c 	.word	0x10002c2c

1a001598 <vTaskInternalSetTimeOutState>:
1a001598:	4b03      	ldr	r3, [pc, #12]	; (1a0015a8 <vTaskInternalSetTimeOutState+0x10>)
1a00159a:	681b      	ldr	r3, [r3, #0]
1a00159c:	6003      	str	r3, [r0, #0]
1a00159e:	4b03      	ldr	r3, [pc, #12]	; (1a0015ac <vTaskInternalSetTimeOutState+0x14>)
1a0015a0:	681b      	ldr	r3, [r3, #0]
1a0015a2:	6043      	str	r3, [r0, #4]
1a0015a4:	4770      	bx	lr
1a0015a6:	bf00      	nop
1a0015a8:	10002b04 	.word	0x10002b04
1a0015ac:	10002be0 	.word	0x10002be0

1a0015b0 <xTaskCheckForTimeOut>:
1a0015b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0015b2:	b940      	cbnz	r0, 1a0015c6 <xTaskCheckForTimeOut+0x16>
1a0015b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015b8:	f383 8811 	msr	BASEPRI, r3
1a0015bc:	f3bf 8f6f 	isb	sy
1a0015c0:	f3bf 8f4f 	dsb	sy
1a0015c4:	e7fe      	b.n	1a0015c4 <xTaskCheckForTimeOut+0x14>
1a0015c6:	4605      	mov	r5, r0
1a0015c8:	b941      	cbnz	r1, 1a0015dc <xTaskCheckForTimeOut+0x2c>
1a0015ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015ce:	f383 8811 	msr	BASEPRI, r3
1a0015d2:	f3bf 8f6f 	isb	sy
1a0015d6:	f3bf 8f4f 	dsb	sy
1a0015da:	e7fe      	b.n	1a0015da <xTaskCheckForTimeOut+0x2a>
1a0015dc:	460c      	mov	r4, r1
1a0015de:	f000 fb57 	bl	1a001c90 <vPortEnterCritical>
1a0015e2:	4b11      	ldr	r3, [pc, #68]	; (1a001628 <xTaskCheckForTimeOut+0x78>)
1a0015e4:	6818      	ldr	r0, [r3, #0]
1a0015e6:	6869      	ldr	r1, [r5, #4]
1a0015e8:	1a42      	subs	r2, r0, r1
1a0015ea:	6823      	ldr	r3, [r4, #0]
1a0015ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0015f0:	d013      	beq.n	1a00161a <xTaskCheckForTimeOut+0x6a>
1a0015f2:	682f      	ldr	r7, [r5, #0]
1a0015f4:	4e0d      	ldr	r6, [pc, #52]	; (1a00162c <xTaskCheckForTimeOut+0x7c>)
1a0015f6:	6836      	ldr	r6, [r6, #0]
1a0015f8:	42b7      	cmp	r7, r6
1a0015fa:	d001      	beq.n	1a001600 <xTaskCheckForTimeOut+0x50>
1a0015fc:	4288      	cmp	r0, r1
1a0015fe:	d20e      	bcs.n	1a00161e <xTaskCheckForTimeOut+0x6e>
1a001600:	429a      	cmp	r2, r3
1a001602:	d206      	bcs.n	1a001612 <xTaskCheckForTimeOut+0x62>
1a001604:	1a9b      	subs	r3, r3, r2
1a001606:	6023      	str	r3, [r4, #0]
1a001608:	4628      	mov	r0, r5
1a00160a:	f7ff ffc5 	bl	1a001598 <vTaskInternalSetTimeOutState>
1a00160e:	2400      	movs	r4, #0
1a001610:	e006      	b.n	1a001620 <xTaskCheckForTimeOut+0x70>
1a001612:	2300      	movs	r3, #0
1a001614:	6023      	str	r3, [r4, #0]
1a001616:	2401      	movs	r4, #1
1a001618:	e002      	b.n	1a001620 <xTaskCheckForTimeOut+0x70>
1a00161a:	2400      	movs	r4, #0
1a00161c:	e000      	b.n	1a001620 <xTaskCheckForTimeOut+0x70>
1a00161e:	2401      	movs	r4, #1
1a001620:	f000 fb58 	bl	1a001cd4 <vPortExitCritical>
1a001624:	4620      	mov	r0, r4
1a001626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001628:	10002be0 	.word	0x10002be0
1a00162c:	10002b04 	.word	0x10002b04

1a001630 <vTaskMissedYield>:
1a001630:	2201      	movs	r2, #1
1a001632:	4b01      	ldr	r3, [pc, #4]	; (1a001638 <vTaskMissedYield+0x8>)
1a001634:	601a      	str	r2, [r3, #0]
1a001636:	4770      	bx	lr
1a001638:	10002c2c 	.word	0x10002c2c

1a00163c <xTaskGetSchedulerState>:
1a00163c:	4b05      	ldr	r3, [pc, #20]	; (1a001654 <xTaskGetSchedulerState+0x18>)
1a00163e:	681b      	ldr	r3, [r3, #0]
1a001640:	b123      	cbz	r3, 1a00164c <xTaskGetSchedulerState+0x10>
1a001642:	4b05      	ldr	r3, [pc, #20]	; (1a001658 <xTaskGetSchedulerState+0x1c>)
1a001644:	681b      	ldr	r3, [r3, #0]
1a001646:	b91b      	cbnz	r3, 1a001650 <xTaskGetSchedulerState+0x14>
1a001648:	2002      	movs	r0, #2
1a00164a:	4770      	bx	lr
1a00164c:	2001      	movs	r0, #1
1a00164e:	4770      	bx	lr
1a001650:	2000      	movs	r0, #0
1a001652:	4770      	bx	lr
1a001654:	10002b0c 	.word	0x10002b0c
1a001658:	10002bb8 	.word	0x10002bb8

1a00165c <xTaskPriorityDisinherit>:
1a00165c:	2800      	cmp	r0, #0
1a00165e:	d04b      	beq.n	1a0016f8 <xTaskPriorityDisinherit+0x9c>
1a001660:	b538      	push	{r3, r4, r5, lr}
1a001662:	4603      	mov	r3, r0
1a001664:	4a27      	ldr	r2, [pc, #156]	; (1a001704 <xTaskPriorityDisinherit+0xa8>)
1a001666:	6812      	ldr	r2, [r2, #0]
1a001668:	4290      	cmp	r0, r2
1a00166a:	d008      	beq.n	1a00167e <xTaskPriorityDisinherit+0x22>
1a00166c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001670:	f383 8811 	msr	BASEPRI, r3
1a001674:	f3bf 8f6f 	isb	sy
1a001678:	f3bf 8f4f 	dsb	sy
1a00167c:	e7fe      	b.n	1a00167c <xTaskPriorityDisinherit+0x20>
1a00167e:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001680:	b942      	cbnz	r2, 1a001694 <xTaskPriorityDisinherit+0x38>
1a001682:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001686:	f383 8811 	msr	BASEPRI, r3
1a00168a:	f3bf 8f6f 	isb	sy
1a00168e:	f3bf 8f4f 	dsb	sy
1a001692:	e7fe      	b.n	1a001692 <xTaskPriorityDisinherit+0x36>
1a001694:	3a01      	subs	r2, #1
1a001696:	6542      	str	r2, [r0, #84]	; 0x54
1a001698:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a00169a:	6d19      	ldr	r1, [r3, #80]	; 0x50
1a00169c:	4288      	cmp	r0, r1
1a00169e:	d02d      	beq.n	1a0016fc <xTaskPriorityDisinherit+0xa0>
1a0016a0:	bb72      	cbnz	r2, 1a001700 <xTaskPriorityDisinherit+0xa4>
1a0016a2:	461c      	mov	r4, r3
1a0016a4:	1d1d      	adds	r5, r3, #4
1a0016a6:	4628      	mov	r0, r5
1a0016a8:	f7ff fada 	bl	1a000c60 <uxListRemove>
1a0016ac:	b970      	cbnz	r0, 1a0016cc <xTaskPriorityDisinherit+0x70>
1a0016ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0016b0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
1a0016b4:	009b      	lsls	r3, r3, #2
1a0016b6:	4914      	ldr	r1, [pc, #80]	; (1a001708 <xTaskPriorityDisinherit+0xac>)
1a0016b8:	58cb      	ldr	r3, [r1, r3]
1a0016ba:	b93b      	cbnz	r3, 1a0016cc <xTaskPriorityDisinherit+0x70>
1a0016bc:	2301      	movs	r3, #1
1a0016be:	fa03 f202 	lsl.w	r2, r3, r2
1a0016c2:	4912      	ldr	r1, [pc, #72]	; (1a00170c <xTaskPriorityDisinherit+0xb0>)
1a0016c4:	680b      	ldr	r3, [r1, #0]
1a0016c6:	ea23 0302 	bic.w	r3, r3, r2
1a0016ca:	600b      	str	r3, [r1, #0]
1a0016cc:	6d20      	ldr	r0, [r4, #80]	; 0x50
1a0016ce:	62e0      	str	r0, [r4, #44]	; 0x2c
1a0016d0:	f1c0 0307 	rsb	r3, r0, #7
1a0016d4:	61a3      	str	r3, [r4, #24]
1a0016d6:	2401      	movs	r4, #1
1a0016d8:	fa04 f100 	lsl.w	r1, r4, r0
1a0016dc:	4a0b      	ldr	r2, [pc, #44]	; (1a00170c <xTaskPriorityDisinherit+0xb0>)
1a0016de:	6813      	ldr	r3, [r2, #0]
1a0016e0:	430b      	orrs	r3, r1
1a0016e2:	6013      	str	r3, [r2, #0]
1a0016e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0016e8:	0080      	lsls	r0, r0, #2
1a0016ea:	4b07      	ldr	r3, [pc, #28]	; (1a001708 <xTaskPriorityDisinherit+0xac>)
1a0016ec:	4418      	add	r0, r3
1a0016ee:	4629      	mov	r1, r5
1a0016f0:	f7ff fa90 	bl	1a000c14 <vListInsertEnd>
1a0016f4:	4620      	mov	r0, r4
1a0016f6:	bd38      	pop	{r3, r4, r5, pc}
1a0016f8:	2000      	movs	r0, #0
1a0016fa:	4770      	bx	lr
1a0016fc:	2000      	movs	r0, #0
1a0016fe:	bd38      	pop	{r3, r4, r5, pc}
1a001700:	2000      	movs	r0, #0
1a001702:	bd38      	pop	{r3, r4, r5, pc}
1a001704:	10002bc4 	.word	0x10002bc4
1a001708:	10002b2c 	.word	0x10002b2c
1a00170c:	10002c28 	.word	0x10002c28

1a001710 <prvGetNextExpireTime>:
1a001710:	4b06      	ldr	r3, [pc, #24]	; (1a00172c <prvGetNextExpireTime+0x1c>)
1a001712:	681a      	ldr	r2, [r3, #0]
1a001714:	6813      	ldr	r3, [r2, #0]
1a001716:	fab3 f383 	clz	r3, r3
1a00171a:	095b      	lsrs	r3, r3, #5
1a00171c:	6003      	str	r3, [r0, #0]
1a00171e:	b913      	cbnz	r3, 1a001726 <prvGetNextExpireTime+0x16>
1a001720:	68d3      	ldr	r3, [r2, #12]
1a001722:	6818      	ldr	r0, [r3, #0]
1a001724:	4770      	bx	lr
1a001726:	2000      	movs	r0, #0
1a001728:	4770      	bx	lr
1a00172a:	bf00      	nop
1a00172c:	10002c30 	.word	0x10002c30

1a001730 <prvInsertTimerInActiveList>:
1a001730:	b510      	push	{r4, lr}
1a001732:	4604      	mov	r4, r0
1a001734:	6041      	str	r1, [r0, #4]
1a001736:	6120      	str	r0, [r4, #16]
1a001738:	4291      	cmp	r1, r2
1a00173a:	d80a      	bhi.n	1a001752 <prvInsertTimerInActiveList+0x22>
1a00173c:	1ad2      	subs	r2, r2, r3
1a00173e:	6983      	ldr	r3, [r0, #24]
1a001740:	429a      	cmp	r2, r3
1a001742:	d211      	bcs.n	1a001768 <prvInsertTimerInActiveList+0x38>
1a001744:	4b0a      	ldr	r3, [pc, #40]	; (1a001770 <prvInsertTimerInActiveList+0x40>)
1a001746:	6818      	ldr	r0, [r3, #0]
1a001748:	1d21      	adds	r1, r4, #4
1a00174a:	f7ff fa6f 	bl	1a000c2c <vListInsert>
1a00174e:	2000      	movs	r0, #0
1a001750:	bd10      	pop	{r4, pc}
1a001752:	429a      	cmp	r2, r3
1a001754:	d201      	bcs.n	1a00175a <prvInsertTimerInActiveList+0x2a>
1a001756:	4299      	cmp	r1, r3
1a001758:	d208      	bcs.n	1a00176c <prvInsertTimerInActiveList+0x3c>
1a00175a:	4b06      	ldr	r3, [pc, #24]	; (1a001774 <prvInsertTimerInActiveList+0x44>)
1a00175c:	6818      	ldr	r0, [r3, #0]
1a00175e:	1d21      	adds	r1, r4, #4
1a001760:	f7ff fa64 	bl	1a000c2c <vListInsert>
1a001764:	2000      	movs	r0, #0
1a001766:	bd10      	pop	{r4, pc}
1a001768:	2001      	movs	r0, #1
1a00176a:	bd10      	pop	{r4, pc}
1a00176c:	2001      	movs	r0, #1
1a00176e:	bd10      	pop	{r4, pc}
1a001770:	10002d54 	.word	0x10002d54
1a001774:	10002c30 	.word	0x10002c30

1a001778 <prvCheckForValidListAndQueue>:
1a001778:	b530      	push	{r4, r5, lr}
1a00177a:	b083      	sub	sp, #12
1a00177c:	f000 fa88 	bl	1a001c90 <vPortEnterCritical>
1a001780:	4b10      	ldr	r3, [pc, #64]	; (1a0017c4 <prvCheckForValidListAndQueue+0x4c>)
1a001782:	681b      	ldr	r3, [r3, #0]
1a001784:	b9cb      	cbnz	r3, 1a0017ba <prvCheckForValidListAndQueue+0x42>
1a001786:	4d10      	ldr	r5, [pc, #64]	; (1a0017c8 <prvCheckForValidListAndQueue+0x50>)
1a001788:	4628      	mov	r0, r5
1a00178a:	f7ff fa33 	bl	1a000bf4 <vListInitialise>
1a00178e:	4c0f      	ldr	r4, [pc, #60]	; (1a0017cc <prvCheckForValidListAndQueue+0x54>)
1a001790:	4620      	mov	r0, r4
1a001792:	f7ff fa2f 	bl	1a000bf4 <vListInitialise>
1a001796:	4b0e      	ldr	r3, [pc, #56]	; (1a0017d0 <prvCheckForValidListAndQueue+0x58>)
1a001798:	601d      	str	r5, [r3, #0]
1a00179a:	4b0e      	ldr	r3, [pc, #56]	; (1a0017d4 <prvCheckForValidListAndQueue+0x5c>)
1a00179c:	601c      	str	r4, [r3, #0]
1a00179e:	2300      	movs	r3, #0
1a0017a0:	9300      	str	r3, [sp, #0]
1a0017a2:	200a      	movs	r0, #10
1a0017a4:	2110      	movs	r1, #16
1a0017a6:	4a0c      	ldr	r2, [pc, #48]	; (1a0017d8 <prvCheckForValidListAndQueue+0x60>)
1a0017a8:	4b0c      	ldr	r3, [pc, #48]	; (1a0017dc <prvCheckForValidListAndQueue+0x64>)
1a0017aa:	f7fe ffad 	bl	1a000708 <xQueueGenericCreateStatic>
1a0017ae:	4b05      	ldr	r3, [pc, #20]	; (1a0017c4 <prvCheckForValidListAndQueue+0x4c>)
1a0017b0:	6018      	str	r0, [r3, #0]
1a0017b2:	b110      	cbz	r0, 1a0017ba <prvCheckForValidListAndQueue+0x42>
1a0017b4:	490a      	ldr	r1, [pc, #40]	; (1a0017e0 <prvCheckForValidListAndQueue+0x68>)
1a0017b6:	f7ff f9e3 	bl	1a000b80 <vQueueAddToRegistry>
1a0017ba:	f000 fa8b 	bl	1a001cd4 <vPortExitCritical>
1a0017be:	b003      	add	sp, #12
1a0017c0:	bd30      	pop	{r4, r5, pc}
1a0017c2:	bf00      	nop
1a0017c4:	10002d50 	.word	0x10002d50
1a0017c8:	10002c34 	.word	0x10002c34
1a0017cc:	10002c48 	.word	0x10002c48
1a0017d0:	10002c30 	.word	0x10002c30
1a0017d4:	10002d54 	.word	0x10002d54
1a0017d8:	10002c5c 	.word	0x10002c5c
1a0017dc:	10002d00 	.word	0x10002d00
1a0017e0:	1a004138 	.word	0x1a004138

1a0017e4 <prvInitialiseNewTimer>:
1a0017e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0017e8:	9c07      	ldr	r4, [sp, #28]
1a0017ea:	b941      	cbnz	r1, 1a0017fe <prvInitialiseNewTimer+0x1a>
1a0017ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017f0:	f383 8811 	msr	BASEPRI, r3
1a0017f4:	f3bf 8f6f 	isb	sy
1a0017f8:	f3bf 8f4f 	dsb	sy
1a0017fc:	e7fe      	b.n	1a0017fc <prvInitialiseNewTimer+0x18>
1a0017fe:	460f      	mov	r7, r1
1a001800:	b174      	cbz	r4, 1a001820 <prvInitialiseNewTimer+0x3c>
1a001802:	461d      	mov	r5, r3
1a001804:	4616      	mov	r6, r2
1a001806:	4680      	mov	r8, r0
1a001808:	f7ff ffb6 	bl	1a001778 <prvCheckForValidListAndQueue>
1a00180c:	f8c4 8000 	str.w	r8, [r4]
1a001810:	61a7      	str	r7, [r4, #24]
1a001812:	61e6      	str	r6, [r4, #28]
1a001814:	6225      	str	r5, [r4, #32]
1a001816:	9b06      	ldr	r3, [sp, #24]
1a001818:	6263      	str	r3, [r4, #36]	; 0x24
1a00181a:	1d20      	adds	r0, r4, #4
1a00181c:	f7ff f9f6 	bl	1a000c0c <vListInitialiseItem>
1a001820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a001824 <xTimerCreateTimerTask>:
1a001824:	b510      	push	{r4, lr}
1a001826:	b088      	sub	sp, #32
1a001828:	f7ff ffa6 	bl	1a001778 <prvCheckForValidListAndQueue>
1a00182c:	4b15      	ldr	r3, [pc, #84]	; (1a001884 <xTimerCreateTimerTask+0x60>)
1a00182e:	681b      	ldr	r3, [r3, #0]
1a001830:	b1d3      	cbz	r3, 1a001868 <xTimerCreateTimerTask+0x44>
1a001832:	2400      	movs	r4, #0
1a001834:	9405      	str	r4, [sp, #20]
1a001836:	9406      	str	r4, [sp, #24]
1a001838:	a805      	add	r0, sp, #20
1a00183a:	a906      	add	r1, sp, #24
1a00183c:	aa07      	add	r2, sp, #28
1a00183e:	f7ff fa2f 	bl	1a000ca0 <vApplicationGetTimerTaskMemory>
1a001842:	2304      	movs	r3, #4
1a001844:	9300      	str	r3, [sp, #0]
1a001846:	9b06      	ldr	r3, [sp, #24]
1a001848:	9301      	str	r3, [sp, #4]
1a00184a:	9b05      	ldr	r3, [sp, #20]
1a00184c:	9302      	str	r3, [sp, #8]
1a00184e:	480e      	ldr	r0, [pc, #56]	; (1a001888 <xTimerCreateTimerTask+0x64>)
1a001850:	490e      	ldr	r1, [pc, #56]	; (1a00188c <xTimerCreateTimerTask+0x68>)
1a001852:	9a07      	ldr	r2, [sp, #28]
1a001854:	4623      	mov	r3, r4
1a001856:	f7ff fbbd 	bl	1a000fd4 <xTaskCreateStatic>
1a00185a:	4b0d      	ldr	r3, [pc, #52]	; (1a001890 <xTimerCreateTimerTask+0x6c>)
1a00185c:	6018      	str	r0, [r3, #0]
1a00185e:	b908      	cbnz	r0, 1a001864 <xTimerCreateTimerTask+0x40>
1a001860:	4620      	mov	r0, r4
1a001862:	e002      	b.n	1a00186a <xTimerCreateTimerTask+0x46>
1a001864:	2001      	movs	r0, #1
1a001866:	e000      	b.n	1a00186a <xTimerCreateTimerTask+0x46>
1a001868:	2000      	movs	r0, #0
1a00186a:	b940      	cbnz	r0, 1a00187e <xTimerCreateTimerTask+0x5a>
1a00186c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001870:	f383 8811 	msr	BASEPRI, r3
1a001874:	f3bf 8f6f 	isb	sy
1a001878:	f3bf 8f4f 	dsb	sy
1a00187c:	e7fe      	b.n	1a00187c <xTimerCreateTimerTask+0x58>
1a00187e:	b008      	add	sp, #32
1a001880:	bd10      	pop	{r4, pc}
1a001882:	bf00      	nop
1a001884:	10002d50 	.word	0x10002d50
1a001888:	1a001b99 	.word	0x1a001b99
1a00188c:	1a004140 	.word	0x1a004140
1a001890:	10002d58 	.word	0x10002d58

1a001894 <xTimerCreateStatic>:
1a001894:	b530      	push	{r4, r5, lr}
1a001896:	b085      	sub	sp, #20
1a001898:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a00189a:	2530      	movs	r5, #48	; 0x30
1a00189c:	9503      	str	r5, [sp, #12]
1a00189e:	9d03      	ldr	r5, [sp, #12]
1a0018a0:	2d30      	cmp	r5, #48	; 0x30
1a0018a2:	d008      	beq.n	1a0018b6 <xTimerCreateStatic+0x22>
1a0018a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018a8:	f383 8811 	msr	BASEPRI, r3
1a0018ac:	f3bf 8f6f 	isb	sy
1a0018b0:	f3bf 8f4f 	dsb	sy
1a0018b4:	e7fe      	b.n	1a0018b4 <xTimerCreateStatic+0x20>
1a0018b6:	b944      	cbnz	r4, 1a0018ca <xTimerCreateStatic+0x36>
1a0018b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018bc:	f383 8811 	msr	BASEPRI, r3
1a0018c0:	f3bf 8f6f 	isb	sy
1a0018c4:	f3bf 8f4f 	dsb	sy
1a0018c8:	e7fe      	b.n	1a0018c8 <xTimerCreateStatic+0x34>
1a0018ca:	b13c      	cbz	r4, 1a0018dc <xTimerCreateStatic+0x48>
1a0018cc:	9d08      	ldr	r5, [sp, #32]
1a0018ce:	9500      	str	r5, [sp, #0]
1a0018d0:	9401      	str	r4, [sp, #4]
1a0018d2:	f7ff ff87 	bl	1a0017e4 <prvInitialiseNewTimer>
1a0018d6:	2301      	movs	r3, #1
1a0018d8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
1a0018dc:	4620      	mov	r0, r4
1a0018de:	b005      	add	sp, #20
1a0018e0:	bd30      	pop	{r4, r5, pc}
1a0018e2:	bf00      	nop

1a0018e4 <xTimerGenericCommand>:
1a0018e4:	b940      	cbnz	r0, 1a0018f8 <xTimerGenericCommand+0x14>
1a0018e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018ea:	f383 8811 	msr	BASEPRI, r3
1a0018ee:	f3bf 8f6f 	isb	sy
1a0018f2:	f3bf 8f4f 	dsb	sy
1a0018f6:	e7fe      	b.n	1a0018f6 <xTimerGenericCommand+0x12>
1a0018f8:	b530      	push	{r4, r5, lr}
1a0018fa:	b085      	sub	sp, #20
1a0018fc:	4615      	mov	r5, r2
1a0018fe:	4604      	mov	r4, r0
1a001900:	4a12      	ldr	r2, [pc, #72]	; (1a00194c <xTimerGenericCommand+0x68>)
1a001902:	6810      	ldr	r0, [r2, #0]
1a001904:	b1f0      	cbz	r0, 1a001944 <xTimerGenericCommand+0x60>
1a001906:	461a      	mov	r2, r3
1a001908:	9100      	str	r1, [sp, #0]
1a00190a:	9501      	str	r5, [sp, #4]
1a00190c:	9402      	str	r4, [sp, #8]
1a00190e:	2905      	cmp	r1, #5
1a001910:	dc13      	bgt.n	1a00193a <xTimerGenericCommand+0x56>
1a001912:	f7ff fe93 	bl	1a00163c <xTaskGetSchedulerState>
1a001916:	2802      	cmp	r0, #2
1a001918:	d107      	bne.n	1a00192a <xTimerGenericCommand+0x46>
1a00191a:	4b0c      	ldr	r3, [pc, #48]	; (1a00194c <xTimerGenericCommand+0x68>)
1a00191c:	6818      	ldr	r0, [r3, #0]
1a00191e:	4669      	mov	r1, sp
1a001920:	9a08      	ldr	r2, [sp, #32]
1a001922:	2300      	movs	r3, #0
1a001924:	f7fe ff46 	bl	1a0007b4 <xQueueGenericSend>
1a001928:	e00d      	b.n	1a001946 <xTimerGenericCommand+0x62>
1a00192a:	4b08      	ldr	r3, [pc, #32]	; (1a00194c <xTimerGenericCommand+0x68>)
1a00192c:	6818      	ldr	r0, [r3, #0]
1a00192e:	4669      	mov	r1, sp
1a001930:	2200      	movs	r2, #0
1a001932:	4613      	mov	r3, r2
1a001934:	f7fe ff3e 	bl	1a0007b4 <xQueueGenericSend>
1a001938:	e005      	b.n	1a001946 <xTimerGenericCommand+0x62>
1a00193a:	4669      	mov	r1, sp
1a00193c:	2300      	movs	r3, #0
1a00193e:	f7ff f801 	bl	1a000944 <xQueueGenericSendFromISR>
1a001942:	e000      	b.n	1a001946 <xTimerGenericCommand+0x62>
1a001944:	2000      	movs	r0, #0
1a001946:	b005      	add	sp, #20
1a001948:	bd30      	pop	{r4, r5, pc}
1a00194a:	bf00      	nop
1a00194c:	10002d50 	.word	0x10002d50

1a001950 <prvSwitchTimerLists>:
1a001950:	b570      	push	{r4, r5, r6, lr}
1a001952:	b082      	sub	sp, #8
1a001954:	e029      	b.n	1a0019aa <prvSwitchTimerLists+0x5a>
1a001956:	68db      	ldr	r3, [r3, #12]
1a001958:	681e      	ldr	r6, [r3, #0]
1a00195a:	68dc      	ldr	r4, [r3, #12]
1a00195c:	1d25      	adds	r5, r4, #4
1a00195e:	4628      	mov	r0, r5
1a001960:	f7ff f97e 	bl	1a000c60 <uxListRemove>
1a001964:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001966:	4620      	mov	r0, r4
1a001968:	4798      	blx	r3
1a00196a:	69e3      	ldr	r3, [r4, #28]
1a00196c:	2b01      	cmp	r3, #1
1a00196e:	d11c      	bne.n	1a0019aa <prvSwitchTimerLists+0x5a>
1a001970:	69a3      	ldr	r3, [r4, #24]
1a001972:	4433      	add	r3, r6
1a001974:	42b3      	cmp	r3, r6
1a001976:	d907      	bls.n	1a001988 <prvSwitchTimerLists+0x38>
1a001978:	6063      	str	r3, [r4, #4]
1a00197a:	6124      	str	r4, [r4, #16]
1a00197c:	4b11      	ldr	r3, [pc, #68]	; (1a0019c4 <prvSwitchTimerLists+0x74>)
1a00197e:	6818      	ldr	r0, [r3, #0]
1a001980:	4629      	mov	r1, r5
1a001982:	f7ff f953 	bl	1a000c2c <vListInsert>
1a001986:	e010      	b.n	1a0019aa <prvSwitchTimerLists+0x5a>
1a001988:	2300      	movs	r3, #0
1a00198a:	9300      	str	r3, [sp, #0]
1a00198c:	4620      	mov	r0, r4
1a00198e:	4619      	mov	r1, r3
1a001990:	4632      	mov	r2, r6
1a001992:	f7ff ffa7 	bl	1a0018e4 <xTimerGenericCommand>
1a001996:	b940      	cbnz	r0, 1a0019aa <prvSwitchTimerLists+0x5a>
1a001998:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00199c:	f383 8811 	msr	BASEPRI, r3
1a0019a0:	f3bf 8f6f 	isb	sy
1a0019a4:	f3bf 8f4f 	dsb	sy
1a0019a8:	e7fe      	b.n	1a0019a8 <prvSwitchTimerLists+0x58>
1a0019aa:	4b06      	ldr	r3, [pc, #24]	; (1a0019c4 <prvSwitchTimerLists+0x74>)
1a0019ac:	681b      	ldr	r3, [r3, #0]
1a0019ae:	681a      	ldr	r2, [r3, #0]
1a0019b0:	2a00      	cmp	r2, #0
1a0019b2:	d1d0      	bne.n	1a001956 <prvSwitchTimerLists+0x6>
1a0019b4:	4a04      	ldr	r2, [pc, #16]	; (1a0019c8 <prvSwitchTimerLists+0x78>)
1a0019b6:	6810      	ldr	r0, [r2, #0]
1a0019b8:	4902      	ldr	r1, [pc, #8]	; (1a0019c4 <prvSwitchTimerLists+0x74>)
1a0019ba:	6008      	str	r0, [r1, #0]
1a0019bc:	6013      	str	r3, [r2, #0]
1a0019be:	b002      	add	sp, #8
1a0019c0:	bd70      	pop	{r4, r5, r6, pc}
1a0019c2:	bf00      	nop
1a0019c4:	10002c30 	.word	0x10002c30
1a0019c8:	10002d54 	.word	0x10002d54

1a0019cc <prvSampleTimeNow>:
1a0019cc:	b538      	push	{r3, r4, r5, lr}
1a0019ce:	4605      	mov	r5, r0
1a0019d0:	f7ff fbca 	bl	1a001168 <xTaskGetTickCount>
1a0019d4:	4604      	mov	r4, r0
1a0019d6:	4b07      	ldr	r3, [pc, #28]	; (1a0019f4 <prvSampleTimeNow+0x28>)
1a0019d8:	681b      	ldr	r3, [r3, #0]
1a0019da:	4298      	cmp	r0, r3
1a0019dc:	d204      	bcs.n	1a0019e8 <prvSampleTimeNow+0x1c>
1a0019de:	f7ff ffb7 	bl	1a001950 <prvSwitchTimerLists>
1a0019e2:	2301      	movs	r3, #1
1a0019e4:	602b      	str	r3, [r5, #0]
1a0019e6:	e001      	b.n	1a0019ec <prvSampleTimeNow+0x20>
1a0019e8:	2300      	movs	r3, #0
1a0019ea:	602b      	str	r3, [r5, #0]
1a0019ec:	4b01      	ldr	r3, [pc, #4]	; (1a0019f4 <prvSampleTimeNow+0x28>)
1a0019ee:	601c      	str	r4, [r3, #0]
1a0019f0:	4620      	mov	r0, r4
1a0019f2:	bd38      	pop	{r3, r4, r5, pc}
1a0019f4:	10002cfc 	.word	0x10002cfc

1a0019f8 <prvProcessExpiredTimer>:
1a0019f8:	b570      	push	{r4, r5, r6, lr}
1a0019fa:	b082      	sub	sp, #8
1a0019fc:	4605      	mov	r5, r0
1a0019fe:	460e      	mov	r6, r1
1a001a00:	4b13      	ldr	r3, [pc, #76]	; (1a001a50 <prvProcessExpiredTimer+0x58>)
1a001a02:	681b      	ldr	r3, [r3, #0]
1a001a04:	68db      	ldr	r3, [r3, #12]
1a001a06:	68dc      	ldr	r4, [r3, #12]
1a001a08:	1d20      	adds	r0, r4, #4
1a001a0a:	f7ff f929 	bl	1a000c60 <uxListRemove>
1a001a0e:	69e3      	ldr	r3, [r4, #28]
1a001a10:	2b01      	cmp	r3, #1
1a001a12:	d118      	bne.n	1a001a46 <prvProcessExpiredTimer+0x4e>
1a001a14:	69a1      	ldr	r1, [r4, #24]
1a001a16:	4620      	mov	r0, r4
1a001a18:	4429      	add	r1, r5
1a001a1a:	4632      	mov	r2, r6
1a001a1c:	462b      	mov	r3, r5
1a001a1e:	f7ff fe87 	bl	1a001730 <prvInsertTimerInActiveList>
1a001a22:	b180      	cbz	r0, 1a001a46 <prvProcessExpiredTimer+0x4e>
1a001a24:	2300      	movs	r3, #0
1a001a26:	9300      	str	r3, [sp, #0]
1a001a28:	4620      	mov	r0, r4
1a001a2a:	4619      	mov	r1, r3
1a001a2c:	462a      	mov	r2, r5
1a001a2e:	f7ff ff59 	bl	1a0018e4 <xTimerGenericCommand>
1a001a32:	b940      	cbnz	r0, 1a001a46 <prvProcessExpiredTimer+0x4e>
1a001a34:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a38:	f383 8811 	msr	BASEPRI, r3
1a001a3c:	f3bf 8f6f 	isb	sy
1a001a40:	f3bf 8f4f 	dsb	sy
1a001a44:	e7fe      	b.n	1a001a44 <prvProcessExpiredTimer+0x4c>
1a001a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001a48:	4620      	mov	r0, r4
1a001a4a:	4798      	blx	r3
1a001a4c:	b002      	add	sp, #8
1a001a4e:	bd70      	pop	{r4, r5, r6, pc}
1a001a50:	10002c30 	.word	0x10002c30

1a001a54 <prvProcessTimerOrBlockTask>:
1a001a54:	b570      	push	{r4, r5, r6, lr}
1a001a56:	b082      	sub	sp, #8
1a001a58:	4606      	mov	r6, r0
1a001a5a:	460c      	mov	r4, r1
1a001a5c:	f7ff fb7c 	bl	1a001158 <vTaskSuspendAll>
1a001a60:	a801      	add	r0, sp, #4
1a001a62:	f7ff ffb3 	bl	1a0019cc <prvSampleTimeNow>
1a001a66:	9b01      	ldr	r3, [sp, #4]
1a001a68:	bb1b      	cbnz	r3, 1a001ab2 <prvProcessTimerOrBlockTask+0x5e>
1a001a6a:	4605      	mov	r5, r0
1a001a6c:	b944      	cbnz	r4, 1a001a80 <prvProcessTimerOrBlockTask+0x2c>
1a001a6e:	4286      	cmp	r6, r0
1a001a70:	d806      	bhi.n	1a001a80 <prvProcessTimerOrBlockTask+0x2c>
1a001a72:	f7ff fc11 	bl	1a001298 <xTaskResumeAll>
1a001a76:	4630      	mov	r0, r6
1a001a78:	4629      	mov	r1, r5
1a001a7a:	f7ff ffbd 	bl	1a0019f8 <prvProcessExpiredTimer>
1a001a7e:	e01a      	b.n	1a001ab6 <prvProcessTimerOrBlockTask+0x62>
1a001a80:	b12c      	cbz	r4, 1a001a8e <prvProcessTimerOrBlockTask+0x3a>
1a001a82:	4b0e      	ldr	r3, [pc, #56]	; (1a001abc <prvProcessTimerOrBlockTask+0x68>)
1a001a84:	681b      	ldr	r3, [r3, #0]
1a001a86:	681c      	ldr	r4, [r3, #0]
1a001a88:	fab4 f484 	clz	r4, r4
1a001a8c:	0964      	lsrs	r4, r4, #5
1a001a8e:	4b0c      	ldr	r3, [pc, #48]	; (1a001ac0 <prvProcessTimerOrBlockTask+0x6c>)
1a001a90:	6818      	ldr	r0, [r3, #0]
1a001a92:	1b71      	subs	r1, r6, r5
1a001a94:	4622      	mov	r2, r4
1a001a96:	f7ff f887 	bl	1a000ba8 <vQueueWaitForMessageRestricted>
1a001a9a:	f7ff fbfd 	bl	1a001298 <xTaskResumeAll>
1a001a9e:	b950      	cbnz	r0, 1a001ab6 <prvProcessTimerOrBlockTask+0x62>
1a001aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001aa4:	4b07      	ldr	r3, [pc, #28]	; (1a001ac4 <prvProcessTimerOrBlockTask+0x70>)
1a001aa6:	601a      	str	r2, [r3, #0]
1a001aa8:	f3bf 8f4f 	dsb	sy
1a001aac:	f3bf 8f6f 	isb	sy
1a001ab0:	e001      	b.n	1a001ab6 <prvProcessTimerOrBlockTask+0x62>
1a001ab2:	f7ff fbf1 	bl	1a001298 <xTaskResumeAll>
1a001ab6:	b002      	add	sp, #8
1a001ab8:	bd70      	pop	{r4, r5, r6, pc}
1a001aba:	bf00      	nop
1a001abc:	10002d54 	.word	0x10002d54
1a001ac0:	10002d50 	.word	0x10002d50
1a001ac4:	e000ed04 	.word	0xe000ed04

1a001ac8 <prvProcessReceivedCommands>:
1a001ac8:	b530      	push	{r4, r5, lr}
1a001aca:	b089      	sub	sp, #36	; 0x24
1a001acc:	e057      	b.n	1a001b7e <prvProcessReceivedCommands+0xb6>
1a001ace:	9b04      	ldr	r3, [sp, #16]
1a001ad0:	2b00      	cmp	r3, #0
1a001ad2:	da03      	bge.n	1a001adc <prvProcessReceivedCommands+0x14>
1a001ad4:	9806      	ldr	r0, [sp, #24]
1a001ad6:	9907      	ldr	r1, [sp, #28]
1a001ad8:	9b05      	ldr	r3, [sp, #20]
1a001ada:	4798      	blx	r3
1a001adc:	9b04      	ldr	r3, [sp, #16]
1a001ade:	2b00      	cmp	r3, #0
1a001ae0:	db4d      	blt.n	1a001b7e <prvProcessReceivedCommands+0xb6>
1a001ae2:	9c06      	ldr	r4, [sp, #24]
1a001ae4:	6963      	ldr	r3, [r4, #20]
1a001ae6:	b113      	cbz	r3, 1a001aee <prvProcessReceivedCommands+0x26>
1a001ae8:	1d20      	adds	r0, r4, #4
1a001aea:	f7ff f8b9 	bl	1a000c60 <uxListRemove>
1a001aee:	a803      	add	r0, sp, #12
1a001af0:	f7ff ff6c 	bl	1a0019cc <prvSampleTimeNow>
1a001af4:	4603      	mov	r3, r0
1a001af6:	9a04      	ldr	r2, [sp, #16]
1a001af8:	2a09      	cmp	r2, #9
1a001afa:	d840      	bhi.n	1a001b7e <prvProcessReceivedCommands+0xb6>
1a001afc:	e8df f002 	tbb	[pc, r2]
1a001b00:	3f050505 	.word	0x3f050505
1a001b04:	05053927 	.word	0x05053927
1a001b08:	273f      	.short	0x273f
1a001b0a:	9d05      	ldr	r5, [sp, #20]
1a001b0c:	69a1      	ldr	r1, [r4, #24]
1a001b0e:	4620      	mov	r0, r4
1a001b10:	4429      	add	r1, r5
1a001b12:	461a      	mov	r2, r3
1a001b14:	462b      	mov	r3, r5
1a001b16:	f7ff fe0b 	bl	1a001730 <prvInsertTimerInActiveList>
1a001b1a:	b380      	cbz	r0, 1a001b7e <prvProcessReceivedCommands+0xb6>
1a001b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001b1e:	4620      	mov	r0, r4
1a001b20:	4798      	blx	r3
1a001b22:	69e3      	ldr	r3, [r4, #28]
1a001b24:	2b01      	cmp	r3, #1
1a001b26:	d12a      	bne.n	1a001b7e <prvProcessReceivedCommands+0xb6>
1a001b28:	69a2      	ldr	r2, [r4, #24]
1a001b2a:	2300      	movs	r3, #0
1a001b2c:	9300      	str	r3, [sp, #0]
1a001b2e:	4620      	mov	r0, r4
1a001b30:	4619      	mov	r1, r3
1a001b32:	9c05      	ldr	r4, [sp, #20]
1a001b34:	4422      	add	r2, r4
1a001b36:	f7ff fed5 	bl	1a0018e4 <xTimerGenericCommand>
1a001b3a:	bb00      	cbnz	r0, 1a001b7e <prvProcessReceivedCommands+0xb6>
1a001b3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b40:	f383 8811 	msr	BASEPRI, r3
1a001b44:	f3bf 8f6f 	isb	sy
1a001b48:	f3bf 8f4f 	dsb	sy
1a001b4c:	e7fe      	b.n	1a001b4c <prvProcessReceivedCommands+0x84>
1a001b4e:	9905      	ldr	r1, [sp, #20]
1a001b50:	61a1      	str	r1, [r4, #24]
1a001b52:	b941      	cbnz	r1, 1a001b66 <prvProcessReceivedCommands+0x9e>
1a001b54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b58:	f383 8811 	msr	BASEPRI, r3
1a001b5c:	f3bf 8f6f 	isb	sy
1a001b60:	f3bf 8f4f 	dsb	sy
1a001b64:	e7fe      	b.n	1a001b64 <prvProcessReceivedCommands+0x9c>
1a001b66:	4620      	mov	r0, r4
1a001b68:	4419      	add	r1, r3
1a001b6a:	461a      	mov	r2, r3
1a001b6c:	f7ff fde0 	bl	1a001730 <prvInsertTimerInActiveList>
1a001b70:	e005      	b.n	1a001b7e <prvProcessReceivedCommands+0xb6>
1a001b72:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a001b76:	b913      	cbnz	r3, 1a001b7e <prvProcessReceivedCommands+0xb6>
1a001b78:	4620      	mov	r0, r4
1a001b7a:	f7fe fcc5 	bl	1a000508 <vPortFree>
1a001b7e:	4b05      	ldr	r3, [pc, #20]	; (1a001b94 <prvProcessReceivedCommands+0xcc>)
1a001b80:	6818      	ldr	r0, [r3, #0]
1a001b82:	a904      	add	r1, sp, #16
1a001b84:	2200      	movs	r2, #0
1a001b86:	f7fe ff4f 	bl	1a000a28 <xQueueReceive>
1a001b8a:	2800      	cmp	r0, #0
1a001b8c:	d19f      	bne.n	1a001ace <prvProcessReceivedCommands+0x6>
1a001b8e:	b009      	add	sp, #36	; 0x24
1a001b90:	bd30      	pop	{r4, r5, pc}
1a001b92:	bf00      	nop
1a001b94:	10002d50 	.word	0x10002d50

1a001b98 <prvTimerTask>:
1a001b98:	b500      	push	{lr}
1a001b9a:	b083      	sub	sp, #12
1a001b9c:	a801      	add	r0, sp, #4
1a001b9e:	f7ff fdb7 	bl	1a001710 <prvGetNextExpireTime>
1a001ba2:	9901      	ldr	r1, [sp, #4]
1a001ba4:	f7ff ff56 	bl	1a001a54 <prvProcessTimerOrBlockTask>
1a001ba8:	f7ff ff8e 	bl	1a001ac8 <prvProcessReceivedCommands>
1a001bac:	e7f6      	b.n	1a001b9c <prvTimerTask+0x4>
1a001bae:	bf00      	nop

1a001bb0 <prvTaskExitError>:
1a001bb0:	b082      	sub	sp, #8
1a001bb2:	2300      	movs	r3, #0
1a001bb4:	9301      	str	r3, [sp, #4]
1a001bb6:	4b0d      	ldr	r3, [pc, #52]	; (1a001bec <prvTaskExitError+0x3c>)
1a001bb8:	681b      	ldr	r3, [r3, #0]
1a001bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001bbe:	d008      	beq.n	1a001bd2 <prvTaskExitError+0x22>
1a001bc0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bc4:	f383 8811 	msr	BASEPRI, r3
1a001bc8:	f3bf 8f6f 	isb	sy
1a001bcc:	f3bf 8f4f 	dsb	sy
1a001bd0:	e7fe      	b.n	1a001bd0 <prvTaskExitError+0x20>
1a001bd2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bd6:	f383 8811 	msr	BASEPRI, r3
1a001bda:	f3bf 8f6f 	isb	sy
1a001bde:	f3bf 8f4f 	dsb	sy
1a001be2:	9b01      	ldr	r3, [sp, #4]
1a001be4:	2b00      	cmp	r3, #0
1a001be6:	d0fc      	beq.n	1a001be2 <prvTaskExitError+0x32>
1a001be8:	b002      	add	sp, #8
1a001bea:	4770      	bx	lr
1a001bec:	10000000 	.word	0x10000000

1a001bf0 <prvPortStartFirstTask>:
1a001bf0:	4808      	ldr	r0, [pc, #32]	; (1a001c14 <prvPortStartFirstTask+0x24>)
1a001bf2:	6800      	ldr	r0, [r0, #0]
1a001bf4:	6800      	ldr	r0, [r0, #0]
1a001bf6:	f380 8808 	msr	MSP, r0
1a001bfa:	f04f 0000 	mov.w	r0, #0
1a001bfe:	f380 8814 	msr	CONTROL, r0
1a001c02:	b662      	cpsie	i
1a001c04:	b661      	cpsie	f
1a001c06:	f3bf 8f4f 	dsb	sy
1a001c0a:	f3bf 8f6f 	isb	sy
1a001c0e:	df00      	svc	0
1a001c10:	bf00      	nop
1a001c12:	0000      	.short	0x0000
1a001c14:	e000ed08 	.word	0xe000ed08

1a001c18 <vPortEnableVFP>:
1a001c18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a001c28 <vPortEnableVFP+0x10>
1a001c1c:	6801      	ldr	r1, [r0, #0]
1a001c1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001c22:	6001      	str	r1, [r0, #0]
1a001c24:	4770      	bx	lr
1a001c26:	0000      	.short	0x0000
1a001c28:	e000ed88 	.word	0xe000ed88

1a001c2c <pxPortInitialiseStack>:
1a001c2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a001c30:	f840 3c04 	str.w	r3, [r0, #-4]
1a001c34:	f021 0101 	bic.w	r1, r1, #1
1a001c38:	f840 1c08 	str.w	r1, [r0, #-8]
1a001c3c:	4b05      	ldr	r3, [pc, #20]	; (1a001c54 <pxPortInitialiseStack+0x28>)
1a001c3e:	f840 3c0c 	str.w	r3, [r0, #-12]
1a001c42:	f840 2c20 	str.w	r2, [r0, #-32]
1a001c46:	f06f 0302 	mvn.w	r3, #2
1a001c4a:	f840 3c24 	str.w	r3, [r0, #-36]
1a001c4e:	3844      	subs	r0, #68	; 0x44
1a001c50:	4770      	bx	lr
1a001c52:	bf00      	nop
1a001c54:	1a001bb1 	.word	0x1a001bb1
1a001c58:	ffffffff 	.word	0xffffffff
1a001c5c:	ffffffff 	.word	0xffffffff

1a001c60 <SVC_Handler>:
1a001c60:	4b07      	ldr	r3, [pc, #28]	; (1a001c80 <pxCurrentTCBConst2>)
1a001c62:	6819      	ldr	r1, [r3, #0]
1a001c64:	6808      	ldr	r0, [r1, #0]
1a001c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001c6a:	f380 8809 	msr	PSP, r0
1a001c6e:	f3bf 8f6f 	isb	sy
1a001c72:	f04f 0000 	mov.w	r0, #0
1a001c76:	f380 8811 	msr	BASEPRI, r0
1a001c7a:	4770      	bx	lr
1a001c7c:	f3af 8000 	nop.w

1a001c80 <pxCurrentTCBConst2>:
1a001c80:	10002bc4 	.word	0x10002bc4
1a001c84:	f3af 8000 	nop.w
1a001c88:	f3af 8000 	nop.w
1a001c8c:	f3af 8000 	nop.w

1a001c90 <vPortEnterCritical>:
1a001c90:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c94:	f383 8811 	msr	BASEPRI, r3
1a001c98:	f3bf 8f6f 	isb	sy
1a001c9c:	f3bf 8f4f 	dsb	sy
1a001ca0:	4a0a      	ldr	r2, [pc, #40]	; (1a001ccc <vPortEnterCritical+0x3c>)
1a001ca2:	6813      	ldr	r3, [r2, #0]
1a001ca4:	3301      	adds	r3, #1
1a001ca6:	6013      	str	r3, [r2, #0]
1a001ca8:	2b01      	cmp	r3, #1
1a001caa:	d10d      	bne.n	1a001cc8 <vPortEnterCritical+0x38>
1a001cac:	4b08      	ldr	r3, [pc, #32]	; (1a001cd0 <vPortEnterCritical+0x40>)
1a001cae:	681b      	ldr	r3, [r3, #0]
1a001cb0:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001cb4:	d008      	beq.n	1a001cc8 <vPortEnterCritical+0x38>
1a001cb6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cba:	f383 8811 	msr	BASEPRI, r3
1a001cbe:	f3bf 8f6f 	isb	sy
1a001cc2:	f3bf 8f4f 	dsb	sy
1a001cc6:	e7fe      	b.n	1a001cc6 <vPortEnterCritical+0x36>
1a001cc8:	4770      	bx	lr
1a001cca:	bf00      	nop
1a001ccc:	10000000 	.word	0x10000000
1a001cd0:	e000ed04 	.word	0xe000ed04

1a001cd4 <vPortExitCritical>:
1a001cd4:	4b09      	ldr	r3, [pc, #36]	; (1a001cfc <vPortExitCritical+0x28>)
1a001cd6:	681b      	ldr	r3, [r3, #0]
1a001cd8:	b943      	cbnz	r3, 1a001cec <vPortExitCritical+0x18>
1a001cda:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cde:	f383 8811 	msr	BASEPRI, r3
1a001ce2:	f3bf 8f6f 	isb	sy
1a001ce6:	f3bf 8f4f 	dsb	sy
1a001cea:	e7fe      	b.n	1a001cea <vPortExitCritical+0x16>
1a001cec:	3b01      	subs	r3, #1
1a001cee:	4a03      	ldr	r2, [pc, #12]	; (1a001cfc <vPortExitCritical+0x28>)
1a001cf0:	6013      	str	r3, [r2, #0]
1a001cf2:	b90b      	cbnz	r3, 1a001cf8 <vPortExitCritical+0x24>
1a001cf4:	f383 8811 	msr	BASEPRI, r3
1a001cf8:	4770      	bx	lr
1a001cfa:	bf00      	nop
1a001cfc:	10000000 	.word	0x10000000

1a001d00 <PendSV_Handler>:
1a001d00:	f3ef 8009 	mrs	r0, PSP
1a001d04:	f3bf 8f6f 	isb	sy
1a001d08:	4b15      	ldr	r3, [pc, #84]	; (1a001d60 <pxCurrentTCBConst>)
1a001d0a:	681a      	ldr	r2, [r3, #0]
1a001d0c:	f01e 0f10 	tst.w	lr, #16
1a001d10:	bf08      	it	eq
1a001d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a001d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001d1a:	6010      	str	r0, [r2, #0]
1a001d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a001d20:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a001d24:	f380 8811 	msr	BASEPRI, r0
1a001d28:	f3bf 8f4f 	dsb	sy
1a001d2c:	f3bf 8f6f 	isb	sy
1a001d30:	f7ff fb56 	bl	1a0013e0 <vTaskSwitchContext>
1a001d34:	f04f 0000 	mov.w	r0, #0
1a001d38:	f380 8811 	msr	BASEPRI, r0
1a001d3c:	bc09      	pop	{r0, r3}
1a001d3e:	6819      	ldr	r1, [r3, #0]
1a001d40:	6808      	ldr	r0, [r1, #0]
1a001d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001d46:	f01e 0f10 	tst.w	lr, #16
1a001d4a:	bf08      	it	eq
1a001d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a001d50:	f380 8809 	msr	PSP, r0
1a001d54:	f3bf 8f6f 	isb	sy
1a001d58:	4770      	bx	lr
1a001d5a:	bf00      	nop
1a001d5c:	f3af 8000 	nop.w

1a001d60 <pxCurrentTCBConst>:
1a001d60:	10002bc4 	.word	0x10002bc4
1a001d64:	f3af 8000 	nop.w
1a001d68:	f3af 8000 	nop.w
1a001d6c:	f3af 8000 	nop.w

1a001d70 <SysTick_Handler>:
1a001d70:	b508      	push	{r3, lr}
1a001d72:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d76:	f383 8811 	msr	BASEPRI, r3
1a001d7a:	f3bf 8f6f 	isb	sy
1a001d7e:	f3bf 8f4f 	dsb	sy
1a001d82:	f7ff f9f7 	bl	1a001174 <xTaskIncrementTick>
1a001d86:	b118      	cbz	r0, 1a001d90 <SysTick_Handler+0x20>
1a001d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001d8c:	4b02      	ldr	r3, [pc, #8]	; (1a001d98 <SysTick_Handler+0x28>)
1a001d8e:	601a      	str	r2, [r3, #0]
1a001d90:	2300      	movs	r3, #0
1a001d92:	f383 8811 	msr	BASEPRI, r3
1a001d96:	bd08      	pop	{r3, pc}
1a001d98:	e000ed04 	.word	0xe000ed04

1a001d9c <vPortSetupTimerInterrupt>:
1a001d9c:	4a08      	ldr	r2, [pc, #32]	; (1a001dc0 <vPortSetupTimerInterrupt+0x24>)
1a001d9e:	2300      	movs	r3, #0
1a001da0:	6013      	str	r3, [r2, #0]
1a001da2:	4908      	ldr	r1, [pc, #32]	; (1a001dc4 <vPortSetupTimerInterrupt+0x28>)
1a001da4:	600b      	str	r3, [r1, #0]
1a001da6:	4b08      	ldr	r3, [pc, #32]	; (1a001dc8 <vPortSetupTimerInterrupt+0x2c>)
1a001da8:	681b      	ldr	r3, [r3, #0]
1a001daa:	4908      	ldr	r1, [pc, #32]	; (1a001dcc <vPortSetupTimerInterrupt+0x30>)
1a001dac:	fba1 1303 	umull	r1, r3, r1, r3
1a001db0:	099b      	lsrs	r3, r3, #6
1a001db2:	3b01      	subs	r3, #1
1a001db4:	4906      	ldr	r1, [pc, #24]	; (1a001dd0 <vPortSetupTimerInterrupt+0x34>)
1a001db6:	600b      	str	r3, [r1, #0]
1a001db8:	2307      	movs	r3, #7
1a001dba:	6013      	str	r3, [r2, #0]
1a001dbc:	4770      	bx	lr
1a001dbe:	bf00      	nop
1a001dc0:	e000e010 	.word	0xe000e010
1a001dc4:	e000e018 	.word	0xe000e018
1a001dc8:	10002e30 	.word	0x10002e30
1a001dcc:	10624dd3 	.word	0x10624dd3
1a001dd0:	e000e014 	.word	0xe000e014

1a001dd4 <xPortStartScheduler>:
1a001dd4:	4b40      	ldr	r3, [pc, #256]	; (1a001ed8 <xPortStartScheduler+0x104>)
1a001dd6:	681a      	ldr	r2, [r3, #0]
1a001dd8:	4b40      	ldr	r3, [pc, #256]	; (1a001edc <xPortStartScheduler+0x108>)
1a001dda:	429a      	cmp	r2, r3
1a001ddc:	d108      	bne.n	1a001df0 <xPortStartScheduler+0x1c>
1a001dde:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001de2:	f383 8811 	msr	BASEPRI, r3
1a001de6:	f3bf 8f6f 	isb	sy
1a001dea:	f3bf 8f4f 	dsb	sy
1a001dee:	e7fe      	b.n	1a001dee <xPortStartScheduler+0x1a>
1a001df0:	4b39      	ldr	r3, [pc, #228]	; (1a001ed8 <xPortStartScheduler+0x104>)
1a001df2:	681a      	ldr	r2, [r3, #0]
1a001df4:	4b3a      	ldr	r3, [pc, #232]	; (1a001ee0 <xPortStartScheduler+0x10c>)
1a001df6:	429a      	cmp	r2, r3
1a001df8:	d108      	bne.n	1a001e0c <xPortStartScheduler+0x38>
1a001dfa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dfe:	f383 8811 	msr	BASEPRI, r3
1a001e02:	f3bf 8f6f 	isb	sy
1a001e06:	f3bf 8f4f 	dsb	sy
1a001e0a:	e7fe      	b.n	1a001e0a <xPortStartScheduler+0x36>
1a001e0c:	b510      	push	{r4, lr}
1a001e0e:	b082      	sub	sp, #8
1a001e10:	4b34      	ldr	r3, [pc, #208]	; (1a001ee4 <xPortStartScheduler+0x110>)
1a001e12:	781a      	ldrb	r2, [r3, #0]
1a001e14:	b2d2      	uxtb	r2, r2
1a001e16:	9201      	str	r2, [sp, #4]
1a001e18:	22ff      	movs	r2, #255	; 0xff
1a001e1a:	701a      	strb	r2, [r3, #0]
1a001e1c:	781b      	ldrb	r3, [r3, #0]
1a001e1e:	b2db      	uxtb	r3, r3
1a001e20:	f88d 3003 	strb.w	r3, [sp, #3]
1a001e24:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001e28:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a001e2c:	4a2e      	ldr	r2, [pc, #184]	; (1a001ee8 <xPortStartScheduler+0x114>)
1a001e2e:	7013      	strb	r3, [r2, #0]
1a001e30:	2207      	movs	r2, #7
1a001e32:	4b2e      	ldr	r3, [pc, #184]	; (1a001eec <xPortStartScheduler+0x118>)
1a001e34:	601a      	str	r2, [r3, #0]
1a001e36:	e009      	b.n	1a001e4c <xPortStartScheduler+0x78>
1a001e38:	4a2c      	ldr	r2, [pc, #176]	; (1a001eec <xPortStartScheduler+0x118>)
1a001e3a:	6813      	ldr	r3, [r2, #0]
1a001e3c:	3b01      	subs	r3, #1
1a001e3e:	6013      	str	r3, [r2, #0]
1a001e40:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001e44:	005b      	lsls	r3, r3, #1
1a001e46:	b2db      	uxtb	r3, r3
1a001e48:	f88d 3003 	strb.w	r3, [sp, #3]
1a001e4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001e50:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001e54:	d1f0      	bne.n	1a001e38 <xPortStartScheduler+0x64>
1a001e56:	4b25      	ldr	r3, [pc, #148]	; (1a001eec <xPortStartScheduler+0x118>)
1a001e58:	681b      	ldr	r3, [r3, #0]
1a001e5a:	f1c3 0207 	rsb	r2, r3, #7
1a001e5e:	2a03      	cmp	r2, #3
1a001e60:	d008      	beq.n	1a001e74 <xPortStartScheduler+0xa0>
1a001e62:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e66:	f383 8811 	msr	BASEPRI, r3
1a001e6a:	f3bf 8f6f 	isb	sy
1a001e6e:	f3bf 8f4f 	dsb	sy
1a001e72:	e7fe      	b.n	1a001e72 <xPortStartScheduler+0x9e>
1a001e74:	2a03      	cmp	r2, #3
1a001e76:	d008      	beq.n	1a001e8a <xPortStartScheduler+0xb6>
1a001e78:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e7c:	f383 8811 	msr	BASEPRI, r3
1a001e80:	f3bf 8f6f 	isb	sy
1a001e84:	f3bf 8f4f 	dsb	sy
1a001e88:	e7fe      	b.n	1a001e88 <xPortStartScheduler+0xb4>
1a001e8a:	021b      	lsls	r3, r3, #8
1a001e8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a001e90:	4a16      	ldr	r2, [pc, #88]	; (1a001eec <xPortStartScheduler+0x118>)
1a001e92:	6013      	str	r3, [r2, #0]
1a001e94:	9b01      	ldr	r3, [sp, #4]
1a001e96:	b2db      	uxtb	r3, r3
1a001e98:	4a12      	ldr	r2, [pc, #72]	; (1a001ee4 <xPortStartScheduler+0x110>)
1a001e9a:	7013      	strb	r3, [r2, #0]
1a001e9c:	4b14      	ldr	r3, [pc, #80]	; (1a001ef0 <xPortStartScheduler+0x11c>)
1a001e9e:	681a      	ldr	r2, [r3, #0]
1a001ea0:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a001ea4:	601a      	str	r2, [r3, #0]
1a001ea6:	681a      	ldr	r2, [r3, #0]
1a001ea8:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a001eac:	601a      	str	r2, [r3, #0]
1a001eae:	f7ff ff75 	bl	1a001d9c <vPortSetupTimerInterrupt>
1a001eb2:	2400      	movs	r4, #0
1a001eb4:	4b0f      	ldr	r3, [pc, #60]	; (1a001ef4 <xPortStartScheduler+0x120>)
1a001eb6:	601c      	str	r4, [r3, #0]
1a001eb8:	f7ff feae 	bl	1a001c18 <vPortEnableVFP>
1a001ebc:	4a0e      	ldr	r2, [pc, #56]	; (1a001ef8 <xPortStartScheduler+0x124>)
1a001ebe:	6813      	ldr	r3, [r2, #0]
1a001ec0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a001ec4:	6013      	str	r3, [r2, #0]
1a001ec6:	f7ff fe93 	bl	1a001bf0 <prvPortStartFirstTask>
1a001eca:	f7ff fa89 	bl	1a0013e0 <vTaskSwitchContext>
1a001ece:	f7ff fe6f 	bl	1a001bb0 <prvTaskExitError>
1a001ed2:	4620      	mov	r0, r4
1a001ed4:	b002      	add	sp, #8
1a001ed6:	bd10      	pop	{r4, pc}
1a001ed8:	e000ed00 	.word	0xe000ed00
1a001edc:	410fc271 	.word	0x410fc271
1a001ee0:	410fc270 	.word	0x410fc270
1a001ee4:	e000e400 	.word	0xe000e400
1a001ee8:	10002d5c 	.word	0x10002d5c
1a001eec:	10002d60 	.word	0x10002d60
1a001ef0:	e000ed20 	.word	0xe000ed20
1a001ef4:	10000000 	.word	0x10000000
1a001ef8:	e000ef34 	.word	0xe000ef34

1a001efc <vPortValidateInterruptPriority>:
1a001efc:	f3ef 8305 	mrs	r3, IPSR
1a001f00:	2b0f      	cmp	r3, #15
1a001f02:	d90f      	bls.n	1a001f24 <vPortValidateInterruptPriority+0x28>
1a001f04:	4a10      	ldr	r2, [pc, #64]	; (1a001f48 <vPortValidateInterruptPriority+0x4c>)
1a001f06:	5c9b      	ldrb	r3, [r3, r2]
1a001f08:	b2db      	uxtb	r3, r3
1a001f0a:	4a10      	ldr	r2, [pc, #64]	; (1a001f4c <vPortValidateInterruptPriority+0x50>)
1a001f0c:	7812      	ldrb	r2, [r2, #0]
1a001f0e:	4293      	cmp	r3, r2
1a001f10:	d208      	bcs.n	1a001f24 <vPortValidateInterruptPriority+0x28>
1a001f12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f16:	f383 8811 	msr	BASEPRI, r3
1a001f1a:	f3bf 8f6f 	isb	sy
1a001f1e:	f3bf 8f4f 	dsb	sy
1a001f22:	e7fe      	b.n	1a001f22 <vPortValidateInterruptPriority+0x26>
1a001f24:	4b0a      	ldr	r3, [pc, #40]	; (1a001f50 <vPortValidateInterruptPriority+0x54>)
1a001f26:	681b      	ldr	r3, [r3, #0]
1a001f28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a001f2c:	4a09      	ldr	r2, [pc, #36]	; (1a001f54 <vPortValidateInterruptPriority+0x58>)
1a001f2e:	6812      	ldr	r2, [r2, #0]
1a001f30:	4293      	cmp	r3, r2
1a001f32:	d908      	bls.n	1a001f46 <vPortValidateInterruptPriority+0x4a>
1a001f34:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f38:	f383 8811 	msr	BASEPRI, r3
1a001f3c:	f3bf 8f6f 	isb	sy
1a001f40:	f3bf 8f4f 	dsb	sy
1a001f44:	e7fe      	b.n	1a001f44 <vPortValidateInterruptPriority+0x48>
1a001f46:	4770      	bx	lr
1a001f48:	e000e3f0 	.word	0xe000e3f0
1a001f4c:	10002d5c 	.word	0x10002d5c
1a001f50:	e000ed0c 	.word	0xe000ed0c
1a001f54:	10002d60 	.word	0x10002d60

1a001f58 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001f58:	4b04      	ldr	r3, [pc, #16]	; (1a001f6c <cyclesCounterInit+0x14>)
1a001f5a:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a001f5c:	4b04      	ldr	r3, [pc, #16]	; (1a001f70 <cyclesCounterInit+0x18>)
1a001f5e:	681a      	ldr	r2, [r3, #0]
1a001f60:	6813      	ldr	r3, [r2, #0]
1a001f62:	f043 0301 	orr.w	r3, r3, #1
1a001f66:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001f68:	2001      	movs	r0, #1
1a001f6a:	4770      	bx	lr
1a001f6c:	10000004 	.word	0x10000004
1a001f70:	10000008 	.word	0x10000008

1a001f74 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a001f74:	2301      	movs	r3, #1
1a001f76:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a001f7a:	4b01      	ldr	r3, [pc, #4]	; (1a001f80 <clearInterrupt+0xc>)
1a001f7c:	6258      	str	r0, [r3, #36]	; 0x24
}
1a001f7e:	4770      	bx	lr
1a001f80:	40087000 	.word	0x40087000

1a001f84 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a001f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a001f86:	4b12      	ldr	r3, [pc, #72]	; (1a001fd0 <serveInterrupt+0x4c>)
1a001f88:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a001f8a:	4b12      	ldr	r3, [pc, #72]	; (1a001fd4 <serveInterrupt+0x50>)
1a001f8c:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a001f8e:	2301      	movs	r3, #1
1a001f90:	4083      	lsls	r3, r0
1a001f92:	420b      	tst	r3, r1
1a001f94:	d111      	bne.n	1a001fba <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a001f96:	4910      	ldr	r1, [pc, #64]	; (1a001fd8 <serveInterrupt+0x54>)
1a001f98:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a001f9a:	4d10      	ldr	r5, [pc, #64]	; (1a001fdc <serveInterrupt+0x58>)
1a001f9c:	0051      	lsls	r1, r2, #1
1a001f9e:	188f      	adds	r7, r1, r2
1a001fa0:	00fc      	lsls	r4, r7, #3
1a001fa2:	4627      	mov	r7, r4
1a001fa4:	442c      	add	r4, r5
1a001fa6:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a001fa8:	6864      	ldr	r4, [r4, #4]
1a001faa:	1b36      	subs	r6, r6, r4
1a001fac:	443d      	add	r5, r7
1a001fae:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a001fb0:	4a08      	ldr	r2, [pc, #32]	; (1a001fd4 <serveInterrupt+0x50>)
1a001fb2:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a001fb4:	f7ff ffde 	bl	1a001f74 <clearInterrupt>
}
1a001fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001fba:	4907      	ldr	r1, [pc, #28]	; (1a001fd8 <serveInterrupt+0x54>)
1a001fbc:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a001fbe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a001fc2:	00d1      	lsls	r1, r2, #3
1a001fc4:	4a05      	ldr	r2, [pc, #20]	; (1a001fdc <serveInterrupt+0x58>)
1a001fc6:	440a      	add	r2, r1
1a001fc8:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a001fca:	4a02      	ldr	r2, [pc, #8]	; (1a001fd4 <serveInterrupt+0x50>)
1a001fcc:	61d3      	str	r3, [r2, #28]
1a001fce:	e7f1      	b.n	1a001fb4 <serveInterrupt+0x30>
1a001fd0:	1a004148 	.word	0x1a004148
1a001fd4:	40087000 	.word	0x40087000
1a001fd8:	40084000 	.word	0x40084000
1a001fdc:	1000000c 	.word	0x1000000c

1a001fe0 <GPIO0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
void GPIO0_IRQHandler(void)
{
1a001fe0:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a001fe2:	2000      	movs	r0, #0
1a001fe4:	f7ff ffce 	bl	1a001f84 <serveInterrupt>
}
1a001fe8:	bd08      	pop	{r3, pc}

1a001fea <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a001fea:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a001fec:	2001      	movs	r0, #1
1a001fee:	f7ff ffc9 	bl	1a001f84 <serveInterrupt>
}
1a001ff2:	bd08      	pop	{r3, pc}

1a001ff4 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a001ff4:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a001ff6:	2002      	movs	r0, #2
1a001ff8:	f7ff ffc4 	bl	1a001f84 <serveInterrupt>
}
1a001ffc:	bd08      	pop	{r3, pc}
1a001ffe:	Address 0x000000001a001ffe is out of bounds.


1a002000 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002000:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a002002:	4d0b      	ldr	r5, [pc, #44]	; (1a002030 <gpioObtainPinInit+0x30>)
1a002004:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002008:	182c      	adds	r4, r5, r0
1a00200a:	5628      	ldrsb	r0, [r5, r0]
1a00200c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00200e:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a002012:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002014:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002018:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00201a:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00201e:	9b02      	ldr	r3, [sp, #8]
1a002020:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a002022:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a002026:	9b03      	ldr	r3, [sp, #12]
1a002028:	701a      	strb	r2, [r3, #0]
}
1a00202a:	bc30      	pop	{r4, r5}
1a00202c:	4770      	bx	lr
1a00202e:	bf00      	nop
1a002030:	1a00414c 	.word	0x1a00414c

1a002034 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a002034:	b570      	push	{r4, r5, r6, lr}
1a002036:	b084      	sub	sp, #16
1a002038:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00203a:	2300      	movs	r3, #0
1a00203c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002040:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002044:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002048:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00204c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002050:	f10d 030b 	add.w	r3, sp, #11
1a002054:	9301      	str	r3, [sp, #4]
1a002056:	ab03      	add	r3, sp, #12
1a002058:	9300      	str	r3, [sp, #0]
1a00205a:	f10d 030d 	add.w	r3, sp, #13
1a00205e:	f10d 020e 	add.w	r2, sp, #14
1a002062:	f10d 010f 	add.w	r1, sp, #15
1a002066:	f7ff ffcb 	bl	1a002000 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00206a:	2c05      	cmp	r4, #5
1a00206c:	f200 80a5 	bhi.w	1a0021ba <gpioInit+0x186>
1a002070:	e8df f004 	tbb	[pc, r4]
1a002074:	45278109 	.word	0x45278109
1a002078:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00207a:	4851      	ldr	r0, [pc, #324]	; (1a0021c0 <gpioInit+0x18c>)
1a00207c:	f001 f8da 	bl	1a003234 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a002080:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a002082:	b004      	add	sp, #16
1a002084:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a002086:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00208a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00208e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002092:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002096:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00209a:	494a      	ldr	r1, [pc, #296]	; (1a0021c4 <gpioInit+0x190>)
1a00209c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0020a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0020a4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0020a8:	2001      	movs	r0, #1
1a0020aa:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0020ae:	4c44      	ldr	r4, [pc, #272]	; (1a0021c0 <gpioInit+0x18c>)
1a0020b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0020b4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0020b8:	ea22 0201 	bic.w	r2, r2, r1
1a0020bc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0020c0:	e7df      	b.n	1a002082 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0020c2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0020c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0020ca:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0020ce:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0020d2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0020d6:	493b      	ldr	r1, [pc, #236]	; (1a0021c4 <gpioInit+0x190>)
1a0020d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0020dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0020e0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0020e4:	2001      	movs	r0, #1
1a0020e6:	fa00 f102 	lsl.w	r1, r0, r2
1a0020ea:	4c35      	ldr	r4, [pc, #212]	; (1a0021c0 <gpioInit+0x18c>)
1a0020ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0020f0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0020f4:	ea22 0201 	bic.w	r2, r2, r1
1a0020f8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0020fc:	e7c1      	b.n	1a002082 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0020fe:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002102:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002106:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00210a:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00210e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002112:	492c      	ldr	r1, [pc, #176]	; (1a0021c4 <gpioInit+0x190>)
1a002114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002118:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00211c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002120:	2001      	movs	r0, #1
1a002122:	fa00 f102 	lsl.w	r1, r0, r2
1a002126:	4c26      	ldr	r4, [pc, #152]	; (1a0021c0 <gpioInit+0x18c>)
1a002128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00212c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002130:	ea22 0201 	bic.w	r2, r2, r1
1a002134:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002138:	e7a3      	b.n	1a002082 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00213a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00213e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002142:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002146:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00214a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00214e:	491d      	ldr	r1, [pc, #116]	; (1a0021c4 <gpioInit+0x190>)
1a002150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002154:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002158:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00215c:	2001      	movs	r0, #1
1a00215e:	fa00 f102 	lsl.w	r1, r0, r2
1a002162:	4c17      	ldr	r4, [pc, #92]	; (1a0021c0 <gpioInit+0x18c>)
1a002164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002168:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00216c:	ea22 0201 	bic.w	r2, r2, r1
1a002170:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002174:	e785      	b.n	1a002082 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002176:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00217a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00217e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002182:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002186:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00218a:	490e      	ldr	r1, [pc, #56]	; (1a0021c4 <gpioInit+0x190>)
1a00218c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a002190:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a002194:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002198:	2001      	movs	r0, #1
1a00219a:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00219e:	4b08      	ldr	r3, [pc, #32]	; (1a0021c0 <gpioInit+0x18c>)
1a0021a0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0021a4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0021a8:	4331      	orrs	r1, r6
1a0021aa:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0021ae:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0021b0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0021b4:	2100      	movs	r1, #0
1a0021b6:	5499      	strb	r1, [r3, r2]
1a0021b8:	e763      	b.n	1a002082 <gpioInit+0x4e>
      ret_val = 0;
1a0021ba:	2000      	movs	r0, #0
1a0021bc:	e761      	b.n	1a002082 <gpioInit+0x4e>
1a0021be:	bf00      	nop
1a0021c0:	400f4000 	.word	0x400f4000
1a0021c4:	40086000 	.word	0x40086000

1a0021c8 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a0021c8:	b510      	push	{r4, lr}
1a0021ca:	b084      	sub	sp, #16
1a0021cc:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0021ce:	2300      	movs	r3, #0
1a0021d0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0021d4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0021d8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0021dc:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0021e0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0021e4:	f10d 030b 	add.w	r3, sp, #11
1a0021e8:	9301      	str	r3, [sp, #4]
1a0021ea:	ab03      	add	r3, sp, #12
1a0021ec:	9300      	str	r3, [sp, #0]
1a0021ee:	f10d 030d 	add.w	r3, sp, #13
1a0021f2:	f10d 020e 	add.w	r2, sp, #14
1a0021f6:	f10d 010f 	add.w	r1, sp, #15
1a0021fa:	f7ff ff01 	bl	1a002000 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0021fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002202:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a002206:	3400      	adds	r4, #0
1a002208:	bf18      	it	ne
1a00220a:	2401      	movne	r4, #1
1a00220c:	015b      	lsls	r3, r3, #5
1a00220e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002212:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002216:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a002218:	2001      	movs	r0, #1
1a00221a:	b004      	add	sp, #16
1a00221c:	bd10      	pop	{r4, pc}

1a00221e <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a00221e:	b500      	push	{lr}
1a002220:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a002222:	2300      	movs	r3, #0
1a002224:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002228:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00222c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002230:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002234:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002238:	f10d 030b 	add.w	r3, sp, #11
1a00223c:	9301      	str	r3, [sp, #4]
1a00223e:	ab03      	add	r3, sp, #12
1a002240:	9300      	str	r3, [sp, #0]
1a002242:	f10d 030d 	add.w	r3, sp, #13
1a002246:	f10d 020e 	add.w	r2, sp, #14
1a00224a:	f10d 010f 	add.w	r1, sp, #15
1a00224e:	f7ff fed7 	bl	1a002000 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a002252:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a002256:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a00225a:	015b      	lsls	r3, r3, #5
1a00225c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002260:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002264:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a002266:	3000      	adds	r0, #0
1a002268:	bf18      	it	ne
1a00226a:	2001      	movne	r0, #1
1a00226c:	b005      	add	sp, #20
1a00226e:	f85d fb04 	ldr.w	pc, [sp], #4

1a002272 <gpioToggle>:
{
1a002272:	b510      	push	{r4, lr}
1a002274:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a002276:	f7ff ffd2 	bl	1a00221e <gpioRead>
1a00227a:	fab0 f180 	clz	r1, r0
1a00227e:	0949      	lsrs	r1, r1, #5
1a002280:	4620      	mov	r0, r4
1a002282:	f7ff ffa1 	bl	1a0021c8 <gpioWrite>
}
1a002286:	bd10      	pop	{r4, pc}

1a002288 <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a002288:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a00228c:	4909      	ldr	r1, [pc, #36]	; (1a0022b4 <tickerCallback+0x2c>)
1a00228e:	e9d1 bc00 	ldrd	fp, ip, [r1]
1a002292:	f11b 0201 	adds.w	r2, fp, #1
1a002296:	f14c 0300 	adc.w	r3, ip, #0
1a00229a:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a00229e:	4b06      	ldr	r3, [pc, #24]	; (1a0022b8 <tickerCallback+0x30>)
1a0022a0:	681b      	ldr	r3, [r3, #0]
1a0022a2:	b123      	cbz	r3, 1a0022ae <tickerCallback+0x26>
      (* tickHookFunction )( callBackFuncParams );
1a0022a4:	4b04      	ldr	r3, [pc, #16]	; (1a0022b8 <tickerCallback+0x30>)
1a0022a6:	681b      	ldr	r3, [r3, #0]
1a0022a8:	4a04      	ldr	r2, [pc, #16]	; (1a0022bc <tickerCallback+0x34>)
1a0022aa:	6810      	ldr	r0, [r2, #0]
1a0022ac:	4798      	blx	r3
   }
}
1a0022ae:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a0022b2:	bf00      	nop
1a0022b4:	10002e20 	.word	0x10002e20
1a0022b8:	10002d68 	.word	0x10002d68
1a0022bc:	10002d64 	.word	0x10002d64

1a0022c0 <tickInit>:
{
1a0022c0:	b510      	push	{r4, lr}
1a0022c2:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a0022c4:	4b0e      	ldr	r3, [pc, #56]	; (1a002300 <tickInit+0x40>)
1a0022c6:	9301      	str	r3, [sp, #4]
1a0022c8:	4b0e      	ldr	r3, [pc, #56]	; (1a002304 <tickInit+0x44>)
1a0022ca:	9300      	str	r3, [sp, #0]
1a0022cc:	2300      	movs	r3, #0
1a0022ce:	2201      	movs	r2, #1
1a0022d0:	4601      	mov	r1, r0
1a0022d2:	480d      	ldr	r0, [pc, #52]	; (1a002308 <tickInit+0x48>)
1a0022d4:	f7ff fade 	bl	1a001894 <xTimerCreateStatic>
         if (h == NULL)
1a0022d8:	b178      	cbz	r0, 1a0022fa <tickInit+0x3a>
1a0022da:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a0022dc:	f7fe ff44 	bl	1a001168 <xTaskGetTickCount>
1a0022e0:	2300      	movs	r3, #0
1a0022e2:	9300      	str	r3, [sp, #0]
1a0022e4:	4602      	mov	r2, r0
1a0022e6:	2101      	movs	r1, #1
1a0022e8:	4620      	mov	r0, r4
1a0022ea:	f7ff fafb 	bl	1a0018e4 <xTimerGenericCommand>
1a0022ee:	2801      	cmp	r0, #1
1a0022f0:	bf14      	ite	ne
1a0022f2:	2000      	movne	r0, #0
1a0022f4:	2001      	moveq	r0, #1
}
1a0022f6:	b002      	add	sp, #8
1a0022f8:	bd10      	pop	{r4, pc}
            return 0;
1a0022fa:	2000      	movs	r0, #0
1a0022fc:	e7fb      	b.n	1a0022f6 <tickInit+0x36>
1a0022fe:	bf00      	nop
1a002300:	10002d6c 	.word	0x10002d6c
1a002304:	1a002289 	.word	0x1a002289
1a002308:	1a004284 	.word	0x1a004284

1a00230c <uartProcessIRQ>:
{
1a00230c:	b570      	push	{r4, r5, r6, lr}
1a00230e:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a002310:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a002314:	0093      	lsls	r3, r2, #2
1a002316:	4a25      	ldr	r2, [pc, #148]	; (1a0023ac <uartProcessIRQ+0xa0>)
1a002318:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00231a:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a00231c:	b2ed      	uxtb	r5, r5
1a00231e:	f015 0f01 	tst.w	r5, #1
1a002322:	d00b      	beq.n	1a00233c <uartProcessIRQ+0x30>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a002324:	b930      	cbnz	r0, 1a002334 <uartProcessIRQ+0x28>
1a002326:	4b22      	ldr	r3, [pc, #136]	; (1a0023b0 <uartProcessIRQ+0xa4>)
1a002328:	681b      	ldr	r3, [r3, #0]
1a00232a:	b11b      	cbz	r3, 1a002334 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a00232c:	4b20      	ldr	r3, [pc, #128]	; (1a0023b0 <uartProcessIRQ+0xa4>)
1a00232e:	681b      	ldr	r3, [r3, #0]
1a002330:	2000      	movs	r0, #0
1a002332:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a002334:	2c03      	cmp	r4, #3
1a002336:	d015      	beq.n	1a002364 <uartProcessIRQ+0x58>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a002338:	2c05      	cmp	r4, #5
1a00233a:	d01c      	beq.n	1a002376 <uartProcessIRQ+0x6a>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a00233c:	f015 0f20 	tst.w	r5, #32
1a002340:	d00f      	beq.n	1a002362 <uartProcessIRQ+0x56>
	return pUART->IER;
1a002342:	6873      	ldr	r3, [r6, #4]
1a002344:	f013 0f02 	tst.w	r3, #2
1a002348:	d00b      	beq.n	1a002362 <uartProcessIRQ+0x56>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a00234a:	b934      	cbnz	r4, 1a00235a <uartProcessIRQ+0x4e>
1a00234c:	4b19      	ldr	r3, [pc, #100]	; (1a0023b4 <uartProcessIRQ+0xa8>)
1a00234e:	681b      	ldr	r3, [r3, #0]
1a002350:	b11b      	cbz	r3, 1a00235a <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART0)(0);
1a002352:	4b18      	ldr	r3, [pc, #96]	; (1a0023b4 <uartProcessIRQ+0xa8>)
1a002354:	681b      	ldr	r3, [r3, #0]
1a002356:	2000      	movs	r0, #0
1a002358:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a00235a:	2c03      	cmp	r4, #3
1a00235c:	d014      	beq.n	1a002388 <uartProcessIRQ+0x7c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a00235e:	2c05      	cmp	r4, #5
1a002360:	d01b      	beq.n	1a00239a <uartProcessIRQ+0x8e>
}
1a002362:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a002364:	4b14      	ldr	r3, [pc, #80]	; (1a0023b8 <uartProcessIRQ+0xac>)
1a002366:	681b      	ldr	r3, [r3, #0]
1a002368:	2b00      	cmp	r3, #0
1a00236a:	d0e5      	beq.n	1a002338 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART2)(0);
1a00236c:	4b12      	ldr	r3, [pc, #72]	; (1a0023b8 <uartProcessIRQ+0xac>)
1a00236e:	681b      	ldr	r3, [r3, #0]
1a002370:	2000      	movs	r0, #0
1a002372:	4798      	blx	r3
1a002374:	e7e0      	b.n	1a002338 <uartProcessIRQ+0x2c>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a002376:	4b11      	ldr	r3, [pc, #68]	; (1a0023bc <uartProcessIRQ+0xb0>)
1a002378:	681b      	ldr	r3, [r3, #0]
1a00237a:	2b00      	cmp	r3, #0
1a00237c:	d0de      	beq.n	1a00233c <uartProcessIRQ+0x30>
         (*rxIsrCallbackUART3)(0);
1a00237e:	4b0f      	ldr	r3, [pc, #60]	; (1a0023bc <uartProcessIRQ+0xb0>)
1a002380:	681b      	ldr	r3, [r3, #0]
1a002382:	2000      	movs	r0, #0
1a002384:	4798      	blx	r3
1a002386:	e7d9      	b.n	1a00233c <uartProcessIRQ+0x30>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a002388:	4b0d      	ldr	r3, [pc, #52]	; (1a0023c0 <uartProcessIRQ+0xb4>)
1a00238a:	681b      	ldr	r3, [r3, #0]
1a00238c:	2b00      	cmp	r3, #0
1a00238e:	d0e6      	beq.n	1a00235e <uartProcessIRQ+0x52>
         (*txIsrCallbackUART2)(0);
1a002390:	4b0b      	ldr	r3, [pc, #44]	; (1a0023c0 <uartProcessIRQ+0xb4>)
1a002392:	681b      	ldr	r3, [r3, #0]
1a002394:	2000      	movs	r0, #0
1a002396:	4798      	blx	r3
1a002398:	e7e1      	b.n	1a00235e <uartProcessIRQ+0x52>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a00239a:	4b0a      	ldr	r3, [pc, #40]	; (1a0023c4 <uartProcessIRQ+0xb8>)
1a00239c:	681b      	ldr	r3, [r3, #0]
1a00239e:	2b00      	cmp	r3, #0
1a0023a0:	d0df      	beq.n	1a002362 <uartProcessIRQ+0x56>
         (*txIsrCallbackUART3)(0);
1a0023a2:	4b08      	ldr	r3, [pc, #32]	; (1a0023c4 <uartProcessIRQ+0xb8>)
1a0023a4:	681b      	ldr	r3, [r3, #0]
1a0023a6:	2000      	movs	r0, #0
1a0023a8:	4798      	blx	r3
}
1a0023aa:	e7da      	b.n	1a002362 <uartProcessIRQ+0x56>
1a0023ac:	1a004290 	.word	0x1a004290
1a0023b0:	10002d9c 	.word	0x10002d9c
1a0023b4:	10002da8 	.word	0x10002da8
1a0023b8:	10002da0 	.word	0x10002da0
1a0023bc:	10002da4 	.word	0x10002da4
1a0023c0:	10002dac 	.word	0x10002dac
1a0023c4:	10002db0 	.word	0x10002db0

1a0023c8 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0023c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0023cc:	0083      	lsls	r3, r0, #2
1a0023ce:	4a03      	ldr	r2, [pc, #12]	; (1a0023dc <uartTxReady+0x14>)
1a0023d0:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a0023d2:	6958      	ldr	r0, [r3, #20]
}
1a0023d4:	f000 0020 	and.w	r0, r0, #32
1a0023d8:	4770      	bx	lr
1a0023da:	bf00      	nop
1a0023dc:	1a004290 	.word	0x1a004290

1a0023e0 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0023e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0023e4:	0083      	lsls	r3, r0, #2
1a0023e6:	4a02      	ldr	r2, [pc, #8]	; (1a0023f0 <uartTxWrite+0x10>)
1a0023e8:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0023ea:	6019      	str	r1, [r3, #0]
}
1a0023ec:	4770      	bx	lr
1a0023ee:	bf00      	nop
1a0023f0:	1a004290 	.word	0x1a004290

1a0023f4 <uartInit>:
{
1a0023f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0023f8:	4680      	mov	r8, r0
1a0023fa:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0023fc:	4c19      	ldr	r4, [pc, #100]	; (1a002464 <uartInit+0x70>)
1a0023fe:	0045      	lsls	r5, r0, #1
1a002400:	182a      	adds	r2, r5, r0
1a002402:	0093      	lsls	r3, r2, #2
1a002404:	18e6      	adds	r6, r4, r3
1a002406:	58e7      	ldr	r7, [r4, r3]
1a002408:	4638      	mov	r0, r7
1a00240a:	f000 fb07 	bl	1a002a1c <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a00240e:	4649      	mov	r1, r9
1a002410:	4638      	mov	r0, r7
1a002412:	f000 fb2d 	bl	1a002a70 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a002416:	2307      	movs	r3, #7
1a002418:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00241a:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a00241c:	2301      	movs	r3, #1
1a00241e:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a002420:	7930      	ldrb	r0, [r6, #4]
1a002422:	7973      	ldrb	r3, [r6, #5]
1a002424:	79b2      	ldrb	r2, [r6, #6]
1a002426:	f042 0218 	orr.w	r2, r2, #24
1a00242a:	490f      	ldr	r1, [pc, #60]	; (1a002468 <uartInit+0x74>)
1a00242c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a002430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a002434:	79f0      	ldrb	r0, [r6, #7]
1a002436:	7a33      	ldrb	r3, [r6, #8]
1a002438:	7a72      	ldrb	r2, [r6, #9]
1a00243a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00243e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a002446:	f1b8 0f01 	cmp.w	r8, #1
1a00244a:	d001      	beq.n	1a002450 <uartInit+0x5c>
}
1a00244c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a002450:	4a06      	ldr	r2, [pc, #24]	; (1a00246c <uartInit+0x78>)
1a002452:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a002454:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a002458:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00245a:	221a      	movs	r2, #26
1a00245c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a002460:	e7f4      	b.n	1a00244c <uartInit+0x58>
1a002462:	bf00      	nop
1a002464:	1a004290 	.word	0x1a004290
1a002468:	40086000 	.word	0x40086000
1a00246c:	40081000 	.word	0x40081000

1a002470 <uartWriteByte>:
{
1a002470:	b538      	push	{r3, r4, r5, lr}
1a002472:	4604      	mov	r4, r0
1a002474:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a002476:	4620      	mov	r0, r4
1a002478:	f7ff ffa6 	bl	1a0023c8 <uartTxReady>
1a00247c:	2800      	cmp	r0, #0
1a00247e:	d0fa      	beq.n	1a002476 <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a002480:	4629      	mov	r1, r5
1a002482:	4620      	mov	r0, r4
1a002484:	f7ff ffac 	bl	1a0023e0 <uartTxWrite>
}
1a002488:	bd38      	pop	{r3, r4, r5, pc}

1a00248a <uartWriteString>:
{
1a00248a:	b538      	push	{r3, r4, r5, lr}
1a00248c:	4605      	mov	r5, r0
1a00248e:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a002490:	e003      	b.n	1a00249a <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a002492:	4628      	mov	r0, r5
1a002494:	f7ff ffec 	bl	1a002470 <uartWriteByte>
      str++;
1a002498:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a00249a:	7821      	ldrb	r1, [r4, #0]
1a00249c:	2900      	cmp	r1, #0
1a00249e:	d1f8      	bne.n	1a002492 <uartWriteString+0x8>
}
1a0024a0:	bd38      	pop	{r3, r4, r5, pc}

1a0024a2 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a0024a2:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a0024a4:	2003      	movs	r0, #3
1a0024a6:	f7ff ff31 	bl	1a00230c <uartProcessIRQ>
}
1a0024aa:	bd08      	pop	{r3, pc}

1a0024ac <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a0024ac:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a0024ae:	2005      	movs	r0, #5
1a0024b0:	f7ff ff2c 	bl	1a00230c <uartProcessIRQ>
}
1a0024b4:	bd08      	pop	{r3, pc}

1a0024b6 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a0024b6:	e7fe      	b.n	1a0024b6 <errorOcurred>

1a0024b8 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a0024b8:	4770      	bx	lr
1a0024ba:	Address 0x000000001a0024ba is out of bounds.


1a0024bc <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0024bc:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0024be:	2400      	movs	r4, #0
1a0024c0:	e001      	b.n	1a0024c6 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0024c2:	3401      	adds	r4, #1
1a0024c4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0024c6:	2c03      	cmp	r4, #3
1a0024c8:	d812      	bhi.n	1a0024f0 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0024ca:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0024cc:	4b09      	ldr	r3, [pc, #36]	; (1a0024f4 <TIMER0_IRQHandler+0x38>)
1a0024ce:	681a      	ldr	r2, [r3, #0]
1a0024d0:	f004 010f 	and.w	r1, r4, #15
1a0024d4:	2301      	movs	r3, #1
1a0024d6:	408b      	lsls	r3, r1
1a0024d8:	421a      	tst	r2, r3
1a0024da:	d0f2      	beq.n	1a0024c2 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0024dc:	4b06      	ldr	r3, [pc, #24]	; (1a0024f8 <TIMER0_IRQHandler+0x3c>)
1a0024de:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0024e2:	2000      	movs	r0, #0
1a0024e4:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0024e6:	2301      	movs	r3, #1
1a0024e8:	40ab      	lsls	r3, r5
1a0024ea:	4a02      	ldr	r2, [pc, #8]	; (1a0024f4 <TIMER0_IRQHandler+0x38>)
1a0024ec:	6013      	str	r3, [r2, #0]
1a0024ee:	e7e8      	b.n	1a0024c2 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a0024f0:	bd38      	pop	{r3, r4, r5, pc}
1a0024f2:	bf00      	nop
1a0024f4:	40084000 	.word	0x40084000
1a0024f8:	10000054 	.word	0x10000054

1a0024fc <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0024fc:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0024fe:	2400      	movs	r4, #0
1a002500:	e001      	b.n	1a002506 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002502:	3401      	adds	r4, #1
1a002504:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002506:	2c03      	cmp	r4, #3
1a002508:	d813      	bhi.n	1a002532 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a00250a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00250c:	4b09      	ldr	r3, [pc, #36]	; (1a002534 <TIMER1_IRQHandler+0x38>)
1a00250e:	681a      	ldr	r2, [r3, #0]
1a002510:	f004 010f 	and.w	r1, r4, #15
1a002514:	2301      	movs	r3, #1
1a002516:	408b      	lsls	r3, r1
1a002518:	421a      	tst	r2, r3
1a00251a:	d0f2      	beq.n	1a002502 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00251c:	1d23      	adds	r3, r4, #4
1a00251e:	4a06      	ldr	r2, [pc, #24]	; (1a002538 <TIMER1_IRQHandler+0x3c>)
1a002520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002524:	2000      	movs	r0, #0
1a002526:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002528:	2301      	movs	r3, #1
1a00252a:	40ab      	lsls	r3, r5
1a00252c:	4a01      	ldr	r2, [pc, #4]	; (1a002534 <TIMER1_IRQHandler+0x38>)
1a00252e:	6013      	str	r3, [r2, #0]
1a002530:	e7e7      	b.n	1a002502 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a002532:	bd38      	pop	{r3, r4, r5, pc}
1a002534:	40085000 	.word	0x40085000
1a002538:	10000054 	.word	0x10000054

1a00253c <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a00253c:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00253e:	2400      	movs	r4, #0
1a002540:	e001      	b.n	1a002546 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002542:	3401      	adds	r4, #1
1a002544:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002546:	2c03      	cmp	r4, #3
1a002548:	d814      	bhi.n	1a002574 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a00254a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00254c:	4b0a      	ldr	r3, [pc, #40]	; (1a002578 <TIMER2_IRQHandler+0x3c>)
1a00254e:	681a      	ldr	r2, [r3, #0]
1a002550:	f004 010f 	and.w	r1, r4, #15
1a002554:	2301      	movs	r3, #1
1a002556:	408b      	lsls	r3, r1
1a002558:	421a      	tst	r2, r3
1a00255a:	d0f2      	beq.n	1a002542 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00255c:	f104 0308 	add.w	r3, r4, #8
1a002560:	4a06      	ldr	r2, [pc, #24]	; (1a00257c <TIMER2_IRQHandler+0x40>)
1a002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002566:	2000      	movs	r0, #0
1a002568:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00256a:	2301      	movs	r3, #1
1a00256c:	40ab      	lsls	r3, r5
1a00256e:	4a02      	ldr	r2, [pc, #8]	; (1a002578 <TIMER2_IRQHandler+0x3c>)
1a002570:	6013      	str	r3, [r2, #0]
1a002572:	e7e6      	b.n	1a002542 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a002574:	bd38      	pop	{r3, r4, r5, pc}
1a002576:	bf00      	nop
1a002578:	400c3000 	.word	0x400c3000
1a00257c:	10000054 	.word	0x10000054

1a002580 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a002580:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002582:	2400      	movs	r4, #0
1a002584:	e001      	b.n	1a00258a <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002586:	3401      	adds	r4, #1
1a002588:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00258a:	2c03      	cmp	r4, #3
1a00258c:	d814      	bhi.n	1a0025b8 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a00258e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002590:	4b0a      	ldr	r3, [pc, #40]	; (1a0025bc <TIMER3_IRQHandler+0x3c>)
1a002592:	681a      	ldr	r2, [r3, #0]
1a002594:	f004 010f 	and.w	r1, r4, #15
1a002598:	2301      	movs	r3, #1
1a00259a:	408b      	lsls	r3, r1
1a00259c:	421a      	tst	r2, r3
1a00259e:	d0f2      	beq.n	1a002586 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0025a0:	f104 030c 	add.w	r3, r4, #12
1a0025a4:	4a06      	ldr	r2, [pc, #24]	; (1a0025c0 <TIMER3_IRQHandler+0x40>)
1a0025a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0025aa:	2000      	movs	r0, #0
1a0025ac:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0025ae:	2301      	movs	r3, #1
1a0025b0:	40ab      	lsls	r3, r5
1a0025b2:	4a02      	ldr	r2, [pc, #8]	; (1a0025bc <TIMER3_IRQHandler+0x3c>)
1a0025b4:	6013      	str	r3, [r2, #0]
1a0025b6:	e7e6      	b.n	1a002586 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0025b8:	bd38      	pop	{r3, r4, r5, pc}
1a0025ba:	bf00      	nop
1a0025bc:	400c4000 	.word	0x400c4000
1a0025c0:	10000054 	.word	0x10000054

1a0025c4 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a0025c4:	b508      	push	{r3, lr}
1a0025c6:	460b      	mov	r3, r1
   *printer = uart;
1a0025c8:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a0025ca:	4611      	mov	r1, r2
1a0025cc:	4618      	mov	r0, r3
1a0025ce:	f7ff ff11 	bl	1a0023f4 <uartInit>
}
1a0025d2:	bd08      	pop	{r3, pc}

1a0025d4 <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a0025d4:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a0025d6:	f7ff ff58 	bl	1a00248a <uartWriteString>
}
1a0025da:	bd08      	pop	{r3, pc}

1a0025dc <printEnter>:

void printEnter( print_t printer )
{
1a0025dc:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a0025de:	4902      	ldr	r1, [pc, #8]	; (1a0025e8 <printEnter+0xc>)
1a0025e0:	f7ff ff53 	bl	1a00248a <uartWriteString>
}
1a0025e4:	bd08      	pop	{r3, pc}
1a0025e6:	bf00      	nop
1a0025e8:	1a0042d8 	.word	0x1a0042d8

1a0025ec <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0025ec:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0025ee:	f000 fb35 	bl	1a002c5c <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0025f2:	4b3a      	ldr	r3, [pc, #232]	; (1a0026dc <boardInit+0xf0>)
1a0025f4:	6818      	ldr	r0, [r3, #0]
1a0025f6:	f7ff fcaf 	bl	1a001f58 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a0025fa:	2001      	movs	r0, #1
1a0025fc:	2100      	movs	r1, #0
1a0025fe:	f7ff fe5f 	bl	1a0022c0 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a002602:	2105      	movs	r1, #5
1a002604:	2000      	movs	r0, #0
1a002606:	f7ff fd15 	bl	1a002034 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a00260a:	2100      	movs	r1, #0
1a00260c:	2024      	movs	r0, #36	; 0x24
1a00260e:	f7ff fd11 	bl	1a002034 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a002612:	2100      	movs	r1, #0
1a002614:	2025      	movs	r0, #37	; 0x25
1a002616:	f7ff fd0d 	bl	1a002034 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a00261a:	2100      	movs	r1, #0
1a00261c:	2026      	movs	r0, #38	; 0x26
1a00261e:	f7ff fd09 	bl	1a002034 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a002622:	2100      	movs	r1, #0
1a002624:	2027      	movs	r0, #39	; 0x27
1a002626:	f7ff fd05 	bl	1a002034 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00262a:	2101      	movs	r1, #1
1a00262c:	2028      	movs	r0, #40	; 0x28
1a00262e:	f7ff fd01 	bl	1a002034 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a002632:	2101      	movs	r1, #1
1a002634:	2029      	movs	r0, #41	; 0x29
1a002636:	f7ff fcfd 	bl	1a002034 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a00263a:	2101      	movs	r1, #1
1a00263c:	202a      	movs	r0, #42	; 0x2a
1a00263e:	f7ff fcf9 	bl	1a002034 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a002642:	2101      	movs	r1, #1
1a002644:	202b      	movs	r0, #43	; 0x2b
1a002646:	f7ff fcf5 	bl	1a002034 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00264a:	2101      	movs	r1, #1
1a00264c:	202c      	movs	r0, #44	; 0x2c
1a00264e:	f7ff fcf1 	bl	1a002034 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a002652:	2101      	movs	r1, #1
1a002654:	202d      	movs	r0, #45	; 0x2d
1a002656:	f7ff fced 	bl	1a002034 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00265a:	2100      	movs	r1, #0
1a00265c:	202e      	movs	r0, #46	; 0x2e
1a00265e:	f7ff fce9 	bl	1a002034 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a002662:	2100      	movs	r1, #0
1a002664:	202f      	movs	r0, #47	; 0x2f
1a002666:	f7ff fce5 	bl	1a002034 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a00266a:	2100      	movs	r1, #0
1a00266c:	2030      	movs	r0, #48	; 0x30
1a00266e:	f7ff fce1 	bl	1a002034 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a002672:	2100      	movs	r1, #0
1a002674:	2031      	movs	r0, #49	; 0x31
1a002676:	f7ff fcdd 	bl	1a002034 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a00267a:	2100      	movs	r1, #0
1a00267c:	2032      	movs	r0, #50	; 0x32
1a00267e:	f7ff fcd9 	bl	1a002034 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a002682:	2100      	movs	r1, #0
1a002684:	2033      	movs	r0, #51	; 0x33
1a002686:	f7ff fcd5 	bl	1a002034 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a00268a:	2100      	movs	r1, #0
1a00268c:	2034      	movs	r0, #52	; 0x34
1a00268e:	f7ff fcd1 	bl	1a002034 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a002692:	2100      	movs	r1, #0
1a002694:	2035      	movs	r0, #53	; 0x35
1a002696:	f7ff fccd 	bl	1a002034 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a00269a:	2101      	movs	r1, #1
1a00269c:	2036      	movs	r0, #54	; 0x36
1a00269e:	f7ff fcc9 	bl	1a002034 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a0026a2:	2101      	movs	r1, #1
1a0026a4:	2037      	movs	r0, #55	; 0x37
1a0026a6:	f7ff fcc5 	bl	1a002034 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a0026aa:	2101      	movs	r1, #1
1a0026ac:	2038      	movs	r0, #56	; 0x38
1a0026ae:	f7ff fcc1 	bl	1a002034 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a0026b2:	2101      	movs	r1, #1
1a0026b4:	2039      	movs	r0, #57	; 0x39
1a0026b6:	f7ff fcbd 	bl	1a002034 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a0026ba:	2101      	movs	r1, #1
1a0026bc:	203a      	movs	r0, #58	; 0x3a
1a0026be:	f7ff fcb9 	bl	1a002034 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a0026c2:	2101      	movs	r1, #1
1a0026c4:	203b      	movs	r0, #59	; 0x3b
1a0026c6:	f7ff fcb5 	bl	1a002034 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a0026ca:	2101      	movs	r1, #1
1a0026cc:	203c      	movs	r0, #60	; 0x3c
1a0026ce:	f7ff fcb1 	bl	1a002034 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a0026d2:	2101      	movs	r1, #1
1a0026d4:	203d      	movs	r0, #61	; 0x3d
1a0026d6:	f7ff fcad 	bl	1a002034 <gpioInit>

}
1a0026da:	bd08      	pop	{r3, pc}
1a0026dc:	10002e30 	.word	0x10002e30

1a0026e0 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0026e0:	2200      	movs	r2, #0
1a0026e2:	2a05      	cmp	r2, #5
1a0026e4:	d819      	bhi.n	1a00271a <Board_LED_Init+0x3a>
{
1a0026e6:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0026e8:	490c      	ldr	r1, [pc, #48]	; (1a00271c <Board_LED_Init+0x3c>)
1a0026ea:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0026ee:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0026f2:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a0026f4:	4b0a      	ldr	r3, [pc, #40]	; (1a002720 <Board_LED_Init+0x40>)
1a0026f6:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0026fa:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0026fe:	2001      	movs	r0, #1
1a002700:	40a0      	lsls	r0, r4
1a002702:	4301      	orrs	r1, r0
1a002704:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002708:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a00270c:	2100      	movs	r1, #0
1a00270e:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002710:	3201      	adds	r2, #1
1a002712:	2a05      	cmp	r2, #5
1a002714:	d9e8      	bls.n	1a0026e8 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a002716:	bc70      	pop	{r4, r5, r6}
1a002718:	4770      	bx	lr
1a00271a:	4770      	bx	lr
1a00271c:	1a0042e8 	.word	0x1a0042e8
1a002720:	400f4000 	.word	0x400f4000

1a002724 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002724:	2300      	movs	r3, #0
1a002726:	2b03      	cmp	r3, #3
1a002728:	d816      	bhi.n	1a002758 <Board_TEC_Init+0x34>
{
1a00272a:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00272c:	490b      	ldr	r1, [pc, #44]	; (1a00275c <Board_TEC_Init+0x38>)
1a00272e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002732:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002736:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002738:	4c09      	ldr	r4, [pc, #36]	; (1a002760 <Board_TEC_Init+0x3c>)
1a00273a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00273e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002742:	2001      	movs	r0, #1
1a002744:	40a8      	lsls	r0, r5
1a002746:	ea21 0100 	bic.w	r1, r1, r0
1a00274a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00274e:	3301      	adds	r3, #1
1a002750:	2b03      	cmp	r3, #3
1a002752:	d9eb      	bls.n	1a00272c <Board_TEC_Init+0x8>
    }
}
1a002754:	bc30      	pop	{r4, r5}
1a002756:	4770      	bx	lr
1a002758:	4770      	bx	lr
1a00275a:	bf00      	nop
1a00275c:	1a0042e0 	.word	0x1a0042e0
1a002760:	400f4000 	.word	0x400f4000

1a002764 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002764:	2300      	movs	r3, #0
1a002766:	2b08      	cmp	r3, #8
1a002768:	d816      	bhi.n	1a002798 <Board_GPIO_Init+0x34>
{
1a00276a:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00276c:	490b      	ldr	r1, [pc, #44]	; (1a00279c <Board_GPIO_Init+0x38>)
1a00276e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002772:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002776:	784d      	ldrb	r5, [r1, #1]
1a002778:	4c09      	ldr	r4, [pc, #36]	; (1a0027a0 <Board_GPIO_Init+0x3c>)
1a00277a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00277e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002782:	2001      	movs	r0, #1
1a002784:	40a8      	lsls	r0, r5
1a002786:	ea21 0100 	bic.w	r1, r1, r0
1a00278a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00278e:	3301      	adds	r3, #1
1a002790:	2b08      	cmp	r3, #8
1a002792:	d9eb      	bls.n	1a00276c <Board_GPIO_Init+0x8>
    }
}
1a002794:	bc30      	pop	{r4, r5}
1a002796:	4770      	bx	lr
1a002798:	4770      	bx	lr
1a00279a:	bf00      	nop
1a00279c:	1a0042f4 	.word	0x1a0042f4
1a0027a0:	400f4000 	.word	0x400f4000

1a0027a4 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a0027a4:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a0027a6:	4c0b      	ldr	r4, [pc, #44]	; (1a0027d4 <Board_SPI_Init+0x30>)
1a0027a8:	4620      	mov	r0, r4
1a0027aa:	f000 fe2f 	bl	1a00340c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0027ae:	6863      	ldr	r3, [r4, #4]
1a0027b0:	f023 0304 	bic.w	r3, r3, #4
1a0027b4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0027b6:	6823      	ldr	r3, [r4, #0]
1a0027b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0027bc:	f043 0307 	orr.w	r3, r3, #7
1a0027c0:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0027c2:	4905      	ldr	r1, [pc, #20]	; (1a0027d8 <Board_SPI_Init+0x34>)
1a0027c4:	4620      	mov	r0, r4
1a0027c6:	f000 fe01 	bl	1a0033cc <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0027ca:	6863      	ldr	r3, [r4, #4]
1a0027cc:	f043 0302 	orr.w	r3, r3, #2
1a0027d0:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a0027d2:	bd10      	pop	{r4, pc}
1a0027d4:	400c5000 	.word	0x400c5000
1a0027d8:	000186a0 	.word	0x000186a0

1a0027dc <Board_I2C_Init>:
{
1a0027dc:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a0027de:	2000      	movs	r0, #0
1a0027e0:	f000 f8dc 	bl	1a00299c <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0027e4:	4b04      	ldr	r3, [pc, #16]	; (1a0027f8 <Board_I2C_Init+0x1c>)
1a0027e6:	f640 0208 	movw	r2, #2056	; 0x808
1a0027ea:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0027ee:	4903      	ldr	r1, [pc, #12]	; (1a0027fc <Board_I2C_Init+0x20>)
1a0027f0:	2000      	movs	r0, #0
1a0027f2:	f000 f8e5 	bl	1a0029c0 <Chip_I2C_SetClockRate>
}
1a0027f6:	bd08      	pop	{r3, pc}
1a0027f8:	40086000 	.word	0x40086000
1a0027fc:	000f4240 	.word	0x000f4240

1a002800 <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a002800:	b510      	push	{r4, lr}
1a002802:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a002804:	4c08      	ldr	r4, [pc, #32]	; (1a002828 <Board_ADC_Init+0x28>)
1a002806:	4669      	mov	r1, sp
1a002808:	4620      	mov	r0, r4
1a00280a:	f000 f9e7 	bl	1a002bdc <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00280e:	4a07      	ldr	r2, [pc, #28]	; (1a00282c <Board_ADC_Init+0x2c>)
1a002810:	4669      	mov	r1, sp
1a002812:	4620      	mov	r0, r4
1a002814:	f000 fa02 	bl	1a002c1c <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002818:	2200      	movs	r2, #0
1a00281a:	4669      	mov	r1, sp
1a00281c:	4620      	mov	r0, r4
1a00281e:	f000 fa17 	bl	1a002c50 <Chip_ADC_SetResolution>
}
1a002822:	b002      	add	sp, #8
1a002824:	bd10      	pop	{r4, pc}
1a002826:	bf00      	nop
1a002828:	400e3000 	.word	0x400e3000
1a00282c:	00061a80 	.word	0x00061a80

1a002830 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002830:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a002832:	4c07      	ldr	r4, [pc, #28]	; (1a002850 <Board_Debug_Init+0x20>)
1a002834:	4620      	mov	r0, r4
1a002836:	f000 f8f1 	bl	1a002a1c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00283a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00283e:	4620      	mov	r0, r4
1a002840:	f000 f936 	bl	1a002ab0 <Chip_UART_SetBaudFDR>
	pUART->LCR = config;
1a002844:	2303      	movs	r3, #3
1a002846:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002848:	2301      	movs	r3, #1
1a00284a:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a00284c:	bd10      	pop	{r4, pc}
1a00284e:	bf00      	nop
1a002850:	400c1000 	.word	0x400c1000

1a002854 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002854:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002856:	f7ff ffeb 	bl	1a002830 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00285a:	480b      	ldr	r0, [pc, #44]	; (1a002888 <Board_Init+0x34>)
1a00285c:	f000 fcea 	bl	1a003234 <Chip_GPIO_Init>

   Board_LED_Init();
1a002860:	f7ff ff3e 	bl	1a0026e0 <Board_LED_Init>
   Board_TEC_Init();
1a002864:	f7ff ff5e 	bl	1a002724 <Board_TEC_Init>
   Board_SPI_Init();
1a002868:	f7ff ff9c 	bl	1a0027a4 <Board_SPI_Init>
   Board_GPIO_Init();
1a00286c:	f7ff ff7a 	bl	1a002764 <Board_GPIO_Init>
   Board_I2C_Init();
1a002870:	f7ff ffb4 	bl	1a0027dc <Board_I2C_Init>
   Board_ADC_Init();
1a002874:	f7ff ffc4 	bl	1a002800 <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a002878:	4a04      	ldr	r2, [pc, #16]	; (1a00288c <Board_Init+0x38>)
1a00287a:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a00287e:	f043 0304 	orr.w	r3, r3, #4
1a002882:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

   Chip_ENET_RMIIEnable(LPC_ETHERNET);
}
1a002886:	bd08      	pop	{r3, pc}
1a002888:	400f4000 	.word	0x400f4000
1a00288c:	40043000 	.word	0x40043000

1a002890 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a002890:	4b05      	ldr	r3, [pc, #20]	; (1a0028a8 <_sbrk_r+0x18>)
1a002892:	681b      	ldr	r3, [r3, #0]
1a002894:	b123      	cbz	r3, 1a0028a0 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a002896:	4b04      	ldr	r3, [pc, #16]	; (1a0028a8 <_sbrk_r+0x18>)
1a002898:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a00289a:	4401      	add	r1, r0
1a00289c:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a00289e:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0028a0:	4b01      	ldr	r3, [pc, #4]	; (1a0028a8 <_sbrk_r+0x18>)
1a0028a2:	4a02      	ldr	r2, [pc, #8]	; (1a0028ac <_sbrk_r+0x1c>)
1a0028a4:	601a      	str	r2, [r3, #0]
1a0028a6:	e7f6      	b.n	1a002896 <_sbrk_r+0x6>
1a0028a8:	10002db4 	.word	0x10002db4
1a0028ac:	10002e34 	.word	0x10002e34

1a0028b0 <SystemInit>:
1a0028b0:	b508      	push	{r3, lr}
1a0028b2:	4b04      	ldr	r3, [pc, #16]	; (1a0028c4 <SystemInit+0x14>)
1a0028b4:	4a04      	ldr	r2, [pc, #16]	; (1a0028c8 <SystemInit+0x18>)
1a0028b6:	601a      	str	r2, [r3, #0]
1a0028b8:	f000 fc90 	bl	1a0031dc <fpuInit>
1a0028bc:	f000 f858 	bl	1a002970 <Board_SystemInit>
1a0028c0:	bd08      	pop	{r3, pc}
1a0028c2:	bf00      	nop
1a0028c4:	e000ed08 	.word	0xe000ed08
1a0028c8:	1a000000 	.word	0x1a000000

1a0028cc <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0028cc:	2300      	movs	r3, #0
1a0028ce:	2b25      	cmp	r3, #37	; 0x25
1a0028d0:	d812      	bhi.n	1a0028f8 <Board_SetupMuxing+0x2c>
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a0028d2:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0028d4:	4a09      	ldr	r2, [pc, #36]	; (1a0028fc <Board_SetupMuxing+0x30>)
1a0028d6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0028da:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0028de:	784a      	ldrb	r2, [r1, #1]
1a0028e0:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0028e2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0028e6:	4906      	ldr	r1, [pc, #24]	; (1a002900 <Board_SetupMuxing+0x34>)
1a0028e8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0028ec:	3301      	adds	r3, #1
1a0028ee:	2b25      	cmp	r3, #37	; 0x25
1a0028f0:	d9f0      	bls.n	1a0028d4 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0028f2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0028f6:	4770      	bx	lr
1a0028f8:	4770      	bx	lr
1a0028fa:	bf00      	nop
1a0028fc:	1a004318 	.word	0x1a004318
1a002900:	40086000 	.word	0x40086000

1a002904 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002904:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002906:	4a17      	ldr	r2, [pc, #92]	; (1a002964 <Board_SetupClocking+0x60>)
1a002908:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a00290c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002910:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002914:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002918:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00291c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002920:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002924:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002928:	2201      	movs	r2, #1
1a00292a:	490f      	ldr	r1, [pc, #60]	; (1a002968 <Board_SetupClocking+0x64>)
1a00292c:	2006      	movs	r0, #6
1a00292e:	f000 fc83 	bl	1a003238 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002932:	2400      	movs	r4, #0
1a002934:	e00a      	b.n	1a00294c <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002936:	480d      	ldr	r0, [pc, #52]	; (1a00296c <Board_SetupClocking+0x68>)
1a002938:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00293c:	78cb      	ldrb	r3, [r1, #3]
1a00293e:	788a      	ldrb	r2, [r1, #2]
1a002940:	7849      	ldrb	r1, [r1, #1]
1a002942:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002946:	f000 fbb1 	bl	1a0030ac <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00294a:	3401      	adds	r4, #1
1a00294c:	2c02      	cmp	r4, #2
1a00294e:	d9f2      	bls.n	1a002936 <Board_SetupClocking+0x32>
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002950:	4b04      	ldr	r3, [pc, #16]	; (1a002964 <Board_SetupClocking+0x60>)
1a002952:	685a      	ldr	r2, [r3, #4]
1a002954:	f022 020c 	bic.w	r2, r2, #12
1a002958:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00295a:	685a      	ldr	r2, [r3, #4]
1a00295c:	f042 0203 	orr.w	r2, r2, #3
1a002960:	605a      	str	r2, [r3, #4]
}
1a002962:	bd10      	pop	{r4, pc}
1a002964:	40043000 	.word	0x40043000
1a002968:	0c28cb00 	.word	0x0c28cb00
1a00296c:	1a00430c 	.word	0x1a00430c

1a002970 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002970:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002972:	f7ff ffab 	bl	1a0028cc <Board_SetupMuxing>
    Board_SetupClocking();
1a002976:	f7ff ffc5 	bl	1a002904 <Board_SetupClocking>
}
1a00297a:	bd08      	pop	{r3, pc}

1a00297c <Chip_I2C_EventHandler>:
1a00297c:	2901      	cmp	r1, #1
1a00297e:	d109      	bne.n	1a002994 <Chip_I2C_EventHandler+0x18>
1a002980:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002984:	0080      	lsls	r0, r0, #2
1a002986:	4b04      	ldr	r3, [pc, #16]	; (1a002998 <Chip_I2C_EventHandler+0x1c>)
1a002988:	4418      	add	r0, r3
1a00298a:	6902      	ldr	r2, [r0, #16]
1a00298c:	7d13      	ldrb	r3, [r2, #20]
1a00298e:	b2db      	uxtb	r3, r3
1a002990:	2b04      	cmp	r3, #4
1a002992:	d0fb      	beq.n	1a00298c <Chip_I2C_EventHandler+0x10>
1a002994:	4770      	bx	lr
1a002996:	bf00      	nop
1a002998:	10000094 	.word	0x10000094

1a00299c <Chip_I2C_Init>:
1a00299c:	b570      	push	{r4, r5, r6, lr}
1a00299e:	4605      	mov	r5, r0
1a0029a0:	4e06      	ldr	r6, [pc, #24]	; (1a0029bc <Chip_I2C_Init+0x20>)
1a0029a2:	00c4      	lsls	r4, r0, #3
1a0029a4:	1a23      	subs	r3, r4, r0
1a0029a6:	009b      	lsls	r3, r3, #2
1a0029a8:	4433      	add	r3, r6
1a0029aa:	8898      	ldrh	r0, [r3, #4]
1a0029ac:	f000 fbd6 	bl	1a00315c <Chip_Clock_Enable>
1a0029b0:	1b60      	subs	r0, r4, r5
1a0029b2:	0080      	lsls	r0, r0, #2
1a0029b4:	5833      	ldr	r3, [r6, r0]
1a0029b6:	226c      	movs	r2, #108	; 0x6c
1a0029b8:	619a      	str	r2, [r3, #24]
1a0029ba:	bd70      	pop	{r4, r5, r6, pc}
1a0029bc:	10000094 	.word	0x10000094

1a0029c0 <Chip_I2C_SetClockRate>:
1a0029c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0029c4:	460c      	mov	r4, r1
1a0029c6:	4f09      	ldr	r7, [pc, #36]	; (1a0029ec <Chip_I2C_SetClockRate+0x2c>)
1a0029c8:	00c5      	lsls	r5, r0, #3
1a0029ca:	1a2e      	subs	r6, r5, r0
1a0029cc:	00b6      	lsls	r6, r6, #2
1a0029ce:	19bb      	adds	r3, r7, r6
1a0029d0:	8898      	ldrh	r0, [r3, #4]
1a0029d2:	f000 fbdd 	bl	1a003190 <Chip_Clock_GetRate>
1a0029d6:	fbb0 f0f4 	udiv	r0, r0, r4
1a0029da:	59bb      	ldr	r3, [r7, r6]
1a0029dc:	0842      	lsrs	r2, r0, #1
1a0029de:	611a      	str	r2, [r3, #16]
1a0029e0:	59bb      	ldr	r3, [r7, r6]
1a0029e2:	691a      	ldr	r2, [r3, #16]
1a0029e4:	1a80      	subs	r0, r0, r2
1a0029e6:	6158      	str	r0, [r3, #20]
1a0029e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0029ec:	10000094 	.word	0x10000094

1a0029f0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0029f0:	4b09      	ldr	r3, [pc, #36]	; (1a002a18 <Chip_UART_GetIndex+0x28>)
1a0029f2:	4298      	cmp	r0, r3
1a0029f4:	d009      	beq.n	1a002a0a <Chip_UART_GetIndex+0x1a>
1a0029f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0029fa:	4298      	cmp	r0, r3
1a0029fc:	d007      	beq.n	1a002a0e <Chip_UART_GetIndex+0x1e>
1a0029fe:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002a02:	4298      	cmp	r0, r3
1a002a04:	d005      	beq.n	1a002a12 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002a06:	2000      	movs	r0, #0
1a002a08:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002a0a:	2002      	movs	r0, #2
1a002a0c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002a0e:	2003      	movs	r0, #3
1a002a10:	4770      	bx	lr
			return 1;
1a002a12:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002a14:	4770      	bx	lr
1a002a16:	bf00      	nop
1a002a18:	400c1000 	.word	0x400c1000

1a002a1c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002a1c:	b530      	push	{r4, r5, lr}
1a002a1e:	b083      	sub	sp, #12
1a002a20:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002a22:	f7ff ffe5 	bl	1a0029f0 <Chip_UART_GetIndex>
1a002a26:	2301      	movs	r3, #1
1a002a28:	461a      	mov	r2, r3
1a002a2a:	4619      	mov	r1, r3
1a002a2c:	4d0e      	ldr	r5, [pc, #56]	; (1a002a68 <Chip_UART_Init+0x4c>)
1a002a2e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002a32:	f000 fb75 	bl	1a003120 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002a36:	2307      	movs	r3, #7
1a002a38:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a002a3a:	2300      	movs	r3, #0
1a002a3c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002a3e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002a40:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002a42:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002a44:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002a46:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002a48:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002a4a:	4b08      	ldr	r3, [pc, #32]	; (1a002a6c <Chip_UART_Init+0x50>)
1a002a4c:	429c      	cmp	r4, r3
1a002a4e:	d006      	beq.n	1a002a5e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002a50:	2303      	movs	r3, #3
1a002a52:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002a54:	2310      	movs	r3, #16
1a002a56:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002a58:	9b01      	ldr	r3, [sp, #4]
}
1a002a5a:	b003      	add	sp, #12
1a002a5c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a002a5e:	2300      	movs	r3, #0
1a002a60:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002a62:	69a3      	ldr	r3, [r4, #24]
1a002a64:	9301      	str	r3, [sp, #4]
1a002a66:	e7f3      	b.n	1a002a50 <Chip_UART_Init+0x34>
1a002a68:	1a0043b8 	.word	0x1a0043b8
1a002a6c:	40082000 	.word	0x40082000

1a002a70 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002a70:	b538      	push	{r3, r4, r5, lr}
1a002a72:	4605      	mov	r5, r0
1a002a74:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002a76:	f7ff ffbb 	bl	1a0029f0 <Chip_UART_GetIndex>
1a002a7a:	4b0c      	ldr	r3, [pc, #48]	; (1a002aac <Chip_UART_SetBaud+0x3c>)
1a002a7c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002a80:	f000 fb86 	bl	1a003190 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002a84:	0123      	lsls	r3, r4, #4
1a002a86:	fbb0 f3f3 	udiv	r3, r0, r3
1a002a8a:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002a8c:	68ea      	ldr	r2, [r5, #12]
1a002a8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002a92:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a002a94:	6029      	str	r1, [r5, #0]
1a002a96:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002a9a:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002a9c:	68ea      	ldr	r2, [r5, #12]
1a002a9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002aa2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002aa4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002aa8:	0900      	lsrs	r0, r0, #4
1a002aaa:	bd38      	pop	{r3, r4, r5, pc}
1a002aac:	1a0043b0 	.word	0x1a0043b0

1a002ab0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002ab4:	b083      	sub	sp, #12
1a002ab6:	4683      	mov	fp, r0
1a002ab8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002aba:	f7ff ff99 	bl	1a0029f0 <Chip_UART_GetIndex>
1a002abe:	4b35      	ldr	r3, [pc, #212]	; (1a002b94 <Chip_UART_SetBaudFDR+0xe4>)
1a002ac0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002ac4:	f000 fb64 	bl	1a003190 <Chip_Clock_GetRate>
1a002ac8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a002aca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002ace:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002ad0:	2300      	movs	r3, #0
1a002ad2:	9301      	str	r3, [sp, #4]
1a002ad4:	46a2      	mov	sl, r4
1a002ad6:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002ad8:	e02a      	b.n	1a002b30 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a002ada:	4242      	negs	r2, r0
				div ++;
1a002adc:	1c4b      	adds	r3, r1, #1
1a002ade:	e017      	b.n	1a002b10 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002ae0:	b30a      	cbz	r2, 1a002b26 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002ae2:	4617      	mov	r7, r2
			sd = d;
1a002ae4:	9501      	str	r5, [sp, #4]
			sm = m;
1a002ae6:	46a2      	mov	sl, r4
			sdiv = div;
1a002ae8:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a002aea:	3501      	adds	r5, #1
1a002aec:	42ac      	cmp	r4, r5
1a002aee:	d91e      	bls.n	1a002b2e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002af0:	0933      	lsrs	r3, r6, #4
1a002af2:	0730      	lsls	r0, r6, #28
1a002af4:	fba4 0100 	umull	r0, r1, r4, r0
1a002af8:	fb04 1103 	mla	r1, r4, r3, r1
1a002afc:	1962      	adds	r2, r4, r5
1a002afe:	fb08 f202 	mul.w	r2, r8, r2
1a002b02:	2300      	movs	r3, #0
1a002b04:	f000 fce2 	bl	1a0034cc <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002b08:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a002b0a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a002b0c:	2800      	cmp	r0, #0
1a002b0e:	dbe4      	blt.n	1a002ada <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002b10:	4297      	cmp	r7, r2
1a002b12:	d3ea      	bcc.n	1a002aea <Chip_UART_SetBaudFDR+0x3a>
1a002b14:	2b00      	cmp	r3, #0
1a002b16:	d0e8      	beq.n	1a002aea <Chip_UART_SetBaudFDR+0x3a>
1a002b18:	0c19      	lsrs	r1, r3, #16
1a002b1a:	d1e6      	bne.n	1a002aea <Chip_UART_SetBaudFDR+0x3a>
1a002b1c:	2b02      	cmp	r3, #2
1a002b1e:	d8df      	bhi.n	1a002ae0 <Chip_UART_SetBaudFDR+0x30>
1a002b20:	2d00      	cmp	r5, #0
1a002b22:	d0dd      	beq.n	1a002ae0 <Chip_UART_SetBaudFDR+0x30>
1a002b24:	e7e1      	b.n	1a002aea <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002b26:	4617      	mov	r7, r2
			sd = d;
1a002b28:	9501      	str	r5, [sp, #4]
			sm = m;
1a002b2a:	46a2      	mov	sl, r4
			sdiv = div;
1a002b2c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002b2e:	3401      	adds	r4, #1
1a002b30:	b11f      	cbz	r7, 1a002b3a <Chip_UART_SetBaudFDR+0x8a>
1a002b32:	2c0f      	cmp	r4, #15
1a002b34:	d801      	bhi.n	1a002b3a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002b36:	2500      	movs	r5, #0
1a002b38:	e7d8      	b.n	1a002aec <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002b3a:	f1b9 0f00 	cmp.w	r9, #0
1a002b3e:	d024      	beq.n	1a002b8a <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002b40:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002b48:	f8cb 300c 	str.w	r3, [fp, #12]
1a002b4c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a002b50:	f8cb 3000 	str.w	r3, [fp]
1a002b54:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002b58:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002b5c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002b64:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002b68:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002b6c:	b2db      	uxtb	r3, r3
1a002b6e:	9901      	ldr	r1, [sp, #4]
1a002b70:	f001 020f 	and.w	r2, r1, #15
1a002b74:	4313      	orrs	r3, r2
1a002b76:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002b7a:	0933      	lsrs	r3, r6, #4
1a002b7c:	fb0a f303 	mul.w	r3, sl, r3
1a002b80:	448a      	add	sl, r1
1a002b82:	fb09 f90a 	mul.w	r9, r9, sl
1a002b86:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002b8a:	4648      	mov	r0, r9
1a002b8c:	b003      	add	sp, #12
1a002b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002b92:	bf00      	nop
1a002b94:	1a0043b0 	.word	0x1a0043b0

1a002b98 <Chip_ADC_GetClockIndex>:
1a002b98:	4b03      	ldr	r3, [pc, #12]	; (1a002ba8 <Chip_ADC_GetClockIndex+0x10>)
1a002b9a:	4298      	cmp	r0, r3
1a002b9c:	d101      	bne.n	1a002ba2 <Chip_ADC_GetClockIndex+0xa>
1a002b9e:	2004      	movs	r0, #4
1a002ba0:	4770      	bx	lr
1a002ba2:	2003      	movs	r0, #3
1a002ba4:	4770      	bx	lr
1a002ba6:	bf00      	nop
1a002ba8:	400e4000 	.word	0x400e4000

1a002bac <getClkDiv>:
1a002bac:	b570      	push	{r4, r5, r6, lr}
1a002bae:	460d      	mov	r5, r1
1a002bb0:	4614      	mov	r4, r2
1a002bb2:	461e      	mov	r6, r3
1a002bb4:	f7ff fff0 	bl	1a002b98 <Chip_ADC_GetClockIndex>
1a002bb8:	f000 faea 	bl	1a003190 <Chip_Clock_GetRate>
1a002bbc:	b115      	cbz	r5, 1a002bc4 <getClkDiv+0x18>
1a002bbe:	fb04 f406 	mul.w	r4, r4, r6
1a002bc2:	e003      	b.n	1a002bcc <getClkDiv+0x20>
1a002bc4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002bc8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a002bcc:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002bd0:	0064      	lsls	r4, r4, #1
1a002bd2:	fbb0 f4f4 	udiv	r4, r0, r4
1a002bd6:	1e60      	subs	r0, r4, #1
1a002bd8:	b2c0      	uxtb	r0, r0
1a002bda:	bd70      	pop	{r4, r5, r6, pc}

1a002bdc <Chip_ADC_Init>:
1a002bdc:	b538      	push	{r3, r4, r5, lr}
1a002bde:	4605      	mov	r5, r0
1a002be0:	460c      	mov	r4, r1
1a002be2:	f7ff ffd9 	bl	1a002b98 <Chip_ADC_GetClockIndex>
1a002be6:	2101      	movs	r1, #1
1a002be8:	460a      	mov	r2, r1
1a002bea:	460b      	mov	r3, r1
1a002bec:	f000 fa98 	bl	1a003120 <Chip_Clock_EnableOpts>
1a002bf0:	2100      	movs	r1, #0
1a002bf2:	60e9      	str	r1, [r5, #12]
1a002bf4:	4a08      	ldr	r2, [pc, #32]	; (1a002c18 <Chip_ADC_Init+0x3c>)
1a002bf6:	6022      	str	r2, [r4, #0]
1a002bf8:	7121      	strb	r1, [r4, #4]
1a002bfa:	7161      	strb	r1, [r4, #5]
1a002bfc:	4628      	mov	r0, r5
1a002bfe:	230b      	movs	r3, #11
1a002c00:	f7ff ffd4 	bl	1a002bac <getClkDiv>
1a002c04:	0200      	lsls	r0, r0, #8
1a002c06:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
1a002c0a:	7920      	ldrb	r0, [r4, #4]
1a002c0c:	f000 0007 	and.w	r0, r0, #7
1a002c10:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
1a002c14:	6028      	str	r0, [r5, #0]
1a002c16:	bd38      	pop	{r3, r4, r5, pc}
1a002c18:	00061a80 	.word	0x00061a80

1a002c1c <Chip_ADC_SetSampleRate>:
1a002c1c:	b570      	push	{r4, r5, r6, lr}
1a002c1e:	4606      	mov	r6, r0
1a002c20:	460d      	mov	r5, r1
1a002c22:	6804      	ldr	r4, [r0, #0]
1a002c24:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002c28:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
1a002c2c:	600a      	str	r2, [r1, #0]
1a002c2e:	790b      	ldrb	r3, [r1, #4]
1a002c30:	f1c3 030b 	rsb	r3, r3, #11
1a002c34:	7949      	ldrb	r1, [r1, #5]
1a002c36:	b2db      	uxtb	r3, r3
1a002c38:	f7ff ffb8 	bl	1a002bac <getClkDiv>
1a002c3c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
1a002c40:	792c      	ldrb	r4, [r5, #4]
1a002c42:	f004 0407 	and.w	r4, r4, #7
1a002c46:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
1a002c4a:	6030      	str	r0, [r6, #0]
1a002c4c:	bd70      	pop	{r4, r5, r6, pc}
1a002c4e:	bf00      	nop

1a002c50 <Chip_ADC_SetResolution>:
1a002c50:	b508      	push	{r3, lr}
1a002c52:	710a      	strb	r2, [r1, #4]
1a002c54:	680a      	ldr	r2, [r1, #0]
1a002c56:	f7ff ffe1 	bl	1a002c1c <Chip_ADC_SetSampleRate>
1a002c5a:	bd08      	pop	{r3, pc}

1a002c5c <SystemCoreClockUpdate>:
1a002c5c:	b508      	push	{r3, lr}
1a002c5e:	2069      	movs	r0, #105	; 0x69
1a002c60:	f000 fa96 	bl	1a003190 <Chip_Clock_GetRate>
1a002c64:	4b01      	ldr	r3, [pc, #4]	; (1a002c6c <SystemCoreClockUpdate+0x10>)
1a002c66:	6018      	str	r0, [r3, #0]
1a002c68:	bd08      	pop	{r3, pc}
1a002c6a:	bf00      	nop
1a002c6c:	10002e30 	.word	0x10002e30

1a002c70 <pll_calc_divs>:
1a002c70:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002c72:	680b      	ldr	r3, [r1, #0]
1a002c74:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002c78:	d002      	beq.n	1a002c80 <pll_calc_divs+0x10>
1a002c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002c7e:	600b      	str	r3, [r1, #0]
1a002c80:	4686      	mov	lr, r0
1a002c82:	2601      	movs	r6, #1
1a002c84:	e041      	b.n	1a002d0a <pll_calc_divs+0x9a>
1a002c86:	680d      	ldr	r5, [r1, #0]
1a002c88:	f015 0f40 	tst.w	r5, #64	; 0x40
1a002c8c:	d008      	beq.n	1a002ca0 <pll_calc_divs+0x30>
1a002c8e:	1c7b      	adds	r3, r7, #1
1a002c90:	fa04 f203 	lsl.w	r2, r4, r3
1a002c94:	694b      	ldr	r3, [r1, #20]
1a002c96:	fb03 f302 	mul.w	r3, r3, r2
1a002c9a:	fbb3 f3f6 	udiv	r3, r3, r6
1a002c9e:	e004      	b.n	1a002caa <pll_calc_divs+0x3a>
1a002ca0:	694b      	ldr	r3, [r1, #20]
1a002ca2:	fb04 f303 	mul.w	r3, r4, r3
1a002ca6:	fbb3 f3f6 	udiv	r3, r3, r6
1a002caa:	4a19      	ldr	r2, [pc, #100]	; (1a002d10 <pll_calc_divs+0xa0>)
1a002cac:	4293      	cmp	r3, r2
1a002cae:	d920      	bls.n	1a002cf2 <pll_calc_divs+0x82>
1a002cb0:	4a18      	ldr	r2, [pc, #96]	; (1a002d14 <pll_calc_divs+0xa4>)
1a002cb2:	4293      	cmp	r3, r2
1a002cb4:	d823      	bhi.n	1a002cfe <pll_calc_divs+0x8e>
1a002cb6:	f015 0f80 	tst.w	r5, #128	; 0x80
1a002cba:	d103      	bne.n	1a002cc4 <pll_calc_divs+0x54>
1a002cbc:	1c7a      	adds	r2, r7, #1
1a002cbe:	fa23 f202 	lsr.w	r2, r3, r2
1a002cc2:	e000      	b.n	1a002cc6 <pll_calc_divs+0x56>
1a002cc4:	461a      	mov	r2, r3
1a002cc6:	1a85      	subs	r5, r0, r2
1a002cc8:	d502      	bpl.n	1a002cd0 <pll_calc_divs+0x60>
1a002cca:	f1c5 0c00 	rsb	ip, r5, #0
1a002cce:	e000      	b.n	1a002cd2 <pll_calc_divs+0x62>
1a002cd0:	46ac      	mov	ip, r5
1a002cd2:	45e6      	cmp	lr, ip
1a002cd4:	d90d      	bls.n	1a002cf2 <pll_calc_divs+0x82>
1a002cd6:	608e      	str	r6, [r1, #8]
1a002cd8:	f107 0e01 	add.w	lr, r7, #1
1a002cdc:	f8c1 e00c 	str.w	lr, [r1, #12]
1a002ce0:	610c      	str	r4, [r1, #16]
1a002ce2:	618a      	str	r2, [r1, #24]
1a002ce4:	61cb      	str	r3, [r1, #28]
1a002ce6:	2d00      	cmp	r5, #0
1a002ce8:	da02      	bge.n	1a002cf0 <pll_calc_divs+0x80>
1a002cea:	f1c5 0e00 	rsb	lr, r5, #0
1a002cee:	e000      	b.n	1a002cf2 <pll_calc_divs+0x82>
1a002cf0:	46ae      	mov	lr, r5
1a002cf2:	3401      	adds	r4, #1
1a002cf4:	e000      	b.n	1a002cf8 <pll_calc_divs+0x88>
1a002cf6:	2401      	movs	r4, #1
1a002cf8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a002cfc:	ddc3      	ble.n	1a002c86 <pll_calc_divs+0x16>
1a002cfe:	3701      	adds	r7, #1
1a002d00:	e000      	b.n	1a002d04 <pll_calc_divs+0x94>
1a002d02:	2700      	movs	r7, #0
1a002d04:	2f03      	cmp	r7, #3
1a002d06:	ddf6      	ble.n	1a002cf6 <pll_calc_divs+0x86>
1a002d08:	3601      	adds	r6, #1
1a002d0a:	2e04      	cmp	r6, #4
1a002d0c:	ddf9      	ble.n	1a002d02 <pll_calc_divs+0x92>
1a002d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002d10:	094c5eff 	.word	0x094c5eff
1a002d14:	1312d000 	.word	0x1312d000

1a002d18 <pll_get_frac>:
1a002d18:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002d1a:	b099      	sub	sp, #100	; 0x64
1a002d1c:	4605      	mov	r5, r0
1a002d1e:	460c      	mov	r4, r1
1a002d20:	4668      	mov	r0, sp
1a002d22:	2100      	movs	r1, #0
1a002d24:	2260      	movs	r2, #96	; 0x60
1a002d26:	f000 fd80 	bl	1a00382a <memset>
1a002d2a:	2380      	movs	r3, #128	; 0x80
1a002d2c:	9300      	str	r3, [sp, #0]
1a002d2e:	6963      	ldr	r3, [r4, #20]
1a002d30:	9305      	str	r3, [sp, #20]
1a002d32:	7923      	ldrb	r3, [r4, #4]
1a002d34:	f88d 3004 	strb.w	r3, [sp, #4]
1a002d38:	4628      	mov	r0, r5
1a002d3a:	4669      	mov	r1, sp
1a002d3c:	f7ff ff98 	bl	1a002c70 <pll_calc_divs>
1a002d40:	9b06      	ldr	r3, [sp, #24]
1a002d42:	42ab      	cmp	r3, r5
1a002d44:	d107      	bne.n	1a002d56 <pll_get_frac+0x3e>
1a002d46:	466d      	mov	r5, sp
1a002d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002d4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002d50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002d54:	e05e      	b.n	1a002e14 <pll_get_frac+0xfc>
1a002d56:	1aeb      	subs	r3, r5, r3
1a002d58:	d500      	bpl.n	1a002d5c <pll_get_frac+0x44>
1a002d5a:	425b      	negs	r3, r3
1a002d5c:	461e      	mov	r6, r3
1a002d5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002d64:	9310      	str	r3, [sp, #64]	; 0x40
1a002d66:	6963      	ldr	r3, [r4, #20]
1a002d68:	9315      	str	r3, [sp, #84]	; 0x54
1a002d6a:	7923      	ldrb	r3, [r4, #4]
1a002d6c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
1a002d70:	4628      	mov	r0, r5
1a002d72:	a910      	add	r1, sp, #64	; 0x40
1a002d74:	f7ff ff7c 	bl	1a002c70 <pll_calc_divs>
1a002d78:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002d7a:	42ab      	cmp	r3, r5
1a002d7c:	d107      	bne.n	1a002d8e <pll_get_frac+0x76>
1a002d7e:	ad10      	add	r5, sp, #64	; 0x40
1a002d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002d84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002d88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002d8c:	e042      	b.n	1a002e14 <pll_get_frac+0xfc>
1a002d8e:	1aeb      	subs	r3, r5, r3
1a002d90:	d500      	bpl.n	1a002d94 <pll_get_frac+0x7c>
1a002d92:	425b      	negs	r3, r3
1a002d94:	461f      	mov	r7, r3
1a002d96:	4b20      	ldr	r3, [pc, #128]	; (1a002e18 <pll_get_frac+0x100>)
1a002d98:	429d      	cmp	r5, r3
1a002d9a:	d812      	bhi.n	1a002dc2 <pll_get_frac+0xaa>
1a002d9c:	2340      	movs	r3, #64	; 0x40
1a002d9e:	9308      	str	r3, [sp, #32]
1a002da0:	6963      	ldr	r3, [r4, #20]
1a002da2:	930d      	str	r3, [sp, #52]	; 0x34
1a002da4:	4628      	mov	r0, r5
1a002da6:	a908      	add	r1, sp, #32
1a002da8:	f7ff ff62 	bl	1a002c70 <pll_calc_divs>
1a002dac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002dae:	42ab      	cmp	r3, r5
1a002db0:	d107      	bne.n	1a002dc2 <pll_get_frac+0xaa>
1a002db2:	ad08      	add	r5, sp, #32
1a002db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002db8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002dbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002dc0:	e028      	b.n	1a002e14 <pll_get_frac+0xfc>
1a002dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002dc4:	1aed      	subs	r5, r5, r3
1a002dc6:	d500      	bpl.n	1a002dca <pll_get_frac+0xb2>
1a002dc8:	426d      	negs	r5, r5
1a002dca:	42ae      	cmp	r6, r5
1a002dcc:	dc11      	bgt.n	1a002df2 <pll_get_frac+0xda>
1a002dce:	42be      	cmp	r6, r7
1a002dd0:	dc07      	bgt.n	1a002de2 <pll_get_frac+0xca>
1a002dd2:	466d      	mov	r5, sp
1a002dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002dd8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002ddc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002de0:	e018      	b.n	1a002e14 <pll_get_frac+0xfc>
1a002de2:	ad10      	add	r5, sp, #64	; 0x40
1a002de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002de8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002df0:	e010      	b.n	1a002e14 <pll_get_frac+0xfc>
1a002df2:	42af      	cmp	r7, r5
1a002df4:	db07      	blt.n	1a002e06 <pll_get_frac+0xee>
1a002df6:	ad08      	add	r5, sp, #32
1a002df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002dfc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002e00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002e04:	e006      	b.n	1a002e14 <pll_get_frac+0xfc>
1a002e06:	ad10      	add	r5, sp, #64	; 0x40
1a002e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002e0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002e10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002e14:	b019      	add	sp, #100	; 0x64
1a002e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002e18:	068e7780 	.word	0x068e7780

1a002e1c <Chip_Clock_FindBaseClock>:
1a002e1c:	b430      	push	{r4, r5}
1a002e1e:	2300      	movs	r3, #0
1a002e20:	211c      	movs	r1, #28
1a002e22:	e010      	b.n	1a002e46 <Chip_Clock_FindBaseClock+0x2a>
1a002e24:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002e28:	0052      	lsls	r2, r2, #1
1a002e2a:	4d0d      	ldr	r5, [pc, #52]	; (1a002e60 <Chip_Clock_FindBaseClock+0x44>)
1a002e2c:	5aaa      	ldrh	r2, [r5, r2]
1a002e2e:	4282      	cmp	r2, r0
1a002e30:	d806      	bhi.n	1a002e40 <Chip_Clock_FindBaseClock+0x24>
1a002e32:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002e36:	0052      	lsls	r2, r2, #1
1a002e38:	442a      	add	r2, r5
1a002e3a:	8852      	ldrh	r2, [r2, #2]
1a002e3c:	4282      	cmp	r2, r0
1a002e3e:	d201      	bcs.n	1a002e44 <Chip_Clock_FindBaseClock+0x28>
1a002e40:	3301      	adds	r3, #1
1a002e42:	e000      	b.n	1a002e46 <Chip_Clock_FindBaseClock+0x2a>
1a002e44:	4621      	mov	r1, r4
1a002e46:	291c      	cmp	r1, #28
1a002e48:	d107      	bne.n	1a002e5a <Chip_Clock_FindBaseClock+0x3e>
1a002e4a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002e4e:	0052      	lsls	r2, r2, #1
1a002e50:	4c03      	ldr	r4, [pc, #12]	; (1a002e60 <Chip_Clock_FindBaseClock+0x44>)
1a002e52:	4422      	add	r2, r4
1a002e54:	7914      	ldrb	r4, [r2, #4]
1a002e56:	428c      	cmp	r4, r1
1a002e58:	d1e4      	bne.n	1a002e24 <Chip_Clock_FindBaseClock+0x8>
1a002e5a:	4608      	mov	r0, r1
1a002e5c:	bc30      	pop	{r4, r5}
1a002e5e:	4770      	bx	lr
1a002e60:	1a0043cc 	.word	0x1a0043cc

1a002e64 <Chip_Clock_EnableCrystal>:
1a002e64:	b082      	sub	sp, #8
1a002e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002e6a:	9301      	str	r3, [sp, #4]
1a002e6c:	4a0d      	ldr	r2, [pc, #52]	; (1a002ea4 <Chip_Clock_EnableCrystal+0x40>)
1a002e6e:	6993      	ldr	r3, [r2, #24]
1a002e70:	f023 0102 	bic.w	r1, r3, #2
1a002e74:	6992      	ldr	r2, [r2, #24]
1a002e76:	428a      	cmp	r2, r1
1a002e78:	d001      	beq.n	1a002e7e <Chip_Clock_EnableCrystal+0x1a>
1a002e7a:	4a0a      	ldr	r2, [pc, #40]	; (1a002ea4 <Chip_Clock_EnableCrystal+0x40>)
1a002e7c:	6191      	str	r1, [r2, #24]
1a002e7e:	f023 0303 	bic.w	r3, r3, #3
1a002e82:	4a09      	ldr	r2, [pc, #36]	; (1a002ea8 <Chip_Clock_EnableCrystal+0x44>)
1a002e84:	6811      	ldr	r1, [r2, #0]
1a002e86:	4a09      	ldr	r2, [pc, #36]	; (1a002eac <Chip_Clock_EnableCrystal+0x48>)
1a002e88:	4291      	cmp	r1, r2
1a002e8a:	d901      	bls.n	1a002e90 <Chip_Clock_EnableCrystal+0x2c>
1a002e8c:	f043 0304 	orr.w	r3, r3, #4
1a002e90:	4a04      	ldr	r2, [pc, #16]	; (1a002ea4 <Chip_Clock_EnableCrystal+0x40>)
1a002e92:	6193      	str	r3, [r2, #24]
1a002e94:	9b01      	ldr	r3, [sp, #4]
1a002e96:	1e5a      	subs	r2, r3, #1
1a002e98:	9201      	str	r2, [sp, #4]
1a002e9a:	2b00      	cmp	r3, #0
1a002e9c:	d1fa      	bne.n	1a002e94 <Chip_Clock_EnableCrystal+0x30>
1a002e9e:	b002      	add	sp, #8
1a002ea0:	4770      	bx	lr
1a002ea2:	bf00      	nop
1a002ea4:	40050000 	.word	0x40050000
1a002ea8:	1a004308 	.word	0x1a004308
1a002eac:	01312cff 	.word	0x01312cff

1a002eb0 <Chip_Clock_GetDividerSource>:
1a002eb0:	3012      	adds	r0, #18
1a002eb2:	4b05      	ldr	r3, [pc, #20]	; (1a002ec8 <Chip_Clock_GetDividerSource+0x18>)
1a002eb4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
1a002eb8:	f010 0f01 	tst.w	r0, #1
1a002ebc:	d102      	bne.n	1a002ec4 <Chip_Clock_GetDividerSource+0x14>
1a002ebe:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002ec2:	4770      	bx	lr
1a002ec4:	2011      	movs	r0, #17
1a002ec6:	4770      	bx	lr
1a002ec8:	40050000 	.word	0x40050000

1a002ecc <Chip_Clock_GetDividerDivisor>:
1a002ecc:	f100 0212 	add.w	r2, r0, #18
1a002ed0:	4b03      	ldr	r3, [pc, #12]	; (1a002ee0 <Chip_Clock_GetDividerDivisor+0x14>)
1a002ed2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002ed6:	4b03      	ldr	r3, [pc, #12]	; (1a002ee4 <Chip_Clock_GetDividerDivisor+0x18>)
1a002ed8:	5c18      	ldrb	r0, [r3, r0]
1a002eda:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002ede:	4770      	bx	lr
1a002ee0:	40050000 	.word	0x40050000
1a002ee4:	1a0043c4 	.word	0x1a0043c4

1a002ee8 <Chip_Clock_GetClockInputHz>:
1a002ee8:	b508      	push	{r3, lr}
1a002eea:	2810      	cmp	r0, #16
1a002eec:	d80a      	bhi.n	1a002f04 <Chip_Clock_GetClockInputHz+0x1c>
1a002eee:	e8df f000 	tbb	[pc, r0]
1a002ef2:	0b42      	.short	0x0b42
1a002ef4:	091f160d 	.word	0x091f160d
1a002ef8:	2b282522 	.word	0x2b282522
1a002efc:	322e0909 	.word	0x322e0909
1a002f00:	3a36      	.short	0x3a36
1a002f02:	3e          	.byte	0x3e
1a002f03:	00          	.byte	0x00
1a002f04:	2000      	movs	r0, #0
1a002f06:	bd08      	pop	{r3, pc}
1a002f08:	481e      	ldr	r0, [pc, #120]	; (1a002f84 <Chip_Clock_GetClockInputHz+0x9c>)
1a002f0a:	bd08      	pop	{r3, pc}
1a002f0c:	4b1e      	ldr	r3, [pc, #120]	; (1a002f88 <Chip_Clock_GetClockInputHz+0xa0>)
1a002f0e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002f12:	f003 0307 	and.w	r3, r3, #7
1a002f16:	2b04      	cmp	r3, #4
1a002f18:	d130      	bne.n	1a002f7c <Chip_Clock_GetClockInputHz+0x94>
1a002f1a:	2000      	movs	r0, #0
1a002f1c:	bd08      	pop	{r3, pc}
1a002f1e:	4b1a      	ldr	r3, [pc, #104]	; (1a002f88 <Chip_Clock_GetClockInputHz+0xa0>)
1a002f20:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002f24:	f003 0307 	and.w	r3, r3, #7
1a002f28:	2b04      	cmp	r3, #4
1a002f2a:	d029      	beq.n	1a002f80 <Chip_Clock_GetClockInputHz+0x98>
1a002f2c:	4817      	ldr	r0, [pc, #92]	; (1a002f8c <Chip_Clock_GetClockInputHz+0xa4>)
1a002f2e:	bd08      	pop	{r3, pc}
1a002f30:	4b17      	ldr	r3, [pc, #92]	; (1a002f90 <Chip_Clock_GetClockInputHz+0xa8>)
1a002f32:	6818      	ldr	r0, [r3, #0]
1a002f34:	bd08      	pop	{r3, pc}
1a002f36:	4b17      	ldr	r3, [pc, #92]	; (1a002f94 <Chip_Clock_GetClockInputHz+0xac>)
1a002f38:	6818      	ldr	r0, [r3, #0]
1a002f3a:	bd08      	pop	{r3, pc}
1a002f3c:	4b16      	ldr	r3, [pc, #88]	; (1a002f98 <Chip_Clock_GetClockInputHz+0xb0>)
1a002f3e:	6818      	ldr	r0, [r3, #0]
1a002f40:	bd08      	pop	{r3, pc}
1a002f42:	4b15      	ldr	r3, [pc, #84]	; (1a002f98 <Chip_Clock_GetClockInputHz+0xb0>)
1a002f44:	6858      	ldr	r0, [r3, #4]
1a002f46:	bd08      	pop	{r3, pc}
1a002f48:	f000 f86a 	bl	1a003020 <Chip_Clock_GetMainPLLHz>
1a002f4c:	bd08      	pop	{r3, pc}
1a002f4e:	2100      	movs	r1, #0
1a002f50:	f000 f89a 	bl	1a003088 <Chip_Clock_GetDivRate>
1a002f54:	bd08      	pop	{r3, pc}
1a002f56:	2101      	movs	r1, #1
1a002f58:	f000 f896 	bl	1a003088 <Chip_Clock_GetDivRate>
1a002f5c:	bd08      	pop	{r3, pc}
1a002f5e:	2102      	movs	r1, #2
1a002f60:	f000 f892 	bl	1a003088 <Chip_Clock_GetDivRate>
1a002f64:	bd08      	pop	{r3, pc}
1a002f66:	2103      	movs	r1, #3
1a002f68:	f000 f88e 	bl	1a003088 <Chip_Clock_GetDivRate>
1a002f6c:	bd08      	pop	{r3, pc}
1a002f6e:	2104      	movs	r1, #4
1a002f70:	f000 f88a 	bl	1a003088 <Chip_Clock_GetDivRate>
1a002f74:	bd08      	pop	{r3, pc}
1a002f76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a002f7a:	bd08      	pop	{r3, pc}
1a002f7c:	4803      	ldr	r0, [pc, #12]	; (1a002f8c <Chip_Clock_GetClockInputHz+0xa4>)
1a002f7e:	bd08      	pop	{r3, pc}
1a002f80:	4806      	ldr	r0, [pc, #24]	; (1a002f9c <Chip_Clock_GetClockInputHz+0xb4>)
1a002f82:	bd08      	pop	{r3, pc}
1a002f84:	00b71b00 	.word	0x00b71b00
1a002f88:	40043000 	.word	0x40043000
1a002f8c:	017d7840 	.word	0x017d7840
1a002f90:	1a0042dc 	.word	0x1a0042dc
1a002f94:	1a004308 	.word	0x1a004308
1a002f98:	10002db8 	.word	0x10002db8
1a002f9c:	02faf080 	.word	0x02faf080

1a002fa0 <Chip_Clock_CalcMainPLLValue>:
1a002fa0:	b538      	push	{r3, r4, r5, lr}
1a002fa2:	4605      	mov	r5, r0
1a002fa4:	460c      	mov	r4, r1
1a002fa6:	7908      	ldrb	r0, [r1, #4]
1a002fa8:	f7ff ff9e 	bl	1a002ee8 <Chip_Clock_GetClockInputHz>
1a002fac:	6160      	str	r0, [r4, #20]
1a002fae:	4b19      	ldr	r3, [pc, #100]	; (1a003014 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002fb0:	442b      	add	r3, r5
1a002fb2:	4a19      	ldr	r2, [pc, #100]	; (1a003018 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002fb4:	4293      	cmp	r3, r2
1a002fb6:	d821      	bhi.n	1a002ffc <Chip_Clock_CalcMainPLLValue+0x5c>
1a002fb8:	b318      	cbz	r0, 1a003002 <Chip_Clock_CalcMainPLLValue+0x62>
1a002fba:	2380      	movs	r3, #128	; 0x80
1a002fbc:	6023      	str	r3, [r4, #0]
1a002fbe:	2300      	movs	r3, #0
1a002fc0:	60a3      	str	r3, [r4, #8]
1a002fc2:	60e3      	str	r3, [r4, #12]
1a002fc4:	fbb5 f3f0 	udiv	r3, r5, r0
1a002fc8:	6123      	str	r3, [r4, #16]
1a002fca:	4a14      	ldr	r2, [pc, #80]	; (1a00301c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002fcc:	4295      	cmp	r5, r2
1a002fce:	d903      	bls.n	1a002fd8 <Chip_Clock_CalcMainPLLValue+0x38>
1a002fd0:	fb03 f000 	mul.w	r0, r3, r0
1a002fd4:	42a8      	cmp	r0, r5
1a002fd6:	d007      	beq.n	1a002fe8 <Chip_Clock_CalcMainPLLValue+0x48>
1a002fd8:	4628      	mov	r0, r5
1a002fda:	4621      	mov	r1, r4
1a002fdc:	f7ff fe9c 	bl	1a002d18 <pll_get_frac>
1a002fe0:	68a3      	ldr	r3, [r4, #8]
1a002fe2:	b18b      	cbz	r3, 1a003008 <Chip_Clock_CalcMainPLLValue+0x68>
1a002fe4:	3b01      	subs	r3, #1
1a002fe6:	60a3      	str	r3, [r4, #8]
1a002fe8:	6923      	ldr	r3, [r4, #16]
1a002fea:	b183      	cbz	r3, 1a00300e <Chip_Clock_CalcMainPLLValue+0x6e>
1a002fec:	68e2      	ldr	r2, [r4, #12]
1a002fee:	b10a      	cbz	r2, 1a002ff4 <Chip_Clock_CalcMainPLLValue+0x54>
1a002ff0:	3a01      	subs	r2, #1
1a002ff2:	60e2      	str	r2, [r4, #12]
1a002ff4:	3b01      	subs	r3, #1
1a002ff6:	6123      	str	r3, [r4, #16]
1a002ff8:	2000      	movs	r0, #0
1a002ffa:	bd38      	pop	{r3, r4, r5, pc}
1a002ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003000:	bd38      	pop	{r3, r4, r5, pc}
1a003002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003006:	bd38      	pop	{r3, r4, r5, pc}
1a003008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00300c:	bd38      	pop	{r3, r4, r5, pc}
1a00300e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003012:	bd38      	pop	{r3, r4, r5, pc}
1a003014:	ff6b3a10 	.word	0xff6b3a10
1a003018:	0b940510 	.word	0x0b940510
1a00301c:	094c5eff 	.word	0x094c5eff

1a003020 <Chip_Clock_GetMainPLLHz>:
1a003020:	b570      	push	{r4, r5, r6, lr}
1a003022:	b082      	sub	sp, #8
1a003024:	4d16      	ldr	r5, [pc, #88]	; (1a003080 <Chip_Clock_GetMainPLLHz+0x60>)
1a003026:	6c6c      	ldr	r4, [r5, #68]	; 0x44
1a003028:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a00302c:	f7ff ff5c 	bl	1a002ee8 <Chip_Clock_GetClockInputHz>
1a003030:	4606      	mov	r6, r0
1a003032:	4b14      	ldr	r3, [pc, #80]	; (1a003084 <Chip_Clock_GetMainPLLHz+0x64>)
1a003034:	6818      	ldr	r0, [r3, #0]
1a003036:	9001      	str	r0, [sp, #4]
1a003038:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a00303a:	f010 0001 	ands.w	r0, r0, #1
1a00303e:	d01d      	beq.n	1a00307c <Chip_Clock_GetMainPLLHz+0x5c>
1a003040:	f3c4 4007 	ubfx	r0, r4, #16, #8
1a003044:	f3c4 3201 	ubfx	r2, r4, #12, #2
1a003048:	f3c4 2101 	ubfx	r1, r4, #8, #2
1a00304c:	f3c4 1580 	ubfx	r5, r4, #6, #1
1a003050:	1c43      	adds	r3, r0, #1
1a003052:	3201      	adds	r2, #1
1a003054:	a802      	add	r0, sp, #8
1a003056:	4401      	add	r1, r0
1a003058:	f811 0c04 	ldrb.w	r0, [r1, #-4]
1a00305c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003060:	d100      	bne.n	1a003064 <Chip_Clock_GetMainPLLHz+0x44>
1a003062:	b125      	cbz	r5, 1a00306e <Chip_Clock_GetMainPLLHz+0x4e>
1a003064:	fbb6 f0f2 	udiv	r0, r6, r2
1a003068:	fb03 f000 	mul.w	r0, r3, r0
1a00306c:	e006      	b.n	1a00307c <Chip_Clock_GetMainPLLHz+0x5c>
1a00306e:	0040      	lsls	r0, r0, #1
1a003070:	fbb3 f3f0 	udiv	r3, r3, r0
1a003074:	fbb6 f0f2 	udiv	r0, r6, r2
1a003078:	fb00 f003 	mul.w	r0, r0, r3
1a00307c:	b002      	add	sp, #8
1a00307e:	bd70      	pop	{r4, r5, r6, pc}
1a003080:	40050000 	.word	0x40050000
1a003084:	1a0043c0 	.word	0x1a0043c0

1a003088 <Chip_Clock_GetDivRate>:
1a003088:	b538      	push	{r3, r4, r5, lr}
1a00308a:	460c      	mov	r4, r1
1a00308c:	4608      	mov	r0, r1
1a00308e:	f7ff ff0f 	bl	1a002eb0 <Chip_Clock_GetDividerSource>
1a003092:	4605      	mov	r5, r0
1a003094:	4620      	mov	r0, r4
1a003096:	f7ff ff19 	bl	1a002ecc <Chip_Clock_GetDividerDivisor>
1a00309a:	4604      	mov	r4, r0
1a00309c:	4628      	mov	r0, r5
1a00309e:	f7ff ff23 	bl	1a002ee8 <Chip_Clock_GetClockInputHz>
1a0030a2:	3401      	adds	r4, #1
1a0030a4:	fbb0 f0f4 	udiv	r0, r0, r4
1a0030a8:	bd38      	pop	{r3, r4, r5, pc}
1a0030aa:	bf00      	nop

1a0030ac <Chip_Clock_SetBaseClock>:
1a0030ac:	b430      	push	{r4, r5}
1a0030ae:	0085      	lsls	r5, r0, #2
1a0030b0:	4c0d      	ldr	r4, [pc, #52]	; (1a0030e8 <Chip_Clock_SetBaseClock+0x3c>)
1a0030b2:	5965      	ldr	r5, [r4, r5]
1a0030b4:	281b      	cmp	r0, #27
1a0030b6:	d80f      	bhi.n	1a0030d8 <Chip_Clock_SetBaseClock+0x2c>
1a0030b8:	2911      	cmp	r1, #17
1a0030ba:	d012      	beq.n	1a0030e2 <Chip_Clock_SetBaseClock+0x36>
1a0030bc:	4c0b      	ldr	r4, [pc, #44]	; (1a0030ec <Chip_Clock_SetBaseClock+0x40>)
1a0030be:	402c      	ands	r4, r5
1a0030c0:	b10a      	cbz	r2, 1a0030c6 <Chip_Clock_SetBaseClock+0x1a>
1a0030c2:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
1a0030c6:	b10b      	cbz	r3, 1a0030cc <Chip_Clock_SetBaseClock+0x20>
1a0030c8:	f044 0401 	orr.w	r4, r4, #1
1a0030cc:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
1a0030d0:	0080      	lsls	r0, r0, #2
1a0030d2:	4b05      	ldr	r3, [pc, #20]	; (1a0030e8 <Chip_Clock_SetBaseClock+0x3c>)
1a0030d4:	501c      	str	r4, [r3, r0]
1a0030d6:	e004      	b.n	1a0030e2 <Chip_Clock_SetBaseClock+0x36>
1a0030d8:	f045 0501 	orr.w	r5, r5, #1
1a0030dc:	0080      	lsls	r0, r0, #2
1a0030de:	4b02      	ldr	r3, [pc, #8]	; (1a0030e8 <Chip_Clock_SetBaseClock+0x3c>)
1a0030e0:	501d      	str	r5, [r3, r0]
1a0030e2:	bc30      	pop	{r4, r5}
1a0030e4:	4770      	bx	lr
1a0030e6:	bf00      	nop
1a0030e8:	4005005c 	.word	0x4005005c
1a0030ec:	e0fff7fe 	.word	0xe0fff7fe

1a0030f0 <Chip_Clock_GetBaseClock>:
1a0030f0:	281b      	cmp	r0, #27
1a0030f2:	d808      	bhi.n	1a003106 <Chip_Clock_GetBaseClock+0x16>
1a0030f4:	0080      	lsls	r0, r0, #2
1a0030f6:	4b06      	ldr	r3, [pc, #24]	; (1a003110 <Chip_Clock_GetBaseClock+0x20>)
1a0030f8:	5818      	ldr	r0, [r3, r0]
1a0030fa:	f010 0f01 	tst.w	r0, #1
1a0030fe:	d104      	bne.n	1a00310a <Chip_Clock_GetBaseClock+0x1a>
1a003100:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003104:	4770      	bx	lr
1a003106:	2011      	movs	r0, #17
1a003108:	4770      	bx	lr
1a00310a:	2011      	movs	r0, #17
1a00310c:	4770      	bx	lr
1a00310e:	bf00      	nop
1a003110:	4005005c 	.word	0x4005005c

1a003114 <Chip_Clock_GetBaseClocktHz>:
1a003114:	b508      	push	{r3, lr}
1a003116:	f7ff ffeb 	bl	1a0030f0 <Chip_Clock_GetBaseClock>
1a00311a:	f7ff fee5 	bl	1a002ee8 <Chip_Clock_GetClockInputHz>
1a00311e:	bd08      	pop	{r3, pc}

1a003120 <Chip_Clock_EnableOpts>:
1a003120:	b909      	cbnz	r1, 1a003126 <Chip_Clock_EnableOpts+0x6>
1a003122:	2101      	movs	r1, #1
1a003124:	e000      	b.n	1a003128 <Chip_Clock_EnableOpts+0x8>
1a003126:	2103      	movs	r1, #3
1a003128:	b10a      	cbz	r2, 1a00312e <Chip_Clock_EnableOpts+0xe>
1a00312a:	f041 0104 	orr.w	r1, r1, #4
1a00312e:	2b02      	cmp	r3, #2
1a003130:	d101      	bne.n	1a003136 <Chip_Clock_EnableOpts+0x16>
1a003132:	f041 0120 	orr.w	r1, r1, #32
1a003136:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00313a:	d305      	bcc.n	1a003148 <Chip_Clock_EnableOpts+0x28>
1a00313c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003140:	4b04      	ldr	r3, [pc, #16]	; (1a003154 <Chip_Clock_EnableOpts+0x34>)
1a003142:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003146:	4770      	bx	lr
1a003148:	3020      	adds	r0, #32
1a00314a:	4b03      	ldr	r3, [pc, #12]	; (1a003158 <Chip_Clock_EnableOpts+0x38>)
1a00314c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003150:	4770      	bx	lr
1a003152:	bf00      	nop
1a003154:	40052000 	.word	0x40052000
1a003158:	40051000 	.word	0x40051000

1a00315c <Chip_Clock_Enable>:
1a00315c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003160:	d309      	bcc.n	1a003176 <Chip_Clock_Enable+0x1a>
1a003162:	4a09      	ldr	r2, [pc, #36]	; (1a003188 <Chip_Clock_Enable+0x2c>)
1a003164:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003168:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00316c:	f043 0301 	orr.w	r3, r3, #1
1a003170:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003174:	4770      	bx	lr
1a003176:	4a05      	ldr	r2, [pc, #20]	; (1a00318c <Chip_Clock_Enable+0x30>)
1a003178:	3020      	adds	r0, #32
1a00317a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00317e:	f043 0301 	orr.w	r3, r3, #1
1a003182:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003186:	4770      	bx	lr
1a003188:	40052000 	.word	0x40052000
1a00318c:	40051000 	.word	0x40051000

1a003190 <Chip_Clock_GetRate>:
1a003190:	b510      	push	{r4, lr}
1a003192:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003196:	d305      	bcc.n	1a0031a4 <Chip_Clock_GetRate+0x14>
1a003198:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a00319c:	4a0d      	ldr	r2, [pc, #52]	; (1a0031d4 <Chip_Clock_GetRate+0x44>)
1a00319e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0031a2:	e004      	b.n	1a0031ae <Chip_Clock_GetRate+0x1e>
1a0031a4:	f100 0320 	add.w	r3, r0, #32
1a0031a8:	4a0b      	ldr	r2, [pc, #44]	; (1a0031d8 <Chip_Clock_GetRate+0x48>)
1a0031aa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0031ae:	f014 0f01 	tst.w	r4, #1
1a0031b2:	d00c      	beq.n	1a0031ce <Chip_Clock_GetRate+0x3e>
1a0031b4:	f7ff fe32 	bl	1a002e1c <Chip_Clock_FindBaseClock>
1a0031b8:	f7ff ffac 	bl	1a003114 <Chip_Clock_GetBaseClocktHz>
1a0031bc:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0031c0:	d101      	bne.n	1a0031c6 <Chip_Clock_GetRate+0x36>
1a0031c2:	2301      	movs	r3, #1
1a0031c4:	e000      	b.n	1a0031c8 <Chip_Clock_GetRate+0x38>
1a0031c6:	2302      	movs	r3, #2
1a0031c8:	fbb0 f0f3 	udiv	r0, r0, r3
1a0031cc:	bd10      	pop	{r4, pc}
1a0031ce:	2000      	movs	r0, #0
1a0031d0:	bd10      	pop	{r4, pc}
1a0031d2:	bf00      	nop
1a0031d4:	40052000 	.word	0x40052000
1a0031d8:	40051000 	.word	0x40051000

1a0031dc <fpuInit>:
1a0031dc:	b084      	sub	sp, #16
1a0031de:	4b10      	ldr	r3, [pc, #64]	; (1a003220 <fpuInit+0x44>)
1a0031e0:	681b      	ldr	r3, [r3, #0]
1a0031e2:	9302      	str	r3, [sp, #8]
1a0031e4:	4b0f      	ldr	r3, [pc, #60]	; (1a003224 <fpuInit+0x48>)
1a0031e6:	681b      	ldr	r3, [r3, #0]
1a0031e8:	9301      	str	r3, [sp, #4]
1a0031ea:	9a02      	ldr	r2, [sp, #8]
1a0031ec:	4b0e      	ldr	r3, [pc, #56]	; (1a003228 <fpuInit+0x4c>)
1a0031ee:	429a      	cmp	r2, r3
1a0031f0:	d105      	bne.n	1a0031fe <fpuInit+0x22>
1a0031f2:	9a01      	ldr	r2, [sp, #4]
1a0031f4:	4b0d      	ldr	r3, [pc, #52]	; (1a00322c <fpuInit+0x50>)
1a0031f6:	429a      	cmp	r2, r3
1a0031f8:	d003      	beq.n	1a003202 <fpuInit+0x26>
1a0031fa:	2300      	movs	r3, #0
1a0031fc:	e002      	b.n	1a003204 <fpuInit+0x28>
1a0031fe:	2300      	movs	r3, #0
1a003200:	e000      	b.n	1a003204 <fpuInit+0x28>
1a003202:	2301      	movs	r3, #1
1a003204:	f013 0fff 	tst.w	r3, #255	; 0xff
1a003208:	d008      	beq.n	1a00321c <fpuInit+0x40>
1a00320a:	4a09      	ldr	r2, [pc, #36]	; (1a003230 <fpuInit+0x54>)
1a00320c:	6813      	ldr	r3, [r2, #0]
1a00320e:	9303      	str	r3, [sp, #12]
1a003210:	9b03      	ldr	r3, [sp, #12]
1a003212:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003216:	9303      	str	r3, [sp, #12]
1a003218:	9b03      	ldr	r3, [sp, #12]
1a00321a:	6013      	str	r3, [r2, #0]
1a00321c:	b004      	add	sp, #16
1a00321e:	4770      	bx	lr
1a003220:	e000ef40 	.word	0xe000ef40
1a003224:	e000ef44 	.word	0xe000ef44
1a003228:	10110021 	.word	0x10110021
1a00322c:	11000011 	.word	0x11000011
1a003230:	e000ed88 	.word	0xe000ed88

1a003234 <Chip_GPIO_Init>:
1a003234:	4770      	bx	lr
1a003236:	bf00      	nop

1a003238 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003238:	b570      	push	{r4, r5, r6, lr}
1a00323a:	b08a      	sub	sp, #40	; 0x28
1a00323c:	4605      	mov	r5, r0
1a00323e:	460e      	mov	r6, r1
1a003240:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003242:	f242 7310 	movw	r3, #10000	; 0x2710
1a003246:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003248:	2806      	cmp	r0, #6
1a00324a:	d018      	beq.n	1a00327e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00324c:	2300      	movs	r3, #0
1a00324e:	2201      	movs	r2, #1
1a003250:	4629      	mov	r1, r5
1a003252:	2004      	movs	r0, #4
1a003254:	f7ff ff2a 	bl	1a0030ac <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003258:	4a49      	ldr	r2, [pc, #292]	; (1a003380 <Chip_SetupCoreClock+0x148>)
1a00325a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00325c:	f043 0301 	orr.w	r3, r3, #1
1a003260:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003262:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003266:	a901      	add	r1, sp, #4
1a003268:	4630      	mov	r0, r6
1a00326a:	f7ff fe99 	bl	1a002fa0 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00326e:	4b45      	ldr	r3, [pc, #276]	; (1a003384 <Chip_SetupCoreClock+0x14c>)
1a003270:	429e      	cmp	r6, r3
1a003272:	d916      	bls.n	1a0032a2 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003274:	9b01      	ldr	r3, [sp, #4]
1a003276:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00327a:	d003      	beq.n	1a003284 <Chip_SetupCoreClock+0x4c>
1a00327c:	e7fe      	b.n	1a00327c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00327e:	f7ff fdf1 	bl	1a002e64 <Chip_Clock_EnableCrystal>
1a003282:	e7e3      	b.n	1a00324c <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003284:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003288:	d005      	beq.n	1a003296 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00328a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00328e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003290:	2500      	movs	r5, #0
			direct = 1;
1a003292:	2601      	movs	r6, #1
1a003294:	e007      	b.n	1a0032a6 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003296:	9b04      	ldr	r3, [sp, #16]
1a003298:	3301      	adds	r3, #1
1a00329a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a00329c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00329e:	2600      	movs	r6, #0
1a0032a0:	e001      	b.n	1a0032a6 <Chip_SetupCoreClock+0x6e>
1a0032a2:	2500      	movs	r5, #0
1a0032a4:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0032a6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0032aa:	9b01      	ldr	r3, [sp, #4]
1a0032ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0032b0:	9a05      	ldr	r2, [sp, #20]
1a0032b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0032b6:	9a03      	ldr	r2, [sp, #12]
1a0032b8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0032bc:	9a04      	ldr	r2, [sp, #16]
1a0032be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0032c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0032c6:	4a2e      	ldr	r2, [pc, #184]	; (1a003380 <Chip_SetupCoreClock+0x148>)
1a0032c8:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0032ca:	4b2d      	ldr	r3, [pc, #180]	; (1a003380 <Chip_SetupCoreClock+0x148>)
1a0032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0032ce:	f013 0f01 	tst.w	r3, #1
1a0032d2:	d0fa      	beq.n	1a0032ca <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0032d4:	2300      	movs	r3, #0
1a0032d6:	2201      	movs	r2, #1
1a0032d8:	2109      	movs	r1, #9
1a0032da:	2004      	movs	r0, #4
1a0032dc:	f7ff fee6 	bl	1a0030ac <Chip_Clock_SetBaseClock>

	if (direct) {
1a0032e0:	b1fe      	cbz	r6, 1a003322 <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0032e2:	f242 7310 	movw	r3, #10000	; 0x2710
1a0032e6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0032e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0032ea:	1e5a      	subs	r2, r3, #1
1a0032ec:	9209      	str	r2, [sp, #36]	; 0x24
1a0032ee:	2b00      	cmp	r3, #0
1a0032f0:	d1fa      	bne.n	1a0032e8 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0032f2:	9b01      	ldr	r3, [sp, #4]
1a0032f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0032f8:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0032fa:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0032fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003302:	9a05      	ldr	r2, [sp, #20]
1a003304:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003308:	9a03      	ldr	r2, [sp, #12]
1a00330a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00330e:	9a04      	ldr	r2, [sp, #16]
1a003310:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003318:	4a19      	ldr	r2, [pc, #100]	; (1a003380 <Chip_SetupCoreClock+0x148>)
1a00331a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a00331c:	b36c      	cbz	r4, 1a00337a <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00331e:	2400      	movs	r4, #0
1a003320:	e029      	b.n	1a003376 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a003322:	2d00      	cmp	r5, #0
1a003324:	d0fa      	beq.n	1a00331c <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003326:	f242 7310 	movw	r3, #10000	; 0x2710
1a00332a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00332c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00332e:	1e5a      	subs	r2, r3, #1
1a003330:	9209      	str	r2, [sp, #36]	; 0x24
1a003332:	2b00      	cmp	r3, #0
1a003334:	d1fa      	bne.n	1a00332c <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a003336:	9b04      	ldr	r3, [sp, #16]
1a003338:	1e5a      	subs	r2, r3, #1
1a00333a:	9204      	str	r2, [sp, #16]
1a00333c:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a003340:	9b01      	ldr	r3, [sp, #4]
1a003342:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003346:	9905      	ldr	r1, [sp, #20]
1a003348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00334c:	9903      	ldr	r1, [sp, #12]
1a00334e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a003352:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003356:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00335a:	4a09      	ldr	r2, [pc, #36]	; (1a003380 <Chip_SetupCoreClock+0x148>)
1a00335c:	6453      	str	r3, [r2, #68]	; 0x44
1a00335e:	e7dd      	b.n	1a00331c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003360:	4809      	ldr	r0, [pc, #36]	; (1a003388 <Chip_SetupCoreClock+0x150>)
1a003362:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003366:	78cb      	ldrb	r3, [r1, #3]
1a003368:	788a      	ldrb	r2, [r1, #2]
1a00336a:	7849      	ldrb	r1, [r1, #1]
1a00336c:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003370:	f7ff fe9c 	bl	1a0030ac <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003374:	3401      	adds	r4, #1
1a003376:	2c11      	cmp	r4, #17
1a003378:	d9f2      	bls.n	1a003360 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00337a:	b00a      	add	sp, #40	; 0x28
1a00337c:	bd70      	pop	{r4, r5, r6, pc}
1a00337e:	bf00      	nop
1a003380:	40050000 	.word	0x40050000
1a003384:	068e7780 	.word	0x068e7780
1a003388:	1a004438 	.word	0x1a004438

1a00338c <Chip_SSP_GetClockIndex>:
1a00338c:	4b03      	ldr	r3, [pc, #12]	; (1a00339c <Chip_SSP_GetClockIndex+0x10>)
1a00338e:	4298      	cmp	r0, r3
1a003390:	d101      	bne.n	1a003396 <Chip_SSP_GetClockIndex+0xa>
1a003392:	20a5      	movs	r0, #165	; 0xa5
1a003394:	4770      	bx	lr
1a003396:	2083      	movs	r0, #131	; 0x83
1a003398:	4770      	bx	lr
1a00339a:	bf00      	nop
1a00339c:	400c5000 	.word	0x400c5000

1a0033a0 <Chip_SSP_GetPeriphClockIndex>:
1a0033a0:	4b04      	ldr	r3, [pc, #16]	; (1a0033b4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0033a2:	4298      	cmp	r0, r3
1a0033a4:	d102      	bne.n	1a0033ac <Chip_SSP_GetPeriphClockIndex+0xc>
1a0033a6:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0033aa:	4770      	bx	lr
1a0033ac:	f240 2002 	movw	r0, #514	; 0x202
1a0033b0:	4770      	bx	lr
1a0033b2:	bf00      	nop
1a0033b4:	400c5000 	.word	0x400c5000

1a0033b8 <Chip_SSP_SetClockRate>:
1a0033b8:	6803      	ldr	r3, [r0, #0]
1a0033ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1a0033be:	0209      	lsls	r1, r1, #8
1a0033c0:	b289      	uxth	r1, r1
1a0033c2:	430b      	orrs	r3, r1
1a0033c4:	6003      	str	r3, [r0, #0]
1a0033c6:	6102      	str	r2, [r0, #16]
1a0033c8:	4770      	bx	lr
1a0033ca:	bf00      	nop

1a0033cc <Chip_SSP_SetBitRate>:
1a0033cc:	b570      	push	{r4, r5, r6, lr}
1a0033ce:	4606      	mov	r6, r0
1a0033d0:	460d      	mov	r5, r1
1a0033d2:	f7ff ffe5 	bl	1a0033a0 <Chip_SSP_GetPeriphClockIndex>
1a0033d6:	f7ff fedb 	bl	1a003190 <Chip_Clock_GetRate>
1a0033da:	2202      	movs	r2, #2
1a0033dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0033e0:	2100      	movs	r1, #0
1a0033e2:	e00c      	b.n	1a0033fe <Chip_SSP_SetBitRate+0x32>
1a0033e4:	1c4c      	adds	r4, r1, #1
1a0033e6:	fb02 f304 	mul.w	r3, r2, r4
1a0033ea:	fbb0 f3f3 	udiv	r3, r0, r3
1a0033ee:	42ab      	cmp	r3, r5
1a0033f0:	d905      	bls.n	1a0033fe <Chip_SSP_SetBitRate+0x32>
1a0033f2:	2cff      	cmp	r4, #255	; 0xff
1a0033f4:	d902      	bls.n	1a0033fc <Chip_SSP_SetBitRate+0x30>
1a0033f6:	3202      	adds	r2, #2
1a0033f8:	2100      	movs	r1, #0
1a0033fa:	e000      	b.n	1a0033fe <Chip_SSP_SetBitRate+0x32>
1a0033fc:	4621      	mov	r1, r4
1a0033fe:	42ab      	cmp	r3, r5
1a003400:	d8f0      	bhi.n	1a0033e4 <Chip_SSP_SetBitRate+0x18>
1a003402:	4630      	mov	r0, r6
1a003404:	f7ff ffd8 	bl	1a0033b8 <Chip_SSP_SetClockRate>
1a003408:	bd70      	pop	{r4, r5, r6, pc}
1a00340a:	bf00      	nop

1a00340c <Chip_SSP_Init>:
1a00340c:	b510      	push	{r4, lr}
1a00340e:	4604      	mov	r4, r0
1a003410:	f7ff ffbc 	bl	1a00338c <Chip_SSP_GetClockIndex>
1a003414:	f7ff fea2 	bl	1a00315c <Chip_Clock_Enable>
1a003418:	4620      	mov	r0, r4
1a00341a:	f7ff ffc1 	bl	1a0033a0 <Chip_SSP_GetPeriphClockIndex>
1a00341e:	f7ff fe9d 	bl	1a00315c <Chip_Clock_Enable>
1a003422:	6863      	ldr	r3, [r4, #4]
1a003424:	f023 0304 	bic.w	r3, r3, #4
1a003428:	6063      	str	r3, [r4, #4]
1a00342a:	6823      	ldr	r3, [r4, #0]
1a00342c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003430:	f043 0307 	orr.w	r3, r3, #7
1a003434:	6023      	str	r3, [r4, #0]
1a003436:	4620      	mov	r0, r4
1a003438:	4901      	ldr	r1, [pc, #4]	; (1a003440 <Chip_SSP_Init+0x34>)
1a00343a:	f7ff ffc7 	bl	1a0033cc <Chip_SSP_SetBitRate>
1a00343e:	bd10      	pop	{r4, pc}
1a003440:	000186a0 	.word	0x000186a0

1a003444 <ResetISR>:
void ResetISR(void) {
1a003444:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a003446:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a003448:	4b18      	ldr	r3, [pc, #96]	; (1a0034ac <ResetISR+0x68>)
1a00344a:	4a19      	ldr	r2, [pc, #100]	; (1a0034b0 <ResetISR+0x6c>)
1a00344c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00344e:	3304      	adds	r3, #4
1a003450:	4a18      	ldr	r2, [pc, #96]	; (1a0034b4 <ResetISR+0x70>)
1a003452:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a003454:	2300      	movs	r3, #0
1a003456:	e005      	b.n	1a003464 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a003458:	4a17      	ldr	r2, [pc, #92]	; (1a0034b8 <ResetISR+0x74>)
1a00345a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00345e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a003462:	3301      	adds	r3, #1
1a003464:	2b07      	cmp	r3, #7
1a003466:	d9f7      	bls.n	1a003458 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a003468:	b662      	cpsie	i
    SystemInit();
1a00346a:	f7ff fa21 	bl	1a0028b0 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a00346e:	4b13      	ldr	r3, [pc, #76]	; (1a0034bc <ResetISR+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a003470:	e007      	b.n	1a003482 <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a003472:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a003476:	689a      	ldr	r2, [r3, #8]
1a003478:	6859      	ldr	r1, [r3, #4]
1a00347a:	6818      	ldr	r0, [r3, #0]
1a00347c:	f7fc fe8b 	bl	1a000196 <data_init>
        SectionLen = *SectionTableAddr++;
1a003480:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a003482:	4a0f      	ldr	r2, [pc, #60]	; (1a0034c0 <ResetISR+0x7c>)
1a003484:	4293      	cmp	r3, r2
1a003486:	d3f4      	bcc.n	1a003472 <ResetISR+0x2e>
1a003488:	e006      	b.n	1a003498 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a00348a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a00348c:	6859      	ldr	r1, [r3, #4]
1a00348e:	f854 0b08 	ldr.w	r0, [r4], #8
1a003492:	f7fc fe8f 	bl	1a0001b4 <bss_init>
        SectionLen = *SectionTableAddr++;
1a003496:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a003498:	4a0a      	ldr	r2, [pc, #40]	; (1a0034c4 <ResetISR+0x80>)
1a00349a:	4293      	cmp	r3, r2
1a00349c:	d3f5      	bcc.n	1a00348a <ResetISR+0x46>
    __libc_init_array();
1a00349e:	f000 f995 	bl	1a0037cc <__libc_init_array>
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a0034a2:	f7ff f9d7 	bl	1a002854 <Board_Init>
    main();
1a0034a6:	f7fc ffc7 	bl	1a000438 <main>
1a0034aa:	e7fe      	b.n	1a0034aa <ResetISR+0x66>
1a0034ac:	40053100 	.word	0x40053100
1a0034b0:	10df1000 	.word	0x10df1000
1a0034b4:	01dff7ff 	.word	0x01dff7ff
1a0034b8:	e000e280 	.word	0xe000e280
1a0034bc:	1a000114 	.word	0x1a000114
1a0034c0:	1a000150 	.word	0x1a000150
1a0034c4:	1a000178 	.word	0x1a000178

1a0034c8 <_init>:
void _init(void) {}
1a0034c8:	4770      	bx	lr
1a0034ca:	Address 0x000000001a0034ca is out of bounds.


1a0034cc <__aeabi_uldivmod>:
1a0034cc:	b953      	cbnz	r3, 1a0034e4 <__aeabi_uldivmod+0x18>
1a0034ce:	b94a      	cbnz	r2, 1a0034e4 <__aeabi_uldivmod+0x18>
1a0034d0:	2900      	cmp	r1, #0
1a0034d2:	bf08      	it	eq
1a0034d4:	2800      	cmpeq	r0, #0
1a0034d6:	bf1c      	itt	ne
1a0034d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0034dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0034e0:	f000 b972 	b.w	1a0037c8 <__aeabi_idiv0>
1a0034e4:	f1ad 0c08 	sub.w	ip, sp, #8
1a0034e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0034ec:	f000 f806 	bl	1a0034fc <__udivmoddi4>
1a0034f0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0034f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0034f8:	b004      	add	sp, #16
1a0034fa:	4770      	bx	lr

1a0034fc <__udivmoddi4>:
1a0034fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003500:	9e08      	ldr	r6, [sp, #32]
1a003502:	4604      	mov	r4, r0
1a003504:	4688      	mov	r8, r1
1a003506:	2b00      	cmp	r3, #0
1a003508:	d14b      	bne.n	1a0035a2 <__udivmoddi4+0xa6>
1a00350a:	428a      	cmp	r2, r1
1a00350c:	4615      	mov	r5, r2
1a00350e:	d967      	bls.n	1a0035e0 <__udivmoddi4+0xe4>
1a003510:	fab2 f282 	clz	r2, r2
1a003514:	b14a      	cbz	r2, 1a00352a <__udivmoddi4+0x2e>
1a003516:	f1c2 0720 	rsb	r7, r2, #32
1a00351a:	fa01 f302 	lsl.w	r3, r1, r2
1a00351e:	fa20 f707 	lsr.w	r7, r0, r7
1a003522:	4095      	lsls	r5, r2
1a003524:	ea47 0803 	orr.w	r8, r7, r3
1a003528:	4094      	lsls	r4, r2
1a00352a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00352e:	0c23      	lsrs	r3, r4, #16
1a003530:	fbb8 f7fe 	udiv	r7, r8, lr
1a003534:	fa1f fc85 	uxth.w	ip, r5
1a003538:	fb0e 8817 	mls	r8, lr, r7, r8
1a00353c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003540:	fb07 f10c 	mul.w	r1, r7, ip
1a003544:	4299      	cmp	r1, r3
1a003546:	d909      	bls.n	1a00355c <__udivmoddi4+0x60>
1a003548:	18eb      	adds	r3, r5, r3
1a00354a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a00354e:	f080 811b 	bcs.w	1a003788 <__udivmoddi4+0x28c>
1a003552:	4299      	cmp	r1, r3
1a003554:	f240 8118 	bls.w	1a003788 <__udivmoddi4+0x28c>
1a003558:	3f02      	subs	r7, #2
1a00355a:	442b      	add	r3, r5
1a00355c:	1a5b      	subs	r3, r3, r1
1a00355e:	b2a4      	uxth	r4, r4
1a003560:	fbb3 f0fe 	udiv	r0, r3, lr
1a003564:	fb0e 3310 	mls	r3, lr, r0, r3
1a003568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00356c:	fb00 fc0c 	mul.w	ip, r0, ip
1a003570:	45a4      	cmp	ip, r4
1a003572:	d909      	bls.n	1a003588 <__udivmoddi4+0x8c>
1a003574:	192c      	adds	r4, r5, r4
1a003576:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00357a:	f080 8107 	bcs.w	1a00378c <__udivmoddi4+0x290>
1a00357e:	45a4      	cmp	ip, r4
1a003580:	f240 8104 	bls.w	1a00378c <__udivmoddi4+0x290>
1a003584:	3802      	subs	r0, #2
1a003586:	442c      	add	r4, r5
1a003588:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00358c:	eba4 040c 	sub.w	r4, r4, ip
1a003590:	2700      	movs	r7, #0
1a003592:	b11e      	cbz	r6, 1a00359c <__udivmoddi4+0xa0>
1a003594:	40d4      	lsrs	r4, r2
1a003596:	2300      	movs	r3, #0
1a003598:	e9c6 4300 	strd	r4, r3, [r6]
1a00359c:	4639      	mov	r1, r7
1a00359e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0035a2:	428b      	cmp	r3, r1
1a0035a4:	d909      	bls.n	1a0035ba <__udivmoddi4+0xbe>
1a0035a6:	2e00      	cmp	r6, #0
1a0035a8:	f000 80eb 	beq.w	1a003782 <__udivmoddi4+0x286>
1a0035ac:	2700      	movs	r7, #0
1a0035ae:	e9c6 0100 	strd	r0, r1, [r6]
1a0035b2:	4638      	mov	r0, r7
1a0035b4:	4639      	mov	r1, r7
1a0035b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0035ba:	fab3 f783 	clz	r7, r3
1a0035be:	2f00      	cmp	r7, #0
1a0035c0:	d147      	bne.n	1a003652 <__udivmoddi4+0x156>
1a0035c2:	428b      	cmp	r3, r1
1a0035c4:	d302      	bcc.n	1a0035cc <__udivmoddi4+0xd0>
1a0035c6:	4282      	cmp	r2, r0
1a0035c8:	f200 80fa 	bhi.w	1a0037c0 <__udivmoddi4+0x2c4>
1a0035cc:	1a84      	subs	r4, r0, r2
1a0035ce:	eb61 0303 	sbc.w	r3, r1, r3
1a0035d2:	2001      	movs	r0, #1
1a0035d4:	4698      	mov	r8, r3
1a0035d6:	2e00      	cmp	r6, #0
1a0035d8:	d0e0      	beq.n	1a00359c <__udivmoddi4+0xa0>
1a0035da:	e9c6 4800 	strd	r4, r8, [r6]
1a0035de:	e7dd      	b.n	1a00359c <__udivmoddi4+0xa0>
1a0035e0:	b902      	cbnz	r2, 1a0035e4 <__udivmoddi4+0xe8>
1a0035e2:	deff      	udf	#255	; 0xff
1a0035e4:	fab2 f282 	clz	r2, r2
1a0035e8:	2a00      	cmp	r2, #0
1a0035ea:	f040 808f 	bne.w	1a00370c <__udivmoddi4+0x210>
1a0035ee:	1b49      	subs	r1, r1, r5
1a0035f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0035f4:	fa1f f885 	uxth.w	r8, r5
1a0035f8:	2701      	movs	r7, #1
1a0035fa:	fbb1 fcfe 	udiv	ip, r1, lr
1a0035fe:	0c23      	lsrs	r3, r4, #16
1a003600:	fb0e 111c 	mls	r1, lr, ip, r1
1a003604:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003608:	fb08 f10c 	mul.w	r1, r8, ip
1a00360c:	4299      	cmp	r1, r3
1a00360e:	d907      	bls.n	1a003620 <__udivmoddi4+0x124>
1a003610:	18eb      	adds	r3, r5, r3
1a003612:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a003616:	d202      	bcs.n	1a00361e <__udivmoddi4+0x122>
1a003618:	4299      	cmp	r1, r3
1a00361a:	f200 80cd 	bhi.w	1a0037b8 <__udivmoddi4+0x2bc>
1a00361e:	4684      	mov	ip, r0
1a003620:	1a59      	subs	r1, r3, r1
1a003622:	b2a3      	uxth	r3, r4
1a003624:	fbb1 f0fe 	udiv	r0, r1, lr
1a003628:	fb0e 1410 	mls	r4, lr, r0, r1
1a00362c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003630:	fb08 f800 	mul.w	r8, r8, r0
1a003634:	45a0      	cmp	r8, r4
1a003636:	d907      	bls.n	1a003648 <__udivmoddi4+0x14c>
1a003638:	192c      	adds	r4, r5, r4
1a00363a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00363e:	d202      	bcs.n	1a003646 <__udivmoddi4+0x14a>
1a003640:	45a0      	cmp	r8, r4
1a003642:	f200 80b6 	bhi.w	1a0037b2 <__udivmoddi4+0x2b6>
1a003646:	4618      	mov	r0, r3
1a003648:	eba4 0408 	sub.w	r4, r4, r8
1a00364c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003650:	e79f      	b.n	1a003592 <__udivmoddi4+0x96>
1a003652:	f1c7 0c20 	rsb	ip, r7, #32
1a003656:	40bb      	lsls	r3, r7
1a003658:	fa22 fe0c 	lsr.w	lr, r2, ip
1a00365c:	ea4e 0e03 	orr.w	lr, lr, r3
1a003660:	fa01 f407 	lsl.w	r4, r1, r7
1a003664:	fa20 f50c 	lsr.w	r5, r0, ip
1a003668:	fa21 f30c 	lsr.w	r3, r1, ip
1a00366c:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a003670:	4325      	orrs	r5, r4
1a003672:	fbb3 f9f8 	udiv	r9, r3, r8
1a003676:	0c2c      	lsrs	r4, r5, #16
1a003678:	fb08 3319 	mls	r3, r8, r9, r3
1a00367c:	fa1f fa8e 	uxth.w	sl, lr
1a003680:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a003684:	fb09 f40a 	mul.w	r4, r9, sl
1a003688:	429c      	cmp	r4, r3
1a00368a:	fa02 f207 	lsl.w	r2, r2, r7
1a00368e:	fa00 f107 	lsl.w	r1, r0, r7
1a003692:	d90b      	bls.n	1a0036ac <__udivmoddi4+0x1b0>
1a003694:	eb1e 0303 	adds.w	r3, lr, r3
1a003698:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a00369c:	f080 8087 	bcs.w	1a0037ae <__udivmoddi4+0x2b2>
1a0036a0:	429c      	cmp	r4, r3
1a0036a2:	f240 8084 	bls.w	1a0037ae <__udivmoddi4+0x2b2>
1a0036a6:	f1a9 0902 	sub.w	r9, r9, #2
1a0036aa:	4473      	add	r3, lr
1a0036ac:	1b1b      	subs	r3, r3, r4
1a0036ae:	b2ad      	uxth	r5, r5
1a0036b0:	fbb3 f0f8 	udiv	r0, r3, r8
1a0036b4:	fb08 3310 	mls	r3, r8, r0, r3
1a0036b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a0036bc:	fb00 fa0a 	mul.w	sl, r0, sl
1a0036c0:	45a2      	cmp	sl, r4
1a0036c2:	d908      	bls.n	1a0036d6 <__udivmoddi4+0x1da>
1a0036c4:	eb1e 0404 	adds.w	r4, lr, r4
1a0036c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0036cc:	d26b      	bcs.n	1a0037a6 <__udivmoddi4+0x2aa>
1a0036ce:	45a2      	cmp	sl, r4
1a0036d0:	d969      	bls.n	1a0037a6 <__udivmoddi4+0x2aa>
1a0036d2:	3802      	subs	r0, #2
1a0036d4:	4474      	add	r4, lr
1a0036d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0036da:	fba0 8902 	umull	r8, r9, r0, r2
1a0036de:	eba4 040a 	sub.w	r4, r4, sl
1a0036e2:	454c      	cmp	r4, r9
1a0036e4:	46c2      	mov	sl, r8
1a0036e6:	464b      	mov	r3, r9
1a0036e8:	d354      	bcc.n	1a003794 <__udivmoddi4+0x298>
1a0036ea:	d051      	beq.n	1a003790 <__udivmoddi4+0x294>
1a0036ec:	2e00      	cmp	r6, #0
1a0036ee:	d069      	beq.n	1a0037c4 <__udivmoddi4+0x2c8>
1a0036f0:	ebb1 050a 	subs.w	r5, r1, sl
1a0036f4:	eb64 0403 	sbc.w	r4, r4, r3
1a0036f8:	fa04 fc0c 	lsl.w	ip, r4, ip
1a0036fc:	40fd      	lsrs	r5, r7
1a0036fe:	40fc      	lsrs	r4, r7
1a003700:	ea4c 0505 	orr.w	r5, ip, r5
1a003704:	e9c6 5400 	strd	r5, r4, [r6]
1a003708:	2700      	movs	r7, #0
1a00370a:	e747      	b.n	1a00359c <__udivmoddi4+0xa0>
1a00370c:	f1c2 0320 	rsb	r3, r2, #32
1a003710:	fa20 f703 	lsr.w	r7, r0, r3
1a003714:	4095      	lsls	r5, r2
1a003716:	fa01 f002 	lsl.w	r0, r1, r2
1a00371a:	fa21 f303 	lsr.w	r3, r1, r3
1a00371e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003722:	4338      	orrs	r0, r7
1a003724:	0c01      	lsrs	r1, r0, #16
1a003726:	fbb3 f7fe 	udiv	r7, r3, lr
1a00372a:	fa1f f885 	uxth.w	r8, r5
1a00372e:	fb0e 3317 	mls	r3, lr, r7, r3
1a003732:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003736:	fb07 f308 	mul.w	r3, r7, r8
1a00373a:	428b      	cmp	r3, r1
1a00373c:	fa04 f402 	lsl.w	r4, r4, r2
1a003740:	d907      	bls.n	1a003752 <__udivmoddi4+0x256>
1a003742:	1869      	adds	r1, r5, r1
1a003744:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a003748:	d22f      	bcs.n	1a0037aa <__udivmoddi4+0x2ae>
1a00374a:	428b      	cmp	r3, r1
1a00374c:	d92d      	bls.n	1a0037aa <__udivmoddi4+0x2ae>
1a00374e:	3f02      	subs	r7, #2
1a003750:	4429      	add	r1, r5
1a003752:	1acb      	subs	r3, r1, r3
1a003754:	b281      	uxth	r1, r0
1a003756:	fbb3 f0fe 	udiv	r0, r3, lr
1a00375a:	fb0e 3310 	mls	r3, lr, r0, r3
1a00375e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003762:	fb00 f308 	mul.w	r3, r0, r8
1a003766:	428b      	cmp	r3, r1
1a003768:	d907      	bls.n	1a00377a <__udivmoddi4+0x27e>
1a00376a:	1869      	adds	r1, r5, r1
1a00376c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a003770:	d217      	bcs.n	1a0037a2 <__udivmoddi4+0x2a6>
1a003772:	428b      	cmp	r3, r1
1a003774:	d915      	bls.n	1a0037a2 <__udivmoddi4+0x2a6>
1a003776:	3802      	subs	r0, #2
1a003778:	4429      	add	r1, r5
1a00377a:	1ac9      	subs	r1, r1, r3
1a00377c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a003780:	e73b      	b.n	1a0035fa <__udivmoddi4+0xfe>
1a003782:	4637      	mov	r7, r6
1a003784:	4630      	mov	r0, r6
1a003786:	e709      	b.n	1a00359c <__udivmoddi4+0xa0>
1a003788:	4607      	mov	r7, r0
1a00378a:	e6e7      	b.n	1a00355c <__udivmoddi4+0x60>
1a00378c:	4618      	mov	r0, r3
1a00378e:	e6fb      	b.n	1a003588 <__udivmoddi4+0x8c>
1a003790:	4541      	cmp	r1, r8
1a003792:	d2ab      	bcs.n	1a0036ec <__udivmoddi4+0x1f0>
1a003794:	ebb8 0a02 	subs.w	sl, r8, r2
1a003798:	eb69 020e 	sbc.w	r2, r9, lr
1a00379c:	3801      	subs	r0, #1
1a00379e:	4613      	mov	r3, r2
1a0037a0:	e7a4      	b.n	1a0036ec <__udivmoddi4+0x1f0>
1a0037a2:	4660      	mov	r0, ip
1a0037a4:	e7e9      	b.n	1a00377a <__udivmoddi4+0x27e>
1a0037a6:	4618      	mov	r0, r3
1a0037a8:	e795      	b.n	1a0036d6 <__udivmoddi4+0x1da>
1a0037aa:	4667      	mov	r7, ip
1a0037ac:	e7d1      	b.n	1a003752 <__udivmoddi4+0x256>
1a0037ae:	4681      	mov	r9, r0
1a0037b0:	e77c      	b.n	1a0036ac <__udivmoddi4+0x1b0>
1a0037b2:	3802      	subs	r0, #2
1a0037b4:	442c      	add	r4, r5
1a0037b6:	e747      	b.n	1a003648 <__udivmoddi4+0x14c>
1a0037b8:	f1ac 0c02 	sub.w	ip, ip, #2
1a0037bc:	442b      	add	r3, r5
1a0037be:	e72f      	b.n	1a003620 <__udivmoddi4+0x124>
1a0037c0:	4638      	mov	r0, r7
1a0037c2:	e708      	b.n	1a0035d6 <__udivmoddi4+0xda>
1a0037c4:	4637      	mov	r7, r6
1a0037c6:	e6e9      	b.n	1a00359c <__udivmoddi4+0xa0>

1a0037c8 <__aeabi_idiv0>:
1a0037c8:	4770      	bx	lr
1a0037ca:	bf00      	nop

1a0037cc <__libc_init_array>:
1a0037cc:	b570      	push	{r4, r5, r6, lr}
1a0037ce:	4e0d      	ldr	r6, [pc, #52]	; (1a003804 <__libc_init_array+0x38>)
1a0037d0:	4c0d      	ldr	r4, [pc, #52]	; (1a003808 <__libc_init_array+0x3c>)
1a0037d2:	1ba4      	subs	r4, r4, r6
1a0037d4:	10a4      	asrs	r4, r4, #2
1a0037d6:	2500      	movs	r5, #0
1a0037d8:	42a5      	cmp	r5, r4
1a0037da:	d109      	bne.n	1a0037f0 <__libc_init_array+0x24>
1a0037dc:	4e0b      	ldr	r6, [pc, #44]	; (1a00380c <__libc_init_array+0x40>)
1a0037de:	4c0c      	ldr	r4, [pc, #48]	; (1a003810 <__libc_init_array+0x44>)
1a0037e0:	f7ff fe72 	bl	1a0034c8 <_init>
1a0037e4:	1ba4      	subs	r4, r4, r6
1a0037e6:	10a4      	asrs	r4, r4, #2
1a0037e8:	2500      	movs	r5, #0
1a0037ea:	42a5      	cmp	r5, r4
1a0037ec:	d105      	bne.n	1a0037fa <__libc_init_array+0x2e>
1a0037ee:	bd70      	pop	{r4, r5, r6, pc}
1a0037f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0037f4:	4798      	blx	r3
1a0037f6:	3501      	adds	r5, #1
1a0037f8:	e7ee      	b.n	1a0037d8 <__libc_init_array+0xc>
1a0037fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0037fe:	4798      	blx	r3
1a003800:	3501      	adds	r5, #1
1a003802:	e7f2      	b.n	1a0037ea <__libc_init_array+0x1e>
1a003804:	1a004514 	.word	0x1a004514
1a003808:	1a004514 	.word	0x1a004514
1a00380c:	1a004514 	.word	0x1a004514
1a003810:	1a004514 	.word	0x1a004514

1a003814 <memcpy>:
1a003814:	b510      	push	{r4, lr}
1a003816:	1e43      	subs	r3, r0, #1
1a003818:	440a      	add	r2, r1
1a00381a:	4291      	cmp	r1, r2
1a00381c:	d100      	bne.n	1a003820 <memcpy+0xc>
1a00381e:	bd10      	pop	{r4, pc}
1a003820:	f811 4b01 	ldrb.w	r4, [r1], #1
1a003824:	f803 4f01 	strb.w	r4, [r3, #1]!
1a003828:	e7f7      	b.n	1a00381a <memcpy+0x6>

1a00382a <memset>:
1a00382a:	4402      	add	r2, r0
1a00382c:	4603      	mov	r3, r0
1a00382e:	4293      	cmp	r3, r2
1a003830:	d100      	bne.n	1a003834 <memset+0xa>
1a003832:	4770      	bx	lr
1a003834:	f803 1b01 	strb.w	r1, [r3], #1
1a003838:	e7f9      	b.n	1a00382e <memset+0x4>
1a00383a:	Address 0x000000001a00383a is out of bounds.


1a00383c <siprintf>:
1a00383c:	b40e      	push	{r1, r2, r3}
1a00383e:	b500      	push	{lr}
1a003840:	b09c      	sub	sp, #112	; 0x70
1a003842:	ab1d      	add	r3, sp, #116	; 0x74
1a003844:	9002      	str	r0, [sp, #8]
1a003846:	9006      	str	r0, [sp, #24]
1a003848:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1a00384c:	4809      	ldr	r0, [pc, #36]	; (1a003874 <siprintf+0x38>)
1a00384e:	9107      	str	r1, [sp, #28]
1a003850:	9104      	str	r1, [sp, #16]
1a003852:	4909      	ldr	r1, [pc, #36]	; (1a003878 <siprintf+0x3c>)
1a003854:	f853 2b04 	ldr.w	r2, [r3], #4
1a003858:	9105      	str	r1, [sp, #20]
1a00385a:	6800      	ldr	r0, [r0, #0]
1a00385c:	9301      	str	r3, [sp, #4]
1a00385e:	a902      	add	r1, sp, #8
1a003860:	f000 f924 	bl	1a003aac <_svfiprintf_r>
1a003864:	9b02      	ldr	r3, [sp, #8]
1a003866:	2200      	movs	r2, #0
1a003868:	701a      	strb	r2, [r3, #0]
1a00386a:	b01c      	add	sp, #112	; 0x70
1a00386c:	f85d eb04 	ldr.w	lr, [sp], #4
1a003870:	b003      	add	sp, #12
1a003872:	4770      	bx	lr
1a003874:	100000cc 	.word	0x100000cc
1a003878:	ffff0208 	.word	0xffff0208

1a00387c <strncpy>:
1a00387c:	b570      	push	{r4, r5, r6, lr}
1a00387e:	3901      	subs	r1, #1
1a003880:	4604      	mov	r4, r0
1a003882:	b902      	cbnz	r2, 1a003886 <strncpy+0xa>
1a003884:	bd70      	pop	{r4, r5, r6, pc}
1a003886:	4623      	mov	r3, r4
1a003888:	f811 5f01 	ldrb.w	r5, [r1, #1]!
1a00388c:	f803 5b01 	strb.w	r5, [r3], #1
1a003890:	1e56      	subs	r6, r2, #1
1a003892:	b92d      	cbnz	r5, 1a0038a0 <strncpy+0x24>
1a003894:	4414      	add	r4, r2
1a003896:	42a3      	cmp	r3, r4
1a003898:	d0f4      	beq.n	1a003884 <strncpy+0x8>
1a00389a:	f803 5b01 	strb.w	r5, [r3], #1
1a00389e:	e7fa      	b.n	1a003896 <strncpy+0x1a>
1a0038a0:	461c      	mov	r4, r3
1a0038a2:	4632      	mov	r2, r6
1a0038a4:	e7ed      	b.n	1a003882 <strncpy+0x6>
1a0038a6:	Address 0x000000001a0038a6 is out of bounds.


1a0038a8 <_free_r>:
1a0038a8:	b538      	push	{r3, r4, r5, lr}
1a0038aa:	4605      	mov	r5, r0
1a0038ac:	2900      	cmp	r1, #0
1a0038ae:	d045      	beq.n	1a00393c <_free_r+0x94>
1a0038b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0038b4:	1f0c      	subs	r4, r1, #4
1a0038b6:	2b00      	cmp	r3, #0
1a0038b8:	bfb8      	it	lt
1a0038ba:	18e4      	addlt	r4, r4, r3
1a0038bc:	f000 fbe1 	bl	1a004082 <__malloc_lock>
1a0038c0:	4a1f      	ldr	r2, [pc, #124]	; (1a003940 <_free_r+0x98>)
1a0038c2:	6813      	ldr	r3, [r2, #0]
1a0038c4:	4610      	mov	r0, r2
1a0038c6:	b933      	cbnz	r3, 1a0038d6 <_free_r+0x2e>
1a0038c8:	6063      	str	r3, [r4, #4]
1a0038ca:	6014      	str	r4, [r2, #0]
1a0038cc:	4628      	mov	r0, r5
1a0038ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0038d2:	f000 bbd7 	b.w	1a004084 <__malloc_unlock>
1a0038d6:	42a3      	cmp	r3, r4
1a0038d8:	d90c      	bls.n	1a0038f4 <_free_r+0x4c>
1a0038da:	6821      	ldr	r1, [r4, #0]
1a0038dc:	1862      	adds	r2, r4, r1
1a0038de:	4293      	cmp	r3, r2
1a0038e0:	bf04      	itt	eq
1a0038e2:	681a      	ldreq	r2, [r3, #0]
1a0038e4:	685b      	ldreq	r3, [r3, #4]
1a0038e6:	6063      	str	r3, [r4, #4]
1a0038e8:	bf04      	itt	eq
1a0038ea:	1852      	addeq	r2, r2, r1
1a0038ec:	6022      	streq	r2, [r4, #0]
1a0038ee:	6004      	str	r4, [r0, #0]
1a0038f0:	e7ec      	b.n	1a0038cc <_free_r+0x24>
1a0038f2:	4613      	mov	r3, r2
1a0038f4:	685a      	ldr	r2, [r3, #4]
1a0038f6:	b10a      	cbz	r2, 1a0038fc <_free_r+0x54>
1a0038f8:	42a2      	cmp	r2, r4
1a0038fa:	d9fa      	bls.n	1a0038f2 <_free_r+0x4a>
1a0038fc:	6819      	ldr	r1, [r3, #0]
1a0038fe:	1858      	adds	r0, r3, r1
1a003900:	42a0      	cmp	r0, r4
1a003902:	d10b      	bne.n	1a00391c <_free_r+0x74>
1a003904:	6820      	ldr	r0, [r4, #0]
1a003906:	4401      	add	r1, r0
1a003908:	1858      	adds	r0, r3, r1
1a00390a:	4282      	cmp	r2, r0
1a00390c:	6019      	str	r1, [r3, #0]
1a00390e:	d1dd      	bne.n	1a0038cc <_free_r+0x24>
1a003910:	6810      	ldr	r0, [r2, #0]
1a003912:	6852      	ldr	r2, [r2, #4]
1a003914:	605a      	str	r2, [r3, #4]
1a003916:	4401      	add	r1, r0
1a003918:	6019      	str	r1, [r3, #0]
1a00391a:	e7d7      	b.n	1a0038cc <_free_r+0x24>
1a00391c:	d902      	bls.n	1a003924 <_free_r+0x7c>
1a00391e:	230c      	movs	r3, #12
1a003920:	602b      	str	r3, [r5, #0]
1a003922:	e7d3      	b.n	1a0038cc <_free_r+0x24>
1a003924:	6820      	ldr	r0, [r4, #0]
1a003926:	1821      	adds	r1, r4, r0
1a003928:	428a      	cmp	r2, r1
1a00392a:	bf04      	itt	eq
1a00392c:	6811      	ldreq	r1, [r2, #0]
1a00392e:	6852      	ldreq	r2, [r2, #4]
1a003930:	6062      	str	r2, [r4, #4]
1a003932:	bf04      	itt	eq
1a003934:	1809      	addeq	r1, r1, r0
1a003936:	6021      	streq	r1, [r4, #0]
1a003938:	605c      	str	r4, [r3, #4]
1a00393a:	e7c7      	b.n	1a0038cc <_free_r+0x24>
1a00393c:	bd38      	pop	{r3, r4, r5, pc}
1a00393e:	bf00      	nop
1a003940:	10002dc0 	.word	0x10002dc0

1a003944 <_malloc_r>:
1a003944:	b570      	push	{r4, r5, r6, lr}
1a003946:	1ccd      	adds	r5, r1, #3
1a003948:	f025 0503 	bic.w	r5, r5, #3
1a00394c:	3508      	adds	r5, #8
1a00394e:	2d0c      	cmp	r5, #12
1a003950:	bf38      	it	cc
1a003952:	250c      	movcc	r5, #12
1a003954:	2d00      	cmp	r5, #0
1a003956:	4606      	mov	r6, r0
1a003958:	db01      	blt.n	1a00395e <_malloc_r+0x1a>
1a00395a:	42a9      	cmp	r1, r5
1a00395c:	d903      	bls.n	1a003966 <_malloc_r+0x22>
1a00395e:	230c      	movs	r3, #12
1a003960:	6033      	str	r3, [r6, #0]
1a003962:	2000      	movs	r0, #0
1a003964:	bd70      	pop	{r4, r5, r6, pc}
1a003966:	f000 fb8c 	bl	1a004082 <__malloc_lock>
1a00396a:	4a21      	ldr	r2, [pc, #132]	; (1a0039f0 <_malloc_r+0xac>)
1a00396c:	6814      	ldr	r4, [r2, #0]
1a00396e:	4621      	mov	r1, r4
1a003970:	b991      	cbnz	r1, 1a003998 <_malloc_r+0x54>
1a003972:	4c20      	ldr	r4, [pc, #128]	; (1a0039f4 <_malloc_r+0xb0>)
1a003974:	6823      	ldr	r3, [r4, #0]
1a003976:	b91b      	cbnz	r3, 1a003980 <_malloc_r+0x3c>
1a003978:	4630      	mov	r0, r6
1a00397a:	f7fe ff89 	bl	1a002890 <_sbrk_r>
1a00397e:	6020      	str	r0, [r4, #0]
1a003980:	4629      	mov	r1, r5
1a003982:	4630      	mov	r0, r6
1a003984:	f7fe ff84 	bl	1a002890 <_sbrk_r>
1a003988:	1c43      	adds	r3, r0, #1
1a00398a:	d124      	bne.n	1a0039d6 <_malloc_r+0x92>
1a00398c:	230c      	movs	r3, #12
1a00398e:	6033      	str	r3, [r6, #0]
1a003990:	4630      	mov	r0, r6
1a003992:	f000 fb77 	bl	1a004084 <__malloc_unlock>
1a003996:	e7e4      	b.n	1a003962 <_malloc_r+0x1e>
1a003998:	680b      	ldr	r3, [r1, #0]
1a00399a:	1b5b      	subs	r3, r3, r5
1a00399c:	d418      	bmi.n	1a0039d0 <_malloc_r+0x8c>
1a00399e:	2b0b      	cmp	r3, #11
1a0039a0:	d90f      	bls.n	1a0039c2 <_malloc_r+0x7e>
1a0039a2:	600b      	str	r3, [r1, #0]
1a0039a4:	50cd      	str	r5, [r1, r3]
1a0039a6:	18cc      	adds	r4, r1, r3
1a0039a8:	4630      	mov	r0, r6
1a0039aa:	f000 fb6b 	bl	1a004084 <__malloc_unlock>
1a0039ae:	f104 000b 	add.w	r0, r4, #11
1a0039b2:	1d23      	adds	r3, r4, #4
1a0039b4:	f020 0007 	bic.w	r0, r0, #7
1a0039b8:	1ac3      	subs	r3, r0, r3
1a0039ba:	d0d3      	beq.n	1a003964 <_malloc_r+0x20>
1a0039bc:	425a      	negs	r2, r3
1a0039be:	50e2      	str	r2, [r4, r3]
1a0039c0:	e7d0      	b.n	1a003964 <_malloc_r+0x20>
1a0039c2:	428c      	cmp	r4, r1
1a0039c4:	684b      	ldr	r3, [r1, #4]
1a0039c6:	bf16      	itet	ne
1a0039c8:	6063      	strne	r3, [r4, #4]
1a0039ca:	6013      	streq	r3, [r2, #0]
1a0039cc:	460c      	movne	r4, r1
1a0039ce:	e7eb      	b.n	1a0039a8 <_malloc_r+0x64>
1a0039d0:	460c      	mov	r4, r1
1a0039d2:	6849      	ldr	r1, [r1, #4]
1a0039d4:	e7cc      	b.n	1a003970 <_malloc_r+0x2c>
1a0039d6:	1cc4      	adds	r4, r0, #3
1a0039d8:	f024 0403 	bic.w	r4, r4, #3
1a0039dc:	42a0      	cmp	r0, r4
1a0039de:	d005      	beq.n	1a0039ec <_malloc_r+0xa8>
1a0039e0:	1a21      	subs	r1, r4, r0
1a0039e2:	4630      	mov	r0, r6
1a0039e4:	f7fe ff54 	bl	1a002890 <_sbrk_r>
1a0039e8:	3001      	adds	r0, #1
1a0039ea:	d0cf      	beq.n	1a00398c <_malloc_r+0x48>
1a0039ec:	6025      	str	r5, [r4, #0]
1a0039ee:	e7db      	b.n	1a0039a8 <_malloc_r+0x64>
1a0039f0:	10002dc0 	.word	0x10002dc0
1a0039f4:	10002dc4 	.word	0x10002dc4

1a0039f8 <__ssputs_r>:
1a0039f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0039fc:	688e      	ldr	r6, [r1, #8]
1a0039fe:	429e      	cmp	r6, r3
1a003a00:	4682      	mov	sl, r0
1a003a02:	460c      	mov	r4, r1
1a003a04:	4690      	mov	r8, r2
1a003a06:	4699      	mov	r9, r3
1a003a08:	d837      	bhi.n	1a003a7a <__ssputs_r+0x82>
1a003a0a:	898a      	ldrh	r2, [r1, #12]
1a003a0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
1a003a10:	d031      	beq.n	1a003a76 <__ssputs_r+0x7e>
1a003a12:	6825      	ldr	r5, [r4, #0]
1a003a14:	6909      	ldr	r1, [r1, #16]
1a003a16:	1a6f      	subs	r7, r5, r1
1a003a18:	6965      	ldr	r5, [r4, #20]
1a003a1a:	2302      	movs	r3, #2
1a003a1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1a003a20:	fb95 f5f3 	sdiv	r5, r5, r3
1a003a24:	f109 0301 	add.w	r3, r9, #1
1a003a28:	443b      	add	r3, r7
1a003a2a:	429d      	cmp	r5, r3
1a003a2c:	bf38      	it	cc
1a003a2e:	461d      	movcc	r5, r3
1a003a30:	0553      	lsls	r3, r2, #21
1a003a32:	d530      	bpl.n	1a003a96 <__ssputs_r+0x9e>
1a003a34:	4629      	mov	r1, r5
1a003a36:	f7ff ff85 	bl	1a003944 <_malloc_r>
1a003a3a:	4606      	mov	r6, r0
1a003a3c:	b950      	cbnz	r0, 1a003a54 <__ssputs_r+0x5c>
1a003a3e:	230c      	movs	r3, #12
1a003a40:	f8ca 3000 	str.w	r3, [sl]
1a003a44:	89a3      	ldrh	r3, [r4, #12]
1a003a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003a4a:	81a3      	strh	r3, [r4, #12]
1a003a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003a54:	463a      	mov	r2, r7
1a003a56:	6921      	ldr	r1, [r4, #16]
1a003a58:	f7ff fedc 	bl	1a003814 <memcpy>
1a003a5c:	89a3      	ldrh	r3, [r4, #12]
1a003a5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
1a003a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003a66:	81a3      	strh	r3, [r4, #12]
1a003a68:	6126      	str	r6, [r4, #16]
1a003a6a:	6165      	str	r5, [r4, #20]
1a003a6c:	443e      	add	r6, r7
1a003a6e:	1bed      	subs	r5, r5, r7
1a003a70:	6026      	str	r6, [r4, #0]
1a003a72:	60a5      	str	r5, [r4, #8]
1a003a74:	464e      	mov	r6, r9
1a003a76:	454e      	cmp	r6, r9
1a003a78:	d900      	bls.n	1a003a7c <__ssputs_r+0x84>
1a003a7a:	464e      	mov	r6, r9
1a003a7c:	4632      	mov	r2, r6
1a003a7e:	4641      	mov	r1, r8
1a003a80:	6820      	ldr	r0, [r4, #0]
1a003a82:	f000 fae5 	bl	1a004050 <memmove>
1a003a86:	68a3      	ldr	r3, [r4, #8]
1a003a88:	1b9b      	subs	r3, r3, r6
1a003a8a:	60a3      	str	r3, [r4, #8]
1a003a8c:	6823      	ldr	r3, [r4, #0]
1a003a8e:	441e      	add	r6, r3
1a003a90:	6026      	str	r6, [r4, #0]
1a003a92:	2000      	movs	r0, #0
1a003a94:	e7dc      	b.n	1a003a50 <__ssputs_r+0x58>
1a003a96:	462a      	mov	r2, r5
1a003a98:	f000 faf5 	bl	1a004086 <_realloc_r>
1a003a9c:	4606      	mov	r6, r0
1a003a9e:	2800      	cmp	r0, #0
1a003aa0:	d1e2      	bne.n	1a003a68 <__ssputs_r+0x70>
1a003aa2:	6921      	ldr	r1, [r4, #16]
1a003aa4:	4650      	mov	r0, sl
1a003aa6:	f7ff feff 	bl	1a0038a8 <_free_r>
1a003aaa:	e7c8      	b.n	1a003a3e <__ssputs_r+0x46>

1a003aac <_svfiprintf_r>:
1a003aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003ab0:	b09d      	sub	sp, #116	; 0x74
1a003ab2:	4680      	mov	r8, r0
1a003ab4:	9303      	str	r3, [sp, #12]
1a003ab6:	898b      	ldrh	r3, [r1, #12]
1a003ab8:	061d      	lsls	r5, r3, #24
1a003aba:	460c      	mov	r4, r1
1a003abc:	4616      	mov	r6, r2
1a003abe:	d50f      	bpl.n	1a003ae0 <_svfiprintf_r+0x34>
1a003ac0:	690b      	ldr	r3, [r1, #16]
1a003ac2:	b96b      	cbnz	r3, 1a003ae0 <_svfiprintf_r+0x34>
1a003ac4:	2140      	movs	r1, #64	; 0x40
1a003ac6:	f7ff ff3d 	bl	1a003944 <_malloc_r>
1a003aca:	6020      	str	r0, [r4, #0]
1a003acc:	6120      	str	r0, [r4, #16]
1a003ace:	b928      	cbnz	r0, 1a003adc <_svfiprintf_r+0x30>
1a003ad0:	230c      	movs	r3, #12
1a003ad2:	f8c8 3000 	str.w	r3, [r8]
1a003ad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003ada:	e0c7      	b.n	1a003c6c <_svfiprintf_r+0x1c0>
1a003adc:	2340      	movs	r3, #64	; 0x40
1a003ade:	6163      	str	r3, [r4, #20]
1a003ae0:	2300      	movs	r3, #0
1a003ae2:	9309      	str	r3, [sp, #36]	; 0x24
1a003ae4:	2320      	movs	r3, #32
1a003ae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a003aea:	2330      	movs	r3, #48	; 0x30
1a003aec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a003af0:	f04f 0b01 	mov.w	fp, #1
1a003af4:	4637      	mov	r7, r6
1a003af6:	463d      	mov	r5, r7
1a003af8:	f815 3b01 	ldrb.w	r3, [r5], #1
1a003afc:	b10b      	cbz	r3, 1a003b02 <_svfiprintf_r+0x56>
1a003afe:	2b25      	cmp	r3, #37	; 0x25
1a003b00:	d13e      	bne.n	1a003b80 <_svfiprintf_r+0xd4>
1a003b02:	ebb7 0a06 	subs.w	sl, r7, r6
1a003b06:	d00b      	beq.n	1a003b20 <_svfiprintf_r+0x74>
1a003b08:	4653      	mov	r3, sl
1a003b0a:	4632      	mov	r2, r6
1a003b0c:	4621      	mov	r1, r4
1a003b0e:	4640      	mov	r0, r8
1a003b10:	f7ff ff72 	bl	1a0039f8 <__ssputs_r>
1a003b14:	3001      	adds	r0, #1
1a003b16:	f000 80a4 	beq.w	1a003c62 <_svfiprintf_r+0x1b6>
1a003b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003b1c:	4453      	add	r3, sl
1a003b1e:	9309      	str	r3, [sp, #36]	; 0x24
1a003b20:	783b      	ldrb	r3, [r7, #0]
1a003b22:	2b00      	cmp	r3, #0
1a003b24:	f000 809d 	beq.w	1a003c62 <_svfiprintf_r+0x1b6>
1a003b28:	2300      	movs	r3, #0
1a003b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003b2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a003b32:	9304      	str	r3, [sp, #16]
1a003b34:	9307      	str	r3, [sp, #28]
1a003b36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a003b3a:	931a      	str	r3, [sp, #104]	; 0x68
1a003b3c:	462f      	mov	r7, r5
1a003b3e:	2205      	movs	r2, #5
1a003b40:	f817 1b01 	ldrb.w	r1, [r7], #1
1a003b44:	484f      	ldr	r0, [pc, #316]	; (1a003c84 <_svfiprintf_r+0x1d8>)
1a003b46:	f000 fa33 	bl	1a003fb0 <memchr>
1a003b4a:	9b04      	ldr	r3, [sp, #16]
1a003b4c:	b9d0      	cbnz	r0, 1a003b84 <_svfiprintf_r+0xd8>
1a003b4e:	06d9      	lsls	r1, r3, #27
1a003b50:	bf44      	itt	mi
1a003b52:	2220      	movmi	r2, #32
1a003b54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003b58:	071a      	lsls	r2, r3, #28
1a003b5a:	bf44      	itt	mi
1a003b5c:	222b      	movmi	r2, #43	; 0x2b
1a003b5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a003b62:	782a      	ldrb	r2, [r5, #0]
1a003b64:	2a2a      	cmp	r2, #42	; 0x2a
1a003b66:	d015      	beq.n	1a003b94 <_svfiprintf_r+0xe8>
1a003b68:	9a07      	ldr	r2, [sp, #28]
1a003b6a:	462f      	mov	r7, r5
1a003b6c:	2000      	movs	r0, #0
1a003b6e:	250a      	movs	r5, #10
1a003b70:	4639      	mov	r1, r7
1a003b72:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003b76:	3b30      	subs	r3, #48	; 0x30
1a003b78:	2b09      	cmp	r3, #9
1a003b7a:	d94d      	bls.n	1a003c18 <_svfiprintf_r+0x16c>
1a003b7c:	b1b8      	cbz	r0, 1a003bae <_svfiprintf_r+0x102>
1a003b7e:	e00f      	b.n	1a003ba0 <_svfiprintf_r+0xf4>
1a003b80:	462f      	mov	r7, r5
1a003b82:	e7b8      	b.n	1a003af6 <_svfiprintf_r+0x4a>
1a003b84:	4a3f      	ldr	r2, [pc, #252]	; (1a003c84 <_svfiprintf_r+0x1d8>)
1a003b86:	1a80      	subs	r0, r0, r2
1a003b88:	fa0b f000 	lsl.w	r0, fp, r0
1a003b8c:	4318      	orrs	r0, r3
1a003b8e:	9004      	str	r0, [sp, #16]
1a003b90:	463d      	mov	r5, r7
1a003b92:	e7d3      	b.n	1a003b3c <_svfiprintf_r+0x90>
1a003b94:	9a03      	ldr	r2, [sp, #12]
1a003b96:	1d11      	adds	r1, r2, #4
1a003b98:	6812      	ldr	r2, [r2, #0]
1a003b9a:	9103      	str	r1, [sp, #12]
1a003b9c:	2a00      	cmp	r2, #0
1a003b9e:	db01      	blt.n	1a003ba4 <_svfiprintf_r+0xf8>
1a003ba0:	9207      	str	r2, [sp, #28]
1a003ba2:	e004      	b.n	1a003bae <_svfiprintf_r+0x102>
1a003ba4:	4252      	negs	r2, r2
1a003ba6:	f043 0302 	orr.w	r3, r3, #2
1a003baa:	9207      	str	r2, [sp, #28]
1a003bac:	9304      	str	r3, [sp, #16]
1a003bae:	783b      	ldrb	r3, [r7, #0]
1a003bb0:	2b2e      	cmp	r3, #46	; 0x2e
1a003bb2:	d10c      	bne.n	1a003bce <_svfiprintf_r+0x122>
1a003bb4:	787b      	ldrb	r3, [r7, #1]
1a003bb6:	2b2a      	cmp	r3, #42	; 0x2a
1a003bb8:	d133      	bne.n	1a003c22 <_svfiprintf_r+0x176>
1a003bba:	9b03      	ldr	r3, [sp, #12]
1a003bbc:	1d1a      	adds	r2, r3, #4
1a003bbe:	681b      	ldr	r3, [r3, #0]
1a003bc0:	9203      	str	r2, [sp, #12]
1a003bc2:	2b00      	cmp	r3, #0
1a003bc4:	bfb8      	it	lt
1a003bc6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a003bca:	3702      	adds	r7, #2
1a003bcc:	9305      	str	r3, [sp, #20]
1a003bce:	4d2e      	ldr	r5, [pc, #184]	; (1a003c88 <_svfiprintf_r+0x1dc>)
1a003bd0:	7839      	ldrb	r1, [r7, #0]
1a003bd2:	2203      	movs	r2, #3
1a003bd4:	4628      	mov	r0, r5
1a003bd6:	f000 f9eb 	bl	1a003fb0 <memchr>
1a003bda:	b138      	cbz	r0, 1a003bec <_svfiprintf_r+0x140>
1a003bdc:	2340      	movs	r3, #64	; 0x40
1a003bde:	1b40      	subs	r0, r0, r5
1a003be0:	fa03 f000 	lsl.w	r0, r3, r0
1a003be4:	9b04      	ldr	r3, [sp, #16]
1a003be6:	4303      	orrs	r3, r0
1a003be8:	3701      	adds	r7, #1
1a003bea:	9304      	str	r3, [sp, #16]
1a003bec:	7839      	ldrb	r1, [r7, #0]
1a003bee:	4827      	ldr	r0, [pc, #156]	; (1a003c8c <_svfiprintf_r+0x1e0>)
1a003bf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a003bf4:	2206      	movs	r2, #6
1a003bf6:	1c7e      	adds	r6, r7, #1
1a003bf8:	f000 f9da 	bl	1a003fb0 <memchr>
1a003bfc:	2800      	cmp	r0, #0
1a003bfe:	d038      	beq.n	1a003c72 <_svfiprintf_r+0x1c6>
1a003c00:	4b23      	ldr	r3, [pc, #140]	; (1a003c90 <_svfiprintf_r+0x1e4>)
1a003c02:	bb13      	cbnz	r3, 1a003c4a <_svfiprintf_r+0x19e>
1a003c04:	9b03      	ldr	r3, [sp, #12]
1a003c06:	3307      	adds	r3, #7
1a003c08:	f023 0307 	bic.w	r3, r3, #7
1a003c0c:	3308      	adds	r3, #8
1a003c0e:	9303      	str	r3, [sp, #12]
1a003c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003c12:	444b      	add	r3, r9
1a003c14:	9309      	str	r3, [sp, #36]	; 0x24
1a003c16:	e76d      	b.n	1a003af4 <_svfiprintf_r+0x48>
1a003c18:	fb05 3202 	mla	r2, r5, r2, r3
1a003c1c:	2001      	movs	r0, #1
1a003c1e:	460f      	mov	r7, r1
1a003c20:	e7a6      	b.n	1a003b70 <_svfiprintf_r+0xc4>
1a003c22:	2300      	movs	r3, #0
1a003c24:	3701      	adds	r7, #1
1a003c26:	9305      	str	r3, [sp, #20]
1a003c28:	4619      	mov	r1, r3
1a003c2a:	250a      	movs	r5, #10
1a003c2c:	4638      	mov	r0, r7
1a003c2e:	f810 2b01 	ldrb.w	r2, [r0], #1
1a003c32:	3a30      	subs	r2, #48	; 0x30
1a003c34:	2a09      	cmp	r2, #9
1a003c36:	d903      	bls.n	1a003c40 <_svfiprintf_r+0x194>
1a003c38:	2b00      	cmp	r3, #0
1a003c3a:	d0c8      	beq.n	1a003bce <_svfiprintf_r+0x122>
1a003c3c:	9105      	str	r1, [sp, #20]
1a003c3e:	e7c6      	b.n	1a003bce <_svfiprintf_r+0x122>
1a003c40:	fb05 2101 	mla	r1, r5, r1, r2
1a003c44:	2301      	movs	r3, #1
1a003c46:	4607      	mov	r7, r0
1a003c48:	e7f0      	b.n	1a003c2c <_svfiprintf_r+0x180>
1a003c4a:	ab03      	add	r3, sp, #12
1a003c4c:	9300      	str	r3, [sp, #0]
1a003c4e:	4622      	mov	r2, r4
1a003c50:	4b10      	ldr	r3, [pc, #64]	; (1a003c94 <_svfiprintf_r+0x1e8>)
1a003c52:	a904      	add	r1, sp, #16
1a003c54:	4640      	mov	r0, r8
1a003c56:	f3af 8000 	nop.w
1a003c5a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003c5e:	4681      	mov	r9, r0
1a003c60:	d1d6      	bne.n	1a003c10 <_svfiprintf_r+0x164>
1a003c62:	89a3      	ldrh	r3, [r4, #12]
1a003c64:	065b      	lsls	r3, r3, #25
1a003c66:	f53f af36 	bmi.w	1a003ad6 <_svfiprintf_r+0x2a>
1a003c6a:	9809      	ldr	r0, [sp, #36]	; 0x24
1a003c6c:	b01d      	add	sp, #116	; 0x74
1a003c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003c72:	ab03      	add	r3, sp, #12
1a003c74:	9300      	str	r3, [sp, #0]
1a003c76:	4622      	mov	r2, r4
1a003c78:	4b06      	ldr	r3, [pc, #24]	; (1a003c94 <_svfiprintf_r+0x1e8>)
1a003c7a:	a904      	add	r1, sp, #16
1a003c7c:	4640      	mov	r0, r8
1a003c7e:	f000 f881 	bl	1a003d84 <_printf_i>
1a003c82:	e7ea      	b.n	1a003c5a <_svfiprintf_r+0x1ae>
1a003c84:	1a0044e0 	.word	0x1a0044e0
1a003c88:	1a0044e6 	.word	0x1a0044e6
1a003c8c:	1a0044ea 	.word	0x1a0044ea
1a003c90:	00000000 	.word	0x00000000
1a003c94:	1a0039f9 	.word	0x1a0039f9

1a003c98 <_printf_common>:
1a003c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003c9c:	4691      	mov	r9, r2
1a003c9e:	461f      	mov	r7, r3
1a003ca0:	688a      	ldr	r2, [r1, #8]
1a003ca2:	690b      	ldr	r3, [r1, #16]
1a003ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a003ca8:	4293      	cmp	r3, r2
1a003caa:	bfb8      	it	lt
1a003cac:	4613      	movlt	r3, r2
1a003cae:	f8c9 3000 	str.w	r3, [r9]
1a003cb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a003cb6:	4606      	mov	r6, r0
1a003cb8:	460c      	mov	r4, r1
1a003cba:	b112      	cbz	r2, 1a003cc2 <_printf_common+0x2a>
1a003cbc:	3301      	adds	r3, #1
1a003cbe:	f8c9 3000 	str.w	r3, [r9]
1a003cc2:	6823      	ldr	r3, [r4, #0]
1a003cc4:	0699      	lsls	r1, r3, #26
1a003cc6:	bf42      	ittt	mi
1a003cc8:	f8d9 3000 	ldrmi.w	r3, [r9]
1a003ccc:	3302      	addmi	r3, #2
1a003cce:	f8c9 3000 	strmi.w	r3, [r9]
1a003cd2:	6825      	ldr	r5, [r4, #0]
1a003cd4:	f015 0506 	ands.w	r5, r5, #6
1a003cd8:	d107      	bne.n	1a003cea <_printf_common+0x52>
1a003cda:	f104 0a19 	add.w	sl, r4, #25
1a003cde:	68e3      	ldr	r3, [r4, #12]
1a003ce0:	f8d9 2000 	ldr.w	r2, [r9]
1a003ce4:	1a9b      	subs	r3, r3, r2
1a003ce6:	42ab      	cmp	r3, r5
1a003ce8:	dc28      	bgt.n	1a003d3c <_printf_common+0xa4>
1a003cea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a003cee:	6822      	ldr	r2, [r4, #0]
1a003cf0:	3300      	adds	r3, #0
1a003cf2:	bf18      	it	ne
1a003cf4:	2301      	movne	r3, #1
1a003cf6:	0692      	lsls	r2, r2, #26
1a003cf8:	d42d      	bmi.n	1a003d56 <_printf_common+0xbe>
1a003cfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a003cfe:	4639      	mov	r1, r7
1a003d00:	4630      	mov	r0, r6
1a003d02:	47c0      	blx	r8
1a003d04:	3001      	adds	r0, #1
1a003d06:	d020      	beq.n	1a003d4a <_printf_common+0xb2>
1a003d08:	6823      	ldr	r3, [r4, #0]
1a003d0a:	68e5      	ldr	r5, [r4, #12]
1a003d0c:	f8d9 2000 	ldr.w	r2, [r9]
1a003d10:	f003 0306 	and.w	r3, r3, #6
1a003d14:	2b04      	cmp	r3, #4
1a003d16:	bf08      	it	eq
1a003d18:	1aad      	subeq	r5, r5, r2
1a003d1a:	68a3      	ldr	r3, [r4, #8]
1a003d1c:	6922      	ldr	r2, [r4, #16]
1a003d1e:	bf0c      	ite	eq
1a003d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a003d24:	2500      	movne	r5, #0
1a003d26:	4293      	cmp	r3, r2
1a003d28:	bfc4      	itt	gt
1a003d2a:	1a9b      	subgt	r3, r3, r2
1a003d2c:	18ed      	addgt	r5, r5, r3
1a003d2e:	f04f 0900 	mov.w	r9, #0
1a003d32:	341a      	adds	r4, #26
1a003d34:	454d      	cmp	r5, r9
1a003d36:	d11a      	bne.n	1a003d6e <_printf_common+0xd6>
1a003d38:	2000      	movs	r0, #0
1a003d3a:	e008      	b.n	1a003d4e <_printf_common+0xb6>
1a003d3c:	2301      	movs	r3, #1
1a003d3e:	4652      	mov	r2, sl
1a003d40:	4639      	mov	r1, r7
1a003d42:	4630      	mov	r0, r6
1a003d44:	47c0      	blx	r8
1a003d46:	3001      	adds	r0, #1
1a003d48:	d103      	bne.n	1a003d52 <_printf_common+0xba>
1a003d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003d52:	3501      	adds	r5, #1
1a003d54:	e7c3      	b.n	1a003cde <_printf_common+0x46>
1a003d56:	18e1      	adds	r1, r4, r3
1a003d58:	1c5a      	adds	r2, r3, #1
1a003d5a:	2030      	movs	r0, #48	; 0x30
1a003d5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a003d60:	4422      	add	r2, r4
1a003d62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a003d66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a003d6a:	3302      	adds	r3, #2
1a003d6c:	e7c5      	b.n	1a003cfa <_printf_common+0x62>
1a003d6e:	2301      	movs	r3, #1
1a003d70:	4622      	mov	r2, r4
1a003d72:	4639      	mov	r1, r7
1a003d74:	4630      	mov	r0, r6
1a003d76:	47c0      	blx	r8
1a003d78:	3001      	adds	r0, #1
1a003d7a:	d0e6      	beq.n	1a003d4a <_printf_common+0xb2>
1a003d7c:	f109 0901 	add.w	r9, r9, #1
1a003d80:	e7d8      	b.n	1a003d34 <_printf_common+0x9c>
1a003d82:	Address 0x000000001a003d82 is out of bounds.


1a003d84 <_printf_i>:
1a003d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a003d88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a003d8c:	460c      	mov	r4, r1
1a003d8e:	7e09      	ldrb	r1, [r1, #24]
1a003d90:	b085      	sub	sp, #20
1a003d92:	296e      	cmp	r1, #110	; 0x6e
1a003d94:	4617      	mov	r7, r2
1a003d96:	4606      	mov	r6, r0
1a003d98:	4698      	mov	r8, r3
1a003d9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a003d9c:	f000 80b3 	beq.w	1a003f06 <_printf_i+0x182>
1a003da0:	d822      	bhi.n	1a003de8 <_printf_i+0x64>
1a003da2:	2963      	cmp	r1, #99	; 0x63
1a003da4:	d036      	beq.n	1a003e14 <_printf_i+0x90>
1a003da6:	d80a      	bhi.n	1a003dbe <_printf_i+0x3a>
1a003da8:	2900      	cmp	r1, #0
1a003daa:	f000 80b9 	beq.w	1a003f20 <_printf_i+0x19c>
1a003dae:	2958      	cmp	r1, #88	; 0x58
1a003db0:	f000 8083 	beq.w	1a003eba <_printf_i+0x136>
1a003db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a003db8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a003dbc:	e032      	b.n	1a003e24 <_printf_i+0xa0>
1a003dbe:	2964      	cmp	r1, #100	; 0x64
1a003dc0:	d001      	beq.n	1a003dc6 <_printf_i+0x42>
1a003dc2:	2969      	cmp	r1, #105	; 0x69
1a003dc4:	d1f6      	bne.n	1a003db4 <_printf_i+0x30>
1a003dc6:	6820      	ldr	r0, [r4, #0]
1a003dc8:	6813      	ldr	r3, [r2, #0]
1a003dca:	0605      	lsls	r5, r0, #24
1a003dcc:	f103 0104 	add.w	r1, r3, #4
1a003dd0:	d52a      	bpl.n	1a003e28 <_printf_i+0xa4>
1a003dd2:	681b      	ldr	r3, [r3, #0]
1a003dd4:	6011      	str	r1, [r2, #0]
1a003dd6:	2b00      	cmp	r3, #0
1a003dd8:	da03      	bge.n	1a003de2 <_printf_i+0x5e>
1a003dda:	222d      	movs	r2, #45	; 0x2d
1a003ddc:	425b      	negs	r3, r3
1a003dde:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a003de2:	486f      	ldr	r0, [pc, #444]	; (1a003fa0 <_printf_i+0x21c>)
1a003de4:	220a      	movs	r2, #10
1a003de6:	e039      	b.n	1a003e5c <_printf_i+0xd8>
1a003de8:	2973      	cmp	r1, #115	; 0x73
1a003dea:	f000 809d 	beq.w	1a003f28 <_printf_i+0x1a4>
1a003dee:	d808      	bhi.n	1a003e02 <_printf_i+0x7e>
1a003df0:	296f      	cmp	r1, #111	; 0x6f
1a003df2:	d020      	beq.n	1a003e36 <_printf_i+0xb2>
1a003df4:	2970      	cmp	r1, #112	; 0x70
1a003df6:	d1dd      	bne.n	1a003db4 <_printf_i+0x30>
1a003df8:	6823      	ldr	r3, [r4, #0]
1a003dfa:	f043 0320 	orr.w	r3, r3, #32
1a003dfe:	6023      	str	r3, [r4, #0]
1a003e00:	e003      	b.n	1a003e0a <_printf_i+0x86>
1a003e02:	2975      	cmp	r1, #117	; 0x75
1a003e04:	d017      	beq.n	1a003e36 <_printf_i+0xb2>
1a003e06:	2978      	cmp	r1, #120	; 0x78
1a003e08:	d1d4      	bne.n	1a003db4 <_printf_i+0x30>
1a003e0a:	2378      	movs	r3, #120	; 0x78
1a003e0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a003e10:	4864      	ldr	r0, [pc, #400]	; (1a003fa4 <_printf_i+0x220>)
1a003e12:	e055      	b.n	1a003ec0 <_printf_i+0x13c>
1a003e14:	6813      	ldr	r3, [r2, #0]
1a003e16:	1d19      	adds	r1, r3, #4
1a003e18:	681b      	ldr	r3, [r3, #0]
1a003e1a:	6011      	str	r1, [r2, #0]
1a003e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a003e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a003e24:	2301      	movs	r3, #1
1a003e26:	e08c      	b.n	1a003f42 <_printf_i+0x1be>
1a003e28:	681b      	ldr	r3, [r3, #0]
1a003e2a:	6011      	str	r1, [r2, #0]
1a003e2c:	f010 0f40 	tst.w	r0, #64	; 0x40
1a003e30:	bf18      	it	ne
1a003e32:	b21b      	sxthne	r3, r3
1a003e34:	e7cf      	b.n	1a003dd6 <_printf_i+0x52>
1a003e36:	6813      	ldr	r3, [r2, #0]
1a003e38:	6825      	ldr	r5, [r4, #0]
1a003e3a:	1d18      	adds	r0, r3, #4
1a003e3c:	6010      	str	r0, [r2, #0]
1a003e3e:	0628      	lsls	r0, r5, #24
1a003e40:	d501      	bpl.n	1a003e46 <_printf_i+0xc2>
1a003e42:	681b      	ldr	r3, [r3, #0]
1a003e44:	e002      	b.n	1a003e4c <_printf_i+0xc8>
1a003e46:	0668      	lsls	r0, r5, #25
1a003e48:	d5fb      	bpl.n	1a003e42 <_printf_i+0xbe>
1a003e4a:	881b      	ldrh	r3, [r3, #0]
1a003e4c:	4854      	ldr	r0, [pc, #336]	; (1a003fa0 <_printf_i+0x21c>)
1a003e4e:	296f      	cmp	r1, #111	; 0x6f
1a003e50:	bf14      	ite	ne
1a003e52:	220a      	movne	r2, #10
1a003e54:	2208      	moveq	r2, #8
1a003e56:	2100      	movs	r1, #0
1a003e58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a003e5c:	6865      	ldr	r5, [r4, #4]
1a003e5e:	60a5      	str	r5, [r4, #8]
1a003e60:	2d00      	cmp	r5, #0
1a003e62:	f2c0 8095 	blt.w	1a003f90 <_printf_i+0x20c>
1a003e66:	6821      	ldr	r1, [r4, #0]
1a003e68:	f021 0104 	bic.w	r1, r1, #4
1a003e6c:	6021      	str	r1, [r4, #0]
1a003e6e:	2b00      	cmp	r3, #0
1a003e70:	d13d      	bne.n	1a003eee <_printf_i+0x16a>
1a003e72:	2d00      	cmp	r5, #0
1a003e74:	f040 808e 	bne.w	1a003f94 <_printf_i+0x210>
1a003e78:	4665      	mov	r5, ip
1a003e7a:	2a08      	cmp	r2, #8
1a003e7c:	d10b      	bne.n	1a003e96 <_printf_i+0x112>
1a003e7e:	6823      	ldr	r3, [r4, #0]
1a003e80:	07db      	lsls	r3, r3, #31
1a003e82:	d508      	bpl.n	1a003e96 <_printf_i+0x112>
1a003e84:	6923      	ldr	r3, [r4, #16]
1a003e86:	6862      	ldr	r2, [r4, #4]
1a003e88:	429a      	cmp	r2, r3
1a003e8a:	bfde      	ittt	le
1a003e8c:	2330      	movle	r3, #48	; 0x30
1a003e8e:	f805 3c01 	strble.w	r3, [r5, #-1]
1a003e92:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a003e96:	ebac 0305 	sub.w	r3, ip, r5
1a003e9a:	6123      	str	r3, [r4, #16]
1a003e9c:	f8cd 8000 	str.w	r8, [sp]
1a003ea0:	463b      	mov	r3, r7
1a003ea2:	aa03      	add	r2, sp, #12
1a003ea4:	4621      	mov	r1, r4
1a003ea6:	4630      	mov	r0, r6
1a003ea8:	f7ff fef6 	bl	1a003c98 <_printf_common>
1a003eac:	3001      	adds	r0, #1
1a003eae:	d14d      	bne.n	1a003f4c <_printf_i+0x1c8>
1a003eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003eb4:	b005      	add	sp, #20
1a003eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a003eba:	4839      	ldr	r0, [pc, #228]	; (1a003fa0 <_printf_i+0x21c>)
1a003ebc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a003ec0:	6813      	ldr	r3, [r2, #0]
1a003ec2:	6821      	ldr	r1, [r4, #0]
1a003ec4:	1d1d      	adds	r5, r3, #4
1a003ec6:	681b      	ldr	r3, [r3, #0]
1a003ec8:	6015      	str	r5, [r2, #0]
1a003eca:	060a      	lsls	r2, r1, #24
1a003ecc:	d50b      	bpl.n	1a003ee6 <_printf_i+0x162>
1a003ece:	07ca      	lsls	r2, r1, #31
1a003ed0:	bf44      	itt	mi
1a003ed2:	f041 0120 	orrmi.w	r1, r1, #32
1a003ed6:	6021      	strmi	r1, [r4, #0]
1a003ed8:	b91b      	cbnz	r3, 1a003ee2 <_printf_i+0x15e>
1a003eda:	6822      	ldr	r2, [r4, #0]
1a003edc:	f022 0220 	bic.w	r2, r2, #32
1a003ee0:	6022      	str	r2, [r4, #0]
1a003ee2:	2210      	movs	r2, #16
1a003ee4:	e7b7      	b.n	1a003e56 <_printf_i+0xd2>
1a003ee6:	064d      	lsls	r5, r1, #25
1a003ee8:	bf48      	it	mi
1a003eea:	b29b      	uxthmi	r3, r3
1a003eec:	e7ef      	b.n	1a003ece <_printf_i+0x14a>
1a003eee:	4665      	mov	r5, ip
1a003ef0:	fbb3 f1f2 	udiv	r1, r3, r2
1a003ef4:	fb02 3311 	mls	r3, r2, r1, r3
1a003ef8:	5cc3      	ldrb	r3, [r0, r3]
1a003efa:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a003efe:	460b      	mov	r3, r1
1a003f00:	2900      	cmp	r1, #0
1a003f02:	d1f5      	bne.n	1a003ef0 <_printf_i+0x16c>
1a003f04:	e7b9      	b.n	1a003e7a <_printf_i+0xf6>
1a003f06:	6813      	ldr	r3, [r2, #0]
1a003f08:	6825      	ldr	r5, [r4, #0]
1a003f0a:	6961      	ldr	r1, [r4, #20]
1a003f0c:	1d18      	adds	r0, r3, #4
1a003f0e:	6010      	str	r0, [r2, #0]
1a003f10:	0628      	lsls	r0, r5, #24
1a003f12:	681b      	ldr	r3, [r3, #0]
1a003f14:	d501      	bpl.n	1a003f1a <_printf_i+0x196>
1a003f16:	6019      	str	r1, [r3, #0]
1a003f18:	e002      	b.n	1a003f20 <_printf_i+0x19c>
1a003f1a:	066a      	lsls	r2, r5, #25
1a003f1c:	d5fb      	bpl.n	1a003f16 <_printf_i+0x192>
1a003f1e:	8019      	strh	r1, [r3, #0]
1a003f20:	2300      	movs	r3, #0
1a003f22:	6123      	str	r3, [r4, #16]
1a003f24:	4665      	mov	r5, ip
1a003f26:	e7b9      	b.n	1a003e9c <_printf_i+0x118>
1a003f28:	6813      	ldr	r3, [r2, #0]
1a003f2a:	1d19      	adds	r1, r3, #4
1a003f2c:	6011      	str	r1, [r2, #0]
1a003f2e:	681d      	ldr	r5, [r3, #0]
1a003f30:	6862      	ldr	r2, [r4, #4]
1a003f32:	2100      	movs	r1, #0
1a003f34:	4628      	mov	r0, r5
1a003f36:	f000 f83b 	bl	1a003fb0 <memchr>
1a003f3a:	b108      	cbz	r0, 1a003f40 <_printf_i+0x1bc>
1a003f3c:	1b40      	subs	r0, r0, r5
1a003f3e:	6060      	str	r0, [r4, #4]
1a003f40:	6863      	ldr	r3, [r4, #4]
1a003f42:	6123      	str	r3, [r4, #16]
1a003f44:	2300      	movs	r3, #0
1a003f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a003f4a:	e7a7      	b.n	1a003e9c <_printf_i+0x118>
1a003f4c:	6923      	ldr	r3, [r4, #16]
1a003f4e:	462a      	mov	r2, r5
1a003f50:	4639      	mov	r1, r7
1a003f52:	4630      	mov	r0, r6
1a003f54:	47c0      	blx	r8
1a003f56:	3001      	adds	r0, #1
1a003f58:	d0aa      	beq.n	1a003eb0 <_printf_i+0x12c>
1a003f5a:	6823      	ldr	r3, [r4, #0]
1a003f5c:	079b      	lsls	r3, r3, #30
1a003f5e:	d413      	bmi.n	1a003f88 <_printf_i+0x204>
1a003f60:	68e0      	ldr	r0, [r4, #12]
1a003f62:	9b03      	ldr	r3, [sp, #12]
1a003f64:	4298      	cmp	r0, r3
1a003f66:	bfb8      	it	lt
1a003f68:	4618      	movlt	r0, r3
1a003f6a:	e7a3      	b.n	1a003eb4 <_printf_i+0x130>
1a003f6c:	2301      	movs	r3, #1
1a003f6e:	464a      	mov	r2, r9
1a003f70:	4639      	mov	r1, r7
1a003f72:	4630      	mov	r0, r6
1a003f74:	47c0      	blx	r8
1a003f76:	3001      	adds	r0, #1
1a003f78:	d09a      	beq.n	1a003eb0 <_printf_i+0x12c>
1a003f7a:	3501      	adds	r5, #1
1a003f7c:	68e3      	ldr	r3, [r4, #12]
1a003f7e:	9a03      	ldr	r2, [sp, #12]
1a003f80:	1a9b      	subs	r3, r3, r2
1a003f82:	42ab      	cmp	r3, r5
1a003f84:	dcf2      	bgt.n	1a003f6c <_printf_i+0x1e8>
1a003f86:	e7eb      	b.n	1a003f60 <_printf_i+0x1dc>
1a003f88:	2500      	movs	r5, #0
1a003f8a:	f104 0919 	add.w	r9, r4, #25
1a003f8e:	e7f5      	b.n	1a003f7c <_printf_i+0x1f8>
1a003f90:	2b00      	cmp	r3, #0
1a003f92:	d1ac      	bne.n	1a003eee <_printf_i+0x16a>
1a003f94:	7803      	ldrb	r3, [r0, #0]
1a003f96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a003f9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a003f9e:	e76c      	b.n	1a003e7a <_printf_i+0xf6>
1a003fa0:	1a0044f1 	.word	0x1a0044f1
1a003fa4:	1a004502 	.word	0x1a004502
1a003fa8:	ffffffff 	.word	0xffffffff
1a003fac:	ffffffff 	.word	0xffffffff

1a003fb0 <memchr>:
1a003fb0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a003fb4:	2a10      	cmp	r2, #16
1a003fb6:	db2b      	blt.n	1a004010 <memchr+0x60>
1a003fb8:	f010 0f07 	tst.w	r0, #7
1a003fbc:	d008      	beq.n	1a003fd0 <memchr+0x20>
1a003fbe:	f810 3b01 	ldrb.w	r3, [r0], #1
1a003fc2:	3a01      	subs	r2, #1
1a003fc4:	428b      	cmp	r3, r1
1a003fc6:	d02d      	beq.n	1a004024 <memchr+0x74>
1a003fc8:	f010 0f07 	tst.w	r0, #7
1a003fcc:	b342      	cbz	r2, 1a004020 <memchr+0x70>
1a003fce:	d1f6      	bne.n	1a003fbe <memchr+0xe>
1a003fd0:	b4f0      	push	{r4, r5, r6, r7}
1a003fd2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a003fd6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a003fda:	f022 0407 	bic.w	r4, r2, #7
1a003fde:	f07f 0700 	mvns.w	r7, #0
1a003fe2:	2300      	movs	r3, #0
1a003fe4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a003fe8:	3c08      	subs	r4, #8
1a003fea:	ea85 0501 	eor.w	r5, r5, r1
1a003fee:	ea86 0601 	eor.w	r6, r6, r1
1a003ff2:	fa85 f547 	uadd8	r5, r5, r7
1a003ff6:	faa3 f587 	sel	r5, r3, r7
1a003ffa:	fa86 f647 	uadd8	r6, r6, r7
1a003ffe:	faa5 f687 	sel	r6, r5, r7
1a004002:	b98e      	cbnz	r6, 1a004028 <memchr+0x78>
1a004004:	d1ee      	bne.n	1a003fe4 <memchr+0x34>
1a004006:	bcf0      	pop	{r4, r5, r6, r7}
1a004008:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00400c:	f002 0207 	and.w	r2, r2, #7
1a004010:	b132      	cbz	r2, 1a004020 <memchr+0x70>
1a004012:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004016:	3a01      	subs	r2, #1
1a004018:	ea83 0301 	eor.w	r3, r3, r1
1a00401c:	b113      	cbz	r3, 1a004024 <memchr+0x74>
1a00401e:	d1f8      	bne.n	1a004012 <memchr+0x62>
1a004020:	2000      	movs	r0, #0
1a004022:	4770      	bx	lr
1a004024:	3801      	subs	r0, #1
1a004026:	4770      	bx	lr
1a004028:	2d00      	cmp	r5, #0
1a00402a:	bf06      	itte	eq
1a00402c:	4635      	moveq	r5, r6
1a00402e:	3803      	subeq	r0, #3
1a004030:	3807      	subne	r0, #7
1a004032:	f015 0f01 	tst.w	r5, #1
1a004036:	d107      	bne.n	1a004048 <memchr+0x98>
1a004038:	3001      	adds	r0, #1
1a00403a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00403e:	bf02      	ittt	eq
1a004040:	3001      	addeq	r0, #1
1a004042:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a004046:	3001      	addeq	r0, #1
1a004048:	bcf0      	pop	{r4, r5, r6, r7}
1a00404a:	3801      	subs	r0, #1
1a00404c:	4770      	bx	lr
1a00404e:	bf00      	nop

1a004050 <memmove>:
1a004050:	4288      	cmp	r0, r1
1a004052:	b510      	push	{r4, lr}
1a004054:	eb01 0302 	add.w	r3, r1, r2
1a004058:	d807      	bhi.n	1a00406a <memmove+0x1a>
1a00405a:	1e42      	subs	r2, r0, #1
1a00405c:	4299      	cmp	r1, r3
1a00405e:	d00a      	beq.n	1a004076 <memmove+0x26>
1a004060:	f811 4b01 	ldrb.w	r4, [r1], #1
1a004064:	f802 4f01 	strb.w	r4, [r2, #1]!
1a004068:	e7f8      	b.n	1a00405c <memmove+0xc>
1a00406a:	4283      	cmp	r3, r0
1a00406c:	d9f5      	bls.n	1a00405a <memmove+0xa>
1a00406e:	1881      	adds	r1, r0, r2
1a004070:	1ad2      	subs	r2, r2, r3
1a004072:	42d3      	cmn	r3, r2
1a004074:	d100      	bne.n	1a004078 <memmove+0x28>
1a004076:	bd10      	pop	{r4, pc}
1a004078:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a00407c:	f801 4d01 	strb.w	r4, [r1, #-1]!
1a004080:	e7f7      	b.n	1a004072 <memmove+0x22>

1a004082 <__malloc_lock>:
1a004082:	4770      	bx	lr

1a004084 <__malloc_unlock>:
1a004084:	4770      	bx	lr

1a004086 <_realloc_r>:
1a004086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004088:	4607      	mov	r7, r0
1a00408a:	4614      	mov	r4, r2
1a00408c:	460e      	mov	r6, r1
1a00408e:	b921      	cbnz	r1, 1a00409a <_realloc_r+0x14>
1a004090:	4611      	mov	r1, r2
1a004092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a004096:	f7ff bc55 	b.w	1a003944 <_malloc_r>
1a00409a:	b922      	cbnz	r2, 1a0040a6 <_realloc_r+0x20>
1a00409c:	f7ff fc04 	bl	1a0038a8 <_free_r>
1a0040a0:	4625      	mov	r5, r4
1a0040a2:	4628      	mov	r0, r5
1a0040a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0040a6:	f000 f814 	bl	1a0040d2 <_malloc_usable_size_r>
1a0040aa:	42a0      	cmp	r0, r4
1a0040ac:	d20f      	bcs.n	1a0040ce <_realloc_r+0x48>
1a0040ae:	4621      	mov	r1, r4
1a0040b0:	4638      	mov	r0, r7
1a0040b2:	f7ff fc47 	bl	1a003944 <_malloc_r>
1a0040b6:	4605      	mov	r5, r0
1a0040b8:	2800      	cmp	r0, #0
1a0040ba:	d0f2      	beq.n	1a0040a2 <_realloc_r+0x1c>
1a0040bc:	4631      	mov	r1, r6
1a0040be:	4622      	mov	r2, r4
1a0040c0:	f7ff fba8 	bl	1a003814 <memcpy>
1a0040c4:	4631      	mov	r1, r6
1a0040c6:	4638      	mov	r0, r7
1a0040c8:	f7ff fbee 	bl	1a0038a8 <_free_r>
1a0040cc:	e7e9      	b.n	1a0040a2 <_realloc_r+0x1c>
1a0040ce:	4635      	mov	r5, r6
1a0040d0:	e7e7      	b.n	1a0040a2 <_realloc_r+0x1c>

1a0040d2 <_malloc_usable_size_r>:
1a0040d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0040d6:	1f18      	subs	r0, r3, #4
1a0040d8:	2b00      	cmp	r3, #0
1a0040da:	bfbc      	itt	lt
1a0040dc:	580b      	ldrlt	r3, [r1, r0]
1a0040de:	18c0      	addlt	r0, r0, r3
1a0040e0:	4770      	bx	lr
1a0040e2:	ffff 654d 			; <UNDEFINED> instruction: 0xffff654d
1a0040e6:	6f6d      	.short	0x6f6d
1a0040e8:	50207972 	.word	0x50207972
1a0040ec:	206c6f6f 	.word	0x206c6f6f
1a0040f0:	206e6f63 	.word	0x206e6f63
1a0040f4:	65657266 	.word	0x65657266
1a0040f8:	534f5452 	.word	0x534f5452
1a0040fc:	73207920 	.word	0x73207920
1a004100:	2e495041 	.word	0x2e495041
1a004104:	00000000 	.word	0x00000000
1a004108:	6154796d 	.word	0x6154796d
1a00410c:	ff006b73 	.word	0xff006b73
1a004110:	656d754e 	.word	0x656d754e
1a004114:	64206f72 	.word	0x64206f72
1a004118:	6c652065 	.word	0x6c652065
1a00411c:	6e656d65 	.word	0x6e656d65
1a004120:	3a736f74 	.word	0x3a736f74
1a004124:	00642520 	.word	0x00642520
1a004128:	6e696c42 	.word	0x6e696c42
1a00412c:	ff00216b 	.word	0xff00216b
1a004130:	454c4449 	.word	0x454c4449
1a004134:	ffffff00 	.word	0xffffff00
1a004138:	51726d54 	.word	0x51726d54
1a00413c:	00000000 	.word	0x00000000
1a004140:	20726d54 	.word	0x20726d54
1a004144:	00637653 	.word	0x00637653

1a004148 <ultrasonicSensorsIrqMap>:
1a004148:	ff020100                                ....

1a00414c <gpioPinsInit>:
1a00414c:	02000104 00050701 05010d03 04080100     ................
1a00415c:	02020002 02000304 00000403 04070002     ................
1a00416c:	030c0300 09050402 05040103 04030208     ................
1a00417c:	04020305 06040504 0802000c 03000b06     ................
1a00418c:	00090607 07060503 060f0504 03030004     ................
1a00419c:	02000404 00050404 06040502 04060200     ................
1a0041ac:	0c050408 05040a04 0003010e 14010a00     ................
1a0041bc:	010f0000 0d000012 00001101 0010010c     ................
1a0041cc:	07070300 000f0300 01000001 00000000     ................
1a0041dc:	000a0600 08060603 06100504 04030005     ................
1a0041ec:	03000106 04090400 04010d05 010b0000     ................
1a0041fc:	0200000f 00000001 00010104 02010800     ................
1a00420c:	01090000 09010006 05040002 04010200     ................
1a00421c:	02020105 02020504 0e00000a 01000b02     ................
1a00422c:	000c020b 00040c01 04000200 01020001     ................
1a00423c:	02000204 00030402 03070302 070b0300     ................
1a00424c:	0c030004 03000507 0006070d 01020e03     ................
1a00425c:	04010504 06020006 02000504 00040405     ................
1a00426c:	08040402 040c0504 0d050409 05040a04     ................
1a00427c:	0005010e ffff0801 636b6974 69547265     ........tikcerTi
1a00428c:	0072656d                                mer.

1a004290 <lpcUarts>:
1a004290:	40081000 06020406 00180205 40081000     ...@...........@
1a0042a0:	09070509 00180706 40082000 00000000     ......... .@....
1a0042b0:	00190000 400c1000 07060107 001a0602     .......@........
1a0042c0:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0042d0:	02020302 001b0204 ff000a0d              ............

1a0042dc <ExtRateIn>:
1a0042dc:	00000000                                ....

1a0042e0 <GpioButtons>:
1a0042e0:	08000400 09010900                       ........

1a0042e8 <GpioLeds>:
1a0042e8:	01050005 0e000205 0c010b01              ............

1a0042f4 <GpioPorts>:
1a0042f4:	03030003 0f050403 05031005 07030603     ................
1a004304:	ffff0802                                ....

1a004308 <OscRateIn>:
1a004308:	00b71b00                                ....

1a00430c <InitClkStates>:
1a00430c:	00010308 00010307 01010f01              ............

1a004318 <pinmuxing>:
1a004318:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004328:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004338:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004348:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004358:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004368:	00d50301 00d50401 00160107 00560207     ..............V.
1a004378:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004388:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a004398:	00b31201 00f01301 00b31401 00b60707     ................
1a0043a8:	00f20000 00b60100                       ........

1a0043b0 <UART_BClock>:
1a0043b0:	01a201c2 01620182                       ......b.

1a0043b8 <UART_PClock>:
1a0043b8:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0043c8:	000000ff                                ....

1a0043cc <periph_to_base>:
1a0043cc:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0043dc:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0043ec:	000100e0 01000100 01200003 00060120     .......... . ...
1a0043fc:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00440c:	01820013 00120182 01a201a2 01c20011     ................
1a00441c:	001001c2 01e201e2 0202000f 000e0202     ................
1a00442c:	02220222 0223000d 001c0223              "."...#.#...

1a004438 <InitClkStates>:
1a004438:	00010100 00010909 0001090a 01010701     ................
1a004448:	00010902 00010906 0101090c 0001090d     ................
1a004458:	0001090e 0001090f 00010910 00010911     ................
1a004468:	00010912 00010913 00011114 00011119     ................
1a004478:	0001111a 0001111b                       ........

1a004480 <__sf_fake_stderr>:
	...

1a0044a0 <__sf_fake_stdin>:
	...

1a0044c0 <__sf_fake_stdout>:
	...
1a0044e0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
1a0044f0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
1a004500:	31300046 35343332 39383736 64636261     F.0123456789abcd
1a004510:	ff006665                                ef..
