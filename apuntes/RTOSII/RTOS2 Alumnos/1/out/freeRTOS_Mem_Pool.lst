
examples/c/sapi/operating_systems/free_rtos/dynamic_mem/freeRTOS_Mem_Pool/out/freeRTOS_Mem_Pool.elf:     file format elf32-littlearm
examples/c/sapi/operating_systems/free_rtos/dynamic_mem/freeRTOS_Mem_Pool/out/freeRTOS_Mem_Pool.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00332d

Program Header:
0x70000001 off    0x0000bd68 vaddr 0x1a003d68 paddr 0x1a003d68 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00008088 vaddr 0x10000088 paddr 0x10000088 align 2**15
         filesz 0x00000000 memsz 0x00002cf4 flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00003d70 memsz 0x00003d70 flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a003d70 align 2**15
         filesz 0x00000084 memsz 0x00000084 flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d68  1a000000  1a000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  10000000  1a003d70  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00010084  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00010084  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00010084  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00010084  2**2
                  CONTENTS
  6 .bss          00002cf4  10000088  10000088  00008088  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00010084  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00010084  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00010084  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00010084  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a003d68  1a003d68  0000bd68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00010084  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00010084  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00010084  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00010084  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00010084  2**2
                  CONTENTS
 17 .noinit       00000000  10002d7c  10002d7c  00010084  2**2
                  CONTENTS
 18 .debug_info   0001afa7  00000000  00000000  00010084  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00004184  00000000  00000000  0002b02b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000a522  00000000  00000000  0002f1af  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000e68  00000000  00000000  000396d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000d98  00000000  00000000  0003a539  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000d0c6  00000000  00000000  0003b2d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   000122cd  00000000  00000000  00048397  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    00025e3b  00000000  00000000  0005a664  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000070  00000000  00000000  0008049f  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000039  00000000  00000000  0008050f  2**0
                  CONTENTS, READONLY
 28 .debug_frame  000025e0  00000000  00000000  00080548  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000088 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a003d68 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002d7c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a002240 l     F .text	000000ac uartProcessIRQ
10002cf4 l     O .bss	00000004 rxIsrCallbackUART0
10002cf8 l     O .bss	00000004 txIsrCallbackUART0
10002cfc l     O .bss	00000004 txIsrCallbackUART2
10002d00 l     O .bss	00000004 txIsrCallbackUART3
1a003b78 l     O .text	00000048 lpcUarts
10002d04 l     O .bss	00000004 rxIsrCallbackUART2
10002d08 l     O .bss	00000004 rxIsrCallbackUART3
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 freeRTOS_Mem_Pool.c
10000088 l     O .bss	00000200 memPoolSto
10000288 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 qf_mem.c
00000000 l    df *ABS*	00000000 heap_1.c
1000028c l     O .bss	00000004 xNextFreeByte
10000290 l     O .bss	00002000 ucHeap
10002290 l     O .bss	00000004 pucAlignedHeap.9926
00000000 l    df *ABS*	00000000 queue.c
1a0004e8 l     F .text	0000001e prvIsQueueFull
1a000508 l     F .text	0000001a prvIsQueueEmpty
1a000524 l     F .text	00000076 prvCopyDataToQueue
1a00059c l     F .text	00000024 prvCopyDataFromQueue
1a0005c0 l     F .text	0000006a prvUnlockQueue
1a0006ac l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002294 l     O .bss	00000168 uxIdleTaskStack.9314
100023fc l     O .bss	00000060 xIdleTaskTCB.9313
1000245c l     O .bss	00000060 xTimerTaskTCB.9320
100024bc l     O .bss	000005a0 uxTimerTaskStack.9321
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a000c88 l     F .text	00000034 prvResetNextTaskUnblockTime
1a000cbc l     F .text	00000092 prvInitialiseNewTask
1a000d50 l     F .text	00000068 prvInitialiseTaskLists
1a000db8 l     F .text	000000a8 prvAddNewTaskToReadyList
1a000e60 l     F .text	0000003a prvDeleteTCB
1a000e9c l     F .text	00000044 prvCheckTasksWaitingTermination
1a000ee0 l     F .text	00000028 prvIdleTask
1a000f08 l     F .text	00000094 prvAddCurrentTaskToDelayedList
10002a5c l     O .bss	00000004 xNumOfOverflows
10002a60 l     O .bss	00000004 pxDelayedTaskList
10002a64 l     O .bss	00000004 xSchedulerRunning
10002a68 l     O .bss	00000014 xTasksWaitingTermination
10002a7c l     O .bss	00000004 pxOverflowDelayedTaskList
10002a80 l     O .bss	00000004 uxPendedTicks
10002a84 l     O .bss	0000008c pxReadyTasksLists
10002b10 l     O .bss	00000004 uxSchedulerSuspended
10002b14 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002b18 l     O .bss	00000004 uxCurrentNumberOfTasks
10002b20 l     O .bss	00000014 xPendingReadyList
10002b34 l     O .bss	00000004 xIdleTaskHandle
10002b38 l     O .bss	00000004 xTickCount
10002b3c l     O .bss	00000004 xNextTaskUnblockTime
10002b40 l     O .bss	00000004 uxTaskNumber
10002b44 l     O .bss	00000014 xDelayedTaskList1
10002b58 l     O .bss	00000014 xDelayedTaskList2
10002b6c l     O .bss	00000014 xSuspendedTaskList
10002b80 l     O .bss	00000004 uxTopReadyPriority
10002b84 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a0016d8 l     F .text	00000020 prvGetNextExpireTime
1a0016f8 l     F .text	00000048 prvInsertTimerInActiveList
1a001740 l     F .text	0000006c prvCheckForValidListAndQueue
1a0017ac l     F .text	00000040 prvInitialiseNewTimer
1a001b60 l     F .text	00000016 prvTimerTask
1a001918 l     F .text	0000007c prvSwitchTimerLists
1a001994 l     F .text	0000002c prvSampleTimeNow
1a0019c0 l     F .text	0000005c prvProcessExpiredTimer
1a001a1c l     F .text	00000074 prvProcessTimerOrBlockTask
1a001a90 l     F .text	000000d0 prvProcessReceivedCommands
10002b88 l     O .bss	00000004 pxCurrentTimerList
10002b8c l     O .bss	00000014 xActiveTimerList1
10002ba0 l     O .bss	00000014 xActiveTimerList2
10002bb4 l     O .bss	000000a0 ucStaticTimerQueueStorage.10316
10002c54 l     O .bss	00000004 xLastTime.10265
10002c58 l     O .bss	00000050 xStaticTimerQueue.10315
10002ca8 l     O .bss	00000004 xTimerQueue
10002cac l     O .bss	00000004 pxOverflowTimerList
10002cb0 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a001b78 l     F .text	00000040 prvTaskExitError
1a001bb8 l     F .text	00000022 prvPortStartFirstTask
1a001be0 l     F .text	0000000e vPortEnableVFP
1a001c40 l       .text	00000000 pxCurrentTCBConst2
1a001d20 l       .text	00000000 pxCurrentTCBConst
10002cb4 l     O .bss	00000001 ucMaxSysCallPriority
10002cb8 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000008 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001f34 l     F .text	0000002c gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
10002cc0 l     O .bss	00000030 tickerObject.10478
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0023e0 l     F .text	00000002 errorOcurred
1a0023e4 l     F .text	00000002 doNothing
1000000c l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a002600 l     F .text	00000040 Board_LED_Init
1a002640 l     F .text	0000003c Board_TEC_Init
1a00267c l     F .text	0000003c Board_GPIO_Init
1a0026b8 l     F .text	00000038 Board_SPI_Init
1a0026f0 l     F .text	00000024 Board_I2C_Init
1a002714 l     F .text	00000030 Board_ADC_Init
1a003bc4 l     O .text	00000012 GpioPorts
1a003be0 l     O .text	00000008 GpioButtons
1a003be8 l     O .text	0000000c GpioLeds
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a003bf4 l     O .text	0000000c InitClkStates
1a003c00 l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a00286c l     F .text	0000002c Chip_UART_GetIndex
1a003c98 l     O .text	00000008 UART_BClock
1a003ca0 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002a10 l     F .text	00000014 Chip_ADC_GetClockIndex
1a002a24 l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002ae8 l     F .text	000000a8 pll_calc_divs
1a002b90 l     F .text	00000104 pll_get_frac
1a002c94 l     F .text	00000048 Chip_Clock_FindBaseClock
1a002f00 l     F .text	00000022 Chip_Clock_GetDivRate
10002d0c l     O .bss	00000008 audio_usb_pll_freq
1a003cb4 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a003d20 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003200 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003214 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
1000004c l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a003d70 l       .ARM.exidx	00000000 __exidx_end
1a003d70 l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a003d68 l       .ARM.exidx	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
00000000 l       *UND*	00000000 _printf_float
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1a003d68 l       .bss_RAM5	00000000 __init_array_end
1a003d68 l       .bss_RAM5	00000000 __preinit_array_end
10002d7c l       .bss	00000000 _pvHeapStart
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a003d68 l       .bss_RAM5	00000000 __init_array_start
1a003d68 l       .bss_RAM5	00000000 __preinit_array_start
1a002d28 g     F .text	0000001c Chip_Clock_GetDividerSource
1a003414 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a002464 g     F .text	00000040 TIMER2_IRQHandler
1a00019c  w    F .text	00000002 DebugMon_Handler
1a0001a8  w    F .text	00000002 RIT_IRQHandler
1a0001a8  w    F .text	00000002 ADCHS_IRQHandler
1a003448 g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001a8  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001c94 g     F .text	0000002c vPortExitCritical
1a0001a8  w    F .text	00000002 I2C0_IRQHandler
10002cf0 g     O .bss	00000004 callBackFuncParams
1a000188  w    F .text	00000002 HardFault_Handler
1a000b70 g     F .text	0000004c vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a002ac8 g     F .text	0000000c Chip_ADC_SetResolution
1a001d30 g     F .text	0000002c SysTick_Handler
1a0028ec g     F .text	00000040 Chip_UART_SetBaud
1a0024f4 g     F .text	00000008 printString
1a0001a8  w    F .text	00000002 SDIO_IRQHandler
1a0001a8  w    F .text	00000002 ATIMER_IRQHandler
1a001cc0 g     F .text	00000064 PendSV_Handler
1a00090c g     F .text	000000e4 xQueueGenericSendFromISR
1a000184  w    F .text	00000002 NMI_Handler
1a000150 g       .text	00000000 __data_section_table_end
1a0001a8  w    F .text	00000002 I2C1_IRQHandler
1a0001a8  w    F .text	00000002 UART1_IRQHandler
1a0001a8  w    F .text	00000002 GPIO5_IRQHandler
1a0001a8  w    F .text	00000002 CAN1_IRQHandler
10002b1c g     O .bss	00000004 pxCurrentTCB
53ff4512 g       *ABS*	00000000 __valid_user_code_checksum
1a0001a8  w    F .text	00000002 USB1_IRQHandler
1a0001a8  w    F .text	00000002 I2S0_IRQHandler
1a001560 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0024a4 g     F .text	00000040 TIMER3_IRQHandler
1a002f8c g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001c8 g     F .text	00000012 bss_init
1a001d94 g     F .text	00000128 xPortStartScheduler
1a00399c g     F .text	00000016 memcpy
1a00146c g     F .text	00000030 vTaskPlaceOnEventList
10002d14 g     O .bss	00000014 myMemPool
1a0001a8  w    F .text	00000002 SGPIO_IRQHandler
1a001d5c  w    F .text	00000038 vPortSetupTimerInterrupt
1a0033b4 g     F .text	00000000 .hidden __aeabi_uldivmod
10002d7c g       .noinit	00000000 _noinit
1a0004d0 g     F .text	00000016 vPortFree
1a0023b0 g     F .text	00000018 uartWriteString
10002d78 g     O .bss	00000004 SystemCoreClock
1a002898 g     F .text	00000054 Chip_UART_Init
1a0001a8  w    F .text	00000002 ADC0_IRQHandler
1a0021c4 g     F .text	00000030 tickerCallback
1a001ebc g     F .text	0000005c vPortValidateInterruptPriority
1a000194  w    F .text	00000002 UsageFault_Handler
1a003008 g     F .text	0000004c Chip_Clock_GetRate
1a000bdc g     F .text	00000018 vListInsertEnd
1a0001a8  w    F .text	00000002 GPIO6_IRQHandler
1a0024e4 g     F .text	0000000e printInitUart
10002d68 g     O .bss	00000008 tickCounter
1a0027f4 g     F .text	0000006c Board_SetupClocking
1a003bdc g     O .text	00000004 ExtRateIn
1a0001a8  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000bd4 g     F .text	00000006 vListInitialiseItem
1a000300 g     F .text	0000004c myTask
1a0001a8  w    F .text	00000002 GPIO1_IRQHandler
1a0009f0 g     F .text	00000158 xQueueReceive
10002d28 g     O .bss	00000040 xQueueRegistry
1a000c68 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001a8  w    F .text	00000002 SSP0_IRQHandler
1a0002fc g     O .text	00000004 CRP_WORD
1a003950 g     F .text	0000004c __libc_init_array
1a0036e4 g     F .text	0000026a .hidden __udivdi3
1a0001a8  w    F .text	00000002 ADC1_IRQHandler
1a00046c g     F .text	00000064 pvPortMalloc
1a002768 g     F .text	0000003c Board_Init
1a0033b0 g     F .text	00000002 _init
1a000bbc g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a001130 g     F .text	0000000c xTaskGetTickCount
1a00077c g     F .text	00000190 xQueueGenericSend
1a0001a8  w    F .text	00000002 RTC_IRQHandler
10002d7c g       .bss	00000000 _ebss
1a0023e8 g     F .text	0000003c TIMER0_IRQHandler
1a000424 g     F .text	00000046 QMPool_get
1a0021f4 g     F .text	0000004c tickInit
1a0001a8  w    F .text	00000002 SPI_IRQHandler
1a0032fc g     F .text	00000030 Chip_I2C_SetClockRate
1a001624 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001a8  w    F .text	00000002 LCD_IRQHandler
1a002cdc g     F .text	0000004c Chip_Clock_EnableCrystal
1a0014d4 g     F .text	0000008c xTaskRemoveFromEventList
1a000c84 g     F .text	00000002 vApplicationMallocFailedHook
1a0001ac g     F .text	0000001a data_init
1a002424 g     F .text	00000040 TIMER1_IRQHandler
1a0032d8 g     F .text	00000024 Chip_I2C_Init
1a0023c8 g     F .text	0000000a UART2_IRQHandler
1a0024fc g     F .text	00000010 printEnter
1a002e98 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a003a34 g     O .text	00000136 gpioPinsInit
1a002394 g     F .text	0000001a uartWriteByte
1a00322c g     F .text	00000012 Chip_SSP_SetClockRate
1a0021ac g     F .text	00000016 gpioToggle
1a0001a8  w    F .text	00000002 GPIO2_IRQHandler
1a001578 g     F .text	00000080 xTaskCheckForTimeOut
1a002f68 g     F .text	00000024 Chip_Clock_GetBaseClock
10000088 g       .bss	00000000 _bss
1a002a94 g     F .text	00000032 Chip_ADC_SetSampleRate
1a001120 g     F .text	00000010 vTaskSuspendAll
1a0001a8  w    F .text	00000002 I2S1_IRQHandler
1a003240 g     F .text	0000003e Chip_SSP_SetBitRate
1a000c28 g     F .text	00000026 uxListRemove
1a0031fc g     F .text	00000002 Chip_GPIO_Init
1a003bd8 g     O .text	00000004 OscRateIn
1a002318 g     F .text	0000007c uartInit
1a000f9c g     F .text	0000007c xTaskCreateStatic
10002d7c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0039c2 g     F .text	00000024 strncpy
1a0013a8 g     F .text	000000c4 vTaskSwitchContext
1a0001a8  w    F .text	00000002 SSP1_IRQHandler
1a0006d0 g     F .text	000000aa xQueueGenericCreateStatic
1a00149c g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a001f60 g     F .text	0000019c gpioInit
1a000c50 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a0018ac g     F .text	0000006c xTimerGenericCommand
1a000c80 g     F .text	00000002 vApplicationStackOverflowHook
1a003444  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0001a8  w    F .text	00000002 USB0_IRQHandler
1a0001a8  w    F .text	00000002 GPIO3_IRQHandler
1a0001a8  w    F .text	00000002 SCT_IRQHandler
1a002d44 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0039b2 g     F .text	00000010 memset
1a00018c  w    F .text	00000002 MemManage_Handler
1a00034c g     F .text	0000006c main
1a0001a8  w    F .text	00000002 WDT_IRQHandler
1a000bf4 g     F .text	00000034 vListInsert
1a001c20 g     F .text	00000024 SVC_Handler
10000004 g     O .data	00000004 DWT_CTRL
1a0017ec g     F .text	00000070 xTimerCreateTimerTask
1a0022ec g     F .text	00000018 uartTxReady
1a0001a8  w    F .text	00000002 GPIO7_IRQHandler
1a002f98 g     F .text	0000003c Chip_Clock_EnableOpts
1a002d60 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0031a4 g     F .text	00000058 fpuInit
1a002e18 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0027a4 g     F .text	0000001c SystemInit
1a0001a8  w    F .text	00000002 SPIFI_IRQHandler
1a0001a8  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0020fc g     F .text	00000058 gpioWrite
1a001260 g     F .text	000000f8 xTaskResumeAll
1a001080 g     F .text	000000a0 vTaskStartScheduler
1a002a54 g     F .text	00000040 Chip_ADC_Init
1a0027c0 g     F .text	00000034 Board_SetupMuxing
1a000404 g     F .text	0000001e QMPool_put
1a00292c g     F .text	000000e4 Chip_UART_SetBaudFDR
10002d70 g     O .bss	00000008 tickRateMS
1a0001a8  w    F .text	00000002 ETH_IRQHandler
10002cbc g     O .bss	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a002304 g     F .text	00000014 uartTxWrite
1a0001a8  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a0015f8 g     F .text	0000000c vTaskMissedYield
1a000178 g       .text	00000000 __section_table_end
1a003280 g     F .text	00000038 Chip_SSP_Init
1a000b48 g     F .text	00000028 vQueueAddToRegistry
1a0001a8  w    F .text	00000002 GINT0_IRQHandler
1a00113c g     F .text	00000124 xTaskIncrementTick
1a0001a8  w    F .text	00000002 DAC_IRQHandler
1a002744 g     F .text	00000024 Board_Debug_Init
1a00062c g     F .text	00000080 xQueueGenericReset
10000084 g       .data	00000000 _edata
1a0032b8 g     F .text	00000020 Chip_I2C_EventHandler
1a0001a8  w    F .text	00000002 M0SUB_IRQHandler
1a001018 g     F .text	00000066 xTaskCreate
1a003054 g     F .text	00000150 Chip_SetupCoreClock
1a0001a8  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a00332c g     F .text	00000084 ResetISR
1a002ad4 g     F .text	00000014 SystemCoreClockUpdate
1a0001a8  w    F .text	00000002 DMA_IRQHandler
1a001358 g     F .text	00000050 vTaskDelay
1a0001a8  w    F .text	00000002 EVRT_IRQHandler
1a0003b8 g     F .text	0000004c QMPool_init
1a001604 g     F .text	00000020 xTaskGetSchedulerState
1a003444  w    F .text	00000002 .hidden __aeabi_idiv0
1a000190  w    F .text	00000002 BusFault_Handler
1a001bf4 g     F .text	0000002c pxPortInitialiseStack
1a002fd4 g     F .text	00000034 Chip_Clock_Enable
1a0023d4 g     F .text	0000000a UART3_IRQHandler
1a0001a8  w    F .text	00000002 MCPWM_IRQHandler
1a00185c g     F .text	0000004e xTimerCreateStatic
1a0033e4 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a0001a8  w    F .text	00000002 M0APP_IRQHandler
1a002154 g     F .text	00000058 gpioRead
1a00250c g     F .text	000000f4 boardInit
1a001c50 g     F .text	00000044 vPortEnterCritical
1a0001a8  w    F .text	00000002 GINT1_IRQHandler
1a002f24 g     F .text	00000044 Chip_Clock_SetBaseClock
1a001f18 g     F .text	0000001c cyclesCounterInit
1a0001a8  w    F .text	00000002 GPIO4_IRQHandler
1a002860 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 2d 33 00 1a 85 01 00 1a 89 01 00 1a     ....-3..........
1a000010:	8d 01 00 1a 91 01 00 1a 95 01 00 1a 12 45 ff 53     .............E.S
	...
1a00002c:	21 1c 00 1a 9d 01 00 1a 00 00 00 00 c1 1c 00 1a     !...............
1a00003c:	31 1d 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     1...............
1a00004c:	00 00 00 00 a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00005c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00006c:	a9 01 00 1a e9 23 00 1a 25 24 00 1a 65 24 00 1a     .....#..%$..e$..
1a00007c:	a5 24 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     .$..............
1a00008c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00009c:	a9 01 00 1a 79 01 00 1a a9 01 00 1a c9 23 00 1a     ....y........#..
1a0000ac:	d5 23 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     .#..............
1a0000bc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000cc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000dc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000ec:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a0000fc:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a00010c:	a9 01 00 1a a9 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a003d70 	.word	0x1a003d70
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000084 	.word	0x00000084
1a000120:	1a003d70 	.word	0x1a003d70
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a003d70 	.word	0x1a003d70
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a003d70 	.word	0x1a003d70
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a003d70 	.word	0x1a003d70
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000088 	.word	0x10000088
1a000154:	00002cf4 	.word	0x00002cf4
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f002 f860 	bl	1a002240 <uartProcessIRQ>
1a000180:	bd08      	pop	{r3, pc}
1a000182:	bf00      	nop

1a000184 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <NMI_Handler>
1a000186:	bf00      	nop

1a000188 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <HardFault_Handler>
1a00018a:	bf00      	nop

1a00018c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <MemManage_Handler>
1a00018e:	bf00      	nop

1a000190 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <BusFault_Handler>
1a000192:	bf00      	nop

1a000194 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <UsageFault_Handler>
1a000196:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <UsageFault_Handler+0x4>
1a00019a:	bf00      	nop

1a00019c <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <DebugMon_Handler>
1a00019e:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <DebugMon_Handler+0x4>
1a0001a2:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a0001a4:	e7fe      	b.n	1a0001a4 <DebugMon_Handler+0x8>
1a0001a6:	bf00      	nop

1a0001a8 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a8:	e7fe      	b.n	1a0001a8 <ADC0_IRQHandler>
1a0001aa:	bf00      	nop

1a0001ac <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001ac:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	2300      	movs	r3, #0
1a0001b0:	e004      	b.n	1a0001bc <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001b2:	6804      	ldr	r4, [r0, #0]
1a0001b4:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b8:	3004      	adds	r0, #4
1a0001ba:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	4293      	cmp	r3, r2
1a0001be:	d3f8      	bcc.n	1a0001b2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001c4:	4770      	bx	lr
1a0001c6:	bf00      	nop

1a0001c8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	2300      	movs	r3, #0
1a0001ca:	e003      	b.n	1a0001d4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001cc:	2200      	movs	r2, #0
1a0001ce:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001d2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d4:	428b      	cmp	r3, r1
1a0001d6:	d3f9      	bcc.n	1a0001cc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d8:	4770      	bx	lr
1a0001da:	bf00      	nop
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <myTask>:

/*==================[definiciones de funciones externas]=====================*/

// Implementacion de funcion de la tarea
void myTask( void* taskParmPtr )
{
1a000300:	b570      	push	{r4, r5, r6, lr}
   // ---------- CONFIGURACIONES ------------------------------
   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE) {
	  //Solicito un bloque de memoria
	  char *block1 = QMPool_get(&myMemPool, 0U); /* asserts on empty pool */
1a000302:	4d0f      	ldr	r5, [pc, #60]	; (1a000340 <myTask+0x40>)
1a000304:	4628      	mov	r0, r5
1a000306:	2100      	movs	r1, #0
1a000308:	f000 f88c 	bl	1a000424 <QMPool_get>
1a00030c:	4604      	mov	r4, r0
      // Intercambia el estado del LEDB
      gpioToggle( LEDB );
1a00030e:	202a      	movs	r0, #42	; 0x2a
1a000310:	f001 ff4c 	bl	1a0021ac <gpioToggle>
      strncpy(block1, "Blink!", 10U);
1a000314:	4620      	mov	r0, r4
1a000316:	490b      	ldr	r1, [pc, #44]	; (1a000344 <myTask+0x44>)
1a000318:	220a      	movs	r2, #10
1a00031a:	f003 fb52 	bl	1a0039c2 <strncpy>
      debugPrintlnString( block1 );
1a00031e:	4e0a      	ldr	r6, [pc, #40]	; (1a000348 <myTask+0x48>)
1a000320:	7830      	ldrb	r0, [r6, #0]
1a000322:	4621      	mov	r1, r4
1a000324:	f002 f8e6 	bl	1a0024f4 <printString>
1a000328:	7830      	ldrb	r0, [r6, #0]
1a00032a:	f002 f8e7 	bl	1a0024fc <printEnter>
      //Libero el bloque de memoria
      QMPool_put(&myMemPool, block1);
1a00032e:	4628      	mov	r0, r5
1a000330:	4621      	mov	r1, r4
1a000332:	f000 f867 	bl	1a000404 <QMPool_put>
      // Envia la tarea al estado bloqueado durante 500ms
      vTaskDelay( 500 / portTICK_RATE_MS );
1a000336:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00033a:	f001 f80d 	bl	1a001358 <vTaskDelay>
   }
1a00033e:	e7e0      	b.n	1a000302 <myTask+0x2>
1a000340:	10002d14 	.word	0x10002d14
1a000344:	1a0039e8 	.word	0x1a0039e8
1a000348:	10000288 	.word	0x10000288

1a00034c <main>:

/*==================[funcion principal]======================================*/

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main(void)
{
1a00034c:	b500      	push	{lr}
1a00034e:	b083      	sub	sp, #12
   // ---------- CONFIGURACIONES ------------------------------
   // Inicializar y configurar la plataforma
   boardConfig();
1a000350:	f002 f8dc 	bl	1a00250c <boardInit>

   // UART for debug messages
   debugPrintConfigUart( UART_USB, 115200 );
1a000354:	4c12      	ldr	r4, [pc, #72]	; (1a0003a0 <main+0x54>)
1a000356:	4620      	mov	r0, r4
1a000358:	2103      	movs	r1, #3
1a00035a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a00035e:	f002 f8c1 	bl	1a0024e4 <printInitUart>
   debugPrintlnString( "Memory Pool con freeRTOS y sAPI." );
1a000362:	7820      	ldrb	r0, [r4, #0]
1a000364:	490f      	ldr	r1, [pc, #60]	; (1a0003a4 <main+0x58>)
1a000366:	f002 f8c5 	bl	1a0024f4 <printString>
1a00036a:	7820      	ldrb	r0, [r4, #0]
1a00036c:	f002 f8c6 	bl	1a0024fc <printEnter>

   // Led para dar se�al de vida
   gpioWrite( LED3, ON );
1a000370:	202d      	movs	r0, #45	; 0x2d
1a000372:	2101      	movs	r1, #1
1a000374:	f001 fec2 	bl	1a0020fc <gpioWrite>

   //Inicialización del Pool
   QMPool_init(&myMemPool,
1a000378:	480b      	ldr	r0, [pc, #44]	; (1a0003a8 <main+0x5c>)
1a00037a:	490c      	ldr	r1, [pc, #48]	; (1a0003ac <main+0x60>)
1a00037c:	f44f 7200 	mov.w	r2, #512	; 0x200
1a000380:	230a      	movs	r3, #10
1a000382:	f000 f819 	bl	1a0003b8 <QMPool_init>
               memPoolSto,
               sizeof(memPoolSto),
               10U);  /* Bloques de 10 bytes cada uno */

   // Crear tarea en freeRTOS
   xTaskCreate(
1a000386:	2301      	movs	r3, #1
1a000388:	9300      	str	r3, [sp, #0]
1a00038a:	2300      	movs	r3, #0
1a00038c:	9301      	str	r3, [sp, #4]
1a00038e:	4808      	ldr	r0, [pc, #32]	; (1a0003b0 <main+0x64>)
1a000390:	4908      	ldr	r1, [pc, #32]	; (1a0003b4 <main+0x68>)
1a000392:	22b4      	movs	r2, #180	; 0xb4
1a000394:	f000 fe40 	bl	1a001018 <xTaskCreate>
      tskIDLE_PRIORITY+1,         // Prioridad de la tarea
      0                           // Puntero a la tarea creada en el sistema
   );

   // Iniciar scheduler
   vTaskStartScheduler();
1a000398:	f000 fe72 	bl	1a001080 <vTaskStartScheduler>

   // ---------- REPETIR POR SIEMPRE --------------------------
   while( TRUE ) {
      // Si cae en este while 1 significa que no pudo iniciar el scheduler
   }
1a00039c:	e7fe      	b.n	1a00039c <main+0x50>
1a00039e:	bf00      	nop
1a0003a0:	10000288 	.word	0x10000288
1a0003a4:	1a0039f0 	.word	0x1a0039f0
1a0003a8:	10002d14 	.word	0x10002d14
1a0003ac:	10000088 	.word	0x10000088
1a0003b0:	1a000301 	.word	0x1a000301
1a0003b4:	1a003a14 	.word	0x1a003a14

1a0003b8 <QMPool_init>:
* The following example illustrates how to invoke QMPool_init():
* @include qmp_init.c
*/
void QMPool_init(QMPool * const me, void * const poolSto,
                 uint_fast32_t poolSize, uint_fast16_t blockSize)
{
1a0003b8:	b4f0      	push	{r4, r5, r6, r7}
    QFreeBlock *fb;
    uint_fast16_t nblocks;
	
    me->free_head = poolSto;
1a0003ba:	6001      	str	r1, [r0, #0]

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
1a0003bc:	2404      	movs	r4, #4
1a0003be:	8184      	strh	r4, [r0, #12]
    nblocks = (uint_fast16_t)1;/* #free blocks that fit in one memory block */
1a0003c0:	2601      	movs	r6, #1
    while (me->blockSize < (QMPoolSize)blockSize) {
1a0003c2:	e002      	b.n	1a0003ca <QMPool_init+0x12>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
1a0003c4:	3404      	adds	r4, #4
1a0003c6:	8184      	strh	r4, [r0, #12]
        ++nblocks;
1a0003c8:	3601      	adds	r6, #1
    me->free_head = poolSto;

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
    nblocks = (uint_fast16_t)1;/* #free blocks that fit in one memory block */
    while (me->blockSize < (QMPoolSize)blockSize) {
1a0003ca:	8984      	ldrh	r4, [r0, #12]
1a0003cc:	b29d      	uxth	r5, r3
1a0003ce:	42ac      	cmp	r4, r5
1a0003d0:	d3f8      	bcc.n	1a0003c4 <QMPool_init+0xc>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
        ++nblocks;
    }
    blockSize = (uint_fast16_t)me->blockSize; /* round-up to nearest block */
1a0003d2:	4627      	mov	r7, r4

    /* chain all blocks together in a free-list... */
    poolSize -= (uint_fast32_t)blockSize; /* don't count the last block */
1a0003d4:	1b14      	subs	r4, r2, r4
    me->nTot  = (QMPoolCtr)1;    /* the last block already in the pool */
1a0003d6:	2301      	movs	r3, #1
1a0003d8:	81c3      	strh	r3, [r0, #14]
    fb = (QFreeBlock *)me->free_head; /* start at the head of the free list */
1a0003da:	6803      	ldr	r3, [r0, #0]

    /* chain all blocks together in a free-list... */
    while (poolSize >= (uint_fast32_t)blockSize) {
1a0003dc:	e007      	b.n	1a0003ee <QMPool_init+0x36>
        fb->next = &QF_PTR_AT_(fb, nblocks);/*point next link to next block */
1a0003de:	eb03 0286 	add.w	r2, r3, r6, lsl #2
1a0003e2:	601a      	str	r2, [r3, #0]
        fb = fb->next;           /* advance to the next block */
1a0003e4:	681b      	ldr	r3, [r3, #0]
        poolSize -= (uint_fast32_t)blockSize; /* reduce available pool size */
1a0003e6:	1be4      	subs	r4, r4, r7
        ++me->nTot;              /* increment the number of blocks so far */
1a0003e8:	89c5      	ldrh	r5, [r0, #14]
1a0003ea:	3501      	adds	r5, #1
1a0003ec:	81c5      	strh	r5, [r0, #14]
    poolSize -= (uint_fast32_t)blockSize; /* don't count the last block */
    me->nTot  = (QMPoolCtr)1;    /* the last block already in the pool */
    fb = (QFreeBlock *)me->free_head; /* start at the head of the free list */

    /* chain all blocks together in a free-list... */
    while (poolSize >= (uint_fast32_t)blockSize) {
1a0003ee:	42bc      	cmp	r4, r7
1a0003f0:	d2f5      	bcs.n	1a0003de <QMPool_init+0x26>
        fb = fb->next;           /* advance to the next block */
        poolSize -= (uint_fast32_t)blockSize; /* reduce available pool size */
        ++me->nTot;              /* increment the number of blocks so far */
    }

    fb->next  = (QFreeBlock *)0; /* the last link points to NULL */
1a0003f2:	2200      	movs	r2, #0
1a0003f4:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;        /* all blocks are free */
1a0003f6:	89c2      	ldrh	r2, [r0, #14]
1a0003f8:	8202      	strh	r2, [r0, #16]
    me->nMin  = me->nTot;        /* the minimum number of free blocks */
1a0003fa:	8242      	strh	r2, [r0, #18]
    me->start = poolSto;         /* the original start this pool buffer */
1a0003fc:	6041      	str	r1, [r0, #4]
    me->end   = fb;              /* the last block in this pool */
1a0003fe:	6083      	str	r3, [r0, #8]
}
1a000400:	bcf0      	pop	{r4, r5, r6, r7}
1a000402:	4770      	bx	lr

1a000404 <QMPool_put>:
*
* @usage
* The following example illustrates how to use QMPool_put():
* @include qmp_use.c
*/
void QMPool_put(QMPool * const me, void *b) {
1a000404:	b538      	push	{r3, r4, r5, lr}
1a000406:	4604      	mov	r4, r0
1a000408:	460d      	mov	r5, r1
    
    /** @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
	portENTER_CRITICAL(); //Enter on critical section
1a00040a:	f001 fc21 	bl	1a001c50 <vPortEnterCritical>

    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
1a00040e:	6823      	ldr	r3, [r4, #0]
1a000410:	602b      	str	r3, [r5, #0]
    me->free_head = b;      /* set as new head of the free list */
1a000412:	6025      	str	r5, [r4, #0]
    ++me->nFree;            /* one more free block in this pool */
1a000414:	8a23      	ldrh	r3, [r4, #16]
1a000416:	3301      	adds	r3, #1
1a000418:	b29b      	uxth	r3, r3
1a00041a:	8223      	strh	r3, [r4, #16]
    
    portEXIT_CRITICAL(); //Exit from critical section
1a00041c:	f001 fc3a 	bl	1a001c94 <vPortExitCritical>
1a000420:	bd38      	pop	{r3, r4, r5, pc}
1a000422:	bf00      	nop

1a000424 <QMPool_get>:
*
* @usage
* The following example illustrates how to use QMPool_get():
* @include qmp_use.c
*/
void *QMPool_get(QMPool * const me, uint_fast16_t const margin) {
1a000424:	b538      	push	{r3, r4, r5, lr}
1a000426:	4604      	mov	r4, r0
1a000428:	460d      	mov	r5, r1
    QFreeBlock *fb;
    
    portENTER_CRITICAL(); //Enter on critical section
1a00042a:	f001 fc11 	bl	1a001c50 <vPortEnterCritical>

    /* have more free blocks than the requested margin? */
    if (me->nFree > (QMPoolCtr)margin) {
1a00042e:	8a23      	ldrh	r3, [r4, #16]
1a000430:	b29b      	uxth	r3, r3
1a000432:	b2ad      	uxth	r5, r5
1a000434:	42ab      	cmp	r3, r5
1a000436:	d913      	bls.n	1a000460 <QMPool_get+0x3c>
        void *fb_next;
        fb = (QFreeBlock *)me->free_head; /* get a free block */
1a000438:	6825      	ldr	r5, [r4, #0]

        fb_next = fb->next; /* put volatile to a temporary to avoid UB */
1a00043a:	682a      	ldr	r2, [r5, #0]

        /* is the pool becoming empty? */
        --me->nFree; /* one less free block */
1a00043c:	8a23      	ldrh	r3, [r4, #16]
1a00043e:	3b01      	subs	r3, #1
1a000440:	b29b      	uxth	r3, r3
1a000442:	8223      	strh	r3, [r4, #16]
        if (me->nFree == (QMPoolCtr)0) {
1a000444:	8a23      	ldrh	r3, [r4, #16]
1a000446:	b29b      	uxth	r3, r3
1a000448:	b90b      	cbnz	r3, 1a00044e <QMPool_get+0x2a>

            me->nMin = (QMPoolCtr)0; /* remember that the pool got empty */
1a00044a:	8263      	strh	r3, [r4, #18]
1a00044c:	e006      	b.n	1a00045c <QMPool_get+0x38>
            * when the client code writes past the memory block, thus
            * corrupting the next block.
            */

            /* is the number of free blocks the new minimum so far? */
            if (me->nMin > me->nFree) {
1a00044e:	8a61      	ldrh	r1, [r4, #18]
1a000450:	8a23      	ldrh	r3, [r4, #16]
1a000452:	b29b      	uxth	r3, r3
1a000454:	4299      	cmp	r1, r3
1a000456:	d901      	bls.n	1a00045c <QMPool_get+0x38>
                me->nMin = me->nFree; /* remember the new minimum */
1a000458:	8a23      	ldrh	r3, [r4, #16]
1a00045a:	8263      	strh	r3, [r4, #18]
            }
        }

        me->free_head = fb_next; /* set the head to the next free block */
1a00045c:	6022      	str	r2, [r4, #0]
1a00045e:	e000      	b.n	1a000462 <QMPool_get+0x3e>

    }
    /* don't have enough free blocks at this point */
    else {

    	fb = (QFreeBlock *)0;
1a000460:	2500      	movs	r5, #0

    }

    portEXIT_CRITICAL(); //Exit from critical section
1a000462:	f001 fc17 	bl	1a001c94 <vPortExitCritical>

    return fb;  /* return the block or NULL pointer to the caller */
}
1a000466:	4628      	mov	r0, r5
1a000468:	bd38      	pop	{r3, r4, r5, pc}
1a00046a:	bf00      	nop

1a00046c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a00046c:	b538      	push	{r3, r4, r5, lr}
1a00046e:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a000470:	f010 0f07 	tst.w	r0, #7
1a000474:	d002      	beq.n	1a00047c <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000476:	f020 0407 	bic.w	r4, r0, #7
1a00047a:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a00047c:	f000 fe50 	bl	1a001120 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a000480:	4b10      	ldr	r3, [pc, #64]	; (1a0004c4 <pvPortMalloc+0x58>)
1a000482:	681b      	ldr	r3, [r3, #0]
1a000484:	b923      	cbnz	r3, 1a000490 <pvPortMalloc+0x24>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a000486:	4b10      	ldr	r3, [pc, #64]	; (1a0004c8 <pvPortMalloc+0x5c>)
1a000488:	f023 0307 	bic.w	r3, r3, #7
1a00048c:	4a0d      	ldr	r2, [pc, #52]	; (1a0004c4 <pvPortMalloc+0x58>)
1a00048e:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a000490:	4b0e      	ldr	r3, [pc, #56]	; (1a0004cc <pvPortMalloc+0x60>)
1a000492:	681b      	ldr	r3, [r3, #0]
1a000494:	441c      	add	r4, r3
1a000496:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a00049a:	4294      	cmp	r4, r2
1a00049c:	d807      	bhi.n	1a0004ae <pvPortMalloc+0x42>
1a00049e:	42a3      	cmp	r3, r4
1a0004a0:	d207      	bcs.n	1a0004b2 <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a0004a2:	4a08      	ldr	r2, [pc, #32]	; (1a0004c4 <pvPortMalloc+0x58>)
1a0004a4:	6815      	ldr	r5, [r2, #0]
1a0004a6:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a0004a8:	4b08      	ldr	r3, [pc, #32]	; (1a0004cc <pvPortMalloc+0x60>)
1a0004aa:	601c      	str	r4, [r3, #0]
1a0004ac:	e002      	b.n	1a0004b4 <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
1a0004ae:	2500      	movs	r5, #0
1a0004b0:	e000      	b.n	1a0004b4 <pvPortMalloc+0x48>
1a0004b2:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a0004b4:	f000 fed4 	bl	1a001260 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
1a0004b8:	b90d      	cbnz	r5, 1a0004be <pvPortMalloc+0x52>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a0004ba:	f000 fbe3 	bl	1a000c84 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a0004be:	4628      	mov	r0, r5
1a0004c0:	bd38      	pop	{r3, r4, r5, pc}
1a0004c2:	bf00      	nop
1a0004c4:	10002290 	.word	0x10002290
1a0004c8:	10000298 	.word	0x10000298
1a0004cc:	1000028c 	.word	0x1000028c

1a0004d0 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a0004d0:	b140      	cbz	r0, 1a0004e4 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0004d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0004d6:	f383 8811 	msr	BASEPRI, r3
1a0004da:	f3bf 8f6f 	isb	sy
1a0004de:	f3bf 8f4f 	dsb	sy
1a0004e2:	e7fe      	b.n	1a0004e2 <vPortFree+0x12>
1a0004e4:	4770      	bx	lr
1a0004e6:	bf00      	nop

1a0004e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a0004e8:	b510      	push	{r4, lr}
1a0004ea:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a0004ec:	f001 fbb0 	bl	1a001c50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a0004f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0004f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0004f4:	429a      	cmp	r2, r3
1a0004f6:	d101      	bne.n	1a0004fc <prvIsQueueFull+0x14>
		{
			xReturn = pdTRUE;
1a0004f8:	2401      	movs	r4, #1
1a0004fa:	e000      	b.n	1a0004fe <prvIsQueueFull+0x16>
		}
		else
		{
			xReturn = pdFALSE;
1a0004fc:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a0004fe:	f001 fbc9 	bl	1a001c94 <vPortExitCritical>

	return xReturn;
}
1a000502:	4620      	mov	r0, r4
1a000504:	bd10      	pop	{r4, pc}
1a000506:	bf00      	nop

1a000508 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
1a000508:	b510      	push	{r4, lr}
1a00050a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a00050c:	f001 fba0 	bl	1a001c50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000510:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000512:	b90b      	cbnz	r3, 1a000518 <prvIsQueueEmpty+0x10>
		{
			xReturn = pdTRUE;
1a000514:	2401      	movs	r4, #1
1a000516:	e000      	b.n	1a00051a <prvIsQueueEmpty+0x12>
		}
		else
		{
			xReturn = pdFALSE;
1a000518:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a00051a:	f001 fbbb 	bl	1a001c94 <vPortExitCritical>

	return xReturn;
}
1a00051e:	4620      	mov	r0, r4
1a000520:	bd10      	pop	{r4, pc}
1a000522:	bf00      	nop

1a000524 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
1a000524:	b570      	push	{r4, r5, r6, lr}
1a000526:	4604      	mov	r4, r0
1a000528:	4616      	mov	r6, r2
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00052a:	6b85      	ldr	r5, [r0, #56]	; 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a00052c:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00052e:	b93a      	cbnz	r2, 1a000540 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000530:	6803      	ldr	r3, [r0, #0]
1a000532:	bb43      	cbnz	r3, 1a000586 <prvCopyDataToQueue+0x62>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000534:	6840      	ldr	r0, [r0, #4]
1a000536:	f001 f875 	bl	1a001624 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a00053a:	2300      	movs	r3, #0
1a00053c:	6063      	str	r3, [r4, #4]
1a00053e:	e029      	b.n	1a000594 <prvCopyDataToQueue+0x70>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
1a000540:	b96e      	cbnz	r6, 1a00055e <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000542:	6880      	ldr	r0, [r0, #8]
1a000544:	f003 fa2a 	bl	1a00399c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000548:	68a2      	ldr	r2, [r4, #8]
1a00054a:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a00054c:	4413      	add	r3, r2
1a00054e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000550:	6862      	ldr	r2, [r4, #4]
1a000552:	4293      	cmp	r3, r2
1a000554:	d319      	bcc.n	1a00058a <prvCopyDataToQueue+0x66>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000556:	6823      	ldr	r3, [r4, #0]
1a000558:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
1a00055a:	2000      	movs	r0, #0
1a00055c:	e01a      	b.n	1a000594 <prvCopyDataToQueue+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00055e:	68c0      	ldr	r0, [r0, #12]
1a000560:	f003 fa1c 	bl	1a00399c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000564:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000566:	425b      	negs	r3, r3
1a000568:	68e2      	ldr	r2, [r4, #12]
1a00056a:	441a      	add	r2, r3
1a00056c:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00056e:	6821      	ldr	r1, [r4, #0]
1a000570:	428a      	cmp	r2, r1
1a000572:	d202      	bcs.n	1a00057a <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000574:	6862      	ldr	r2, [r4, #4]
1a000576:	4413      	add	r3, r2
1a000578:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
1a00057a:	2e02      	cmp	r6, #2
1a00057c:	d107      	bne.n	1a00058e <prvCopyDataToQueue+0x6a>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00057e:	b145      	cbz	r5, 1a000592 <prvCopyDataToQueue+0x6e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
1a000580:	3d01      	subs	r5, #1
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
1a000582:	2000      	movs	r0, #0
1a000584:	e006      	b.n	1a000594 <prvCopyDataToQueue+0x70>
1a000586:	2000      	movs	r0, #0
1a000588:	e004      	b.n	1a000594 <prvCopyDataToQueue+0x70>
1a00058a:	2000      	movs	r0, #0
1a00058c:	e002      	b.n	1a000594 <prvCopyDataToQueue+0x70>
1a00058e:	2000      	movs	r0, #0
1a000590:	e000      	b.n	1a000594 <prvCopyDataToQueue+0x70>
1a000592:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000594:	3501      	adds	r5, #1
1a000596:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
1a000598:	bd70      	pop	{r4, r5, r6, pc}
1a00059a:	bf00      	nop

1a00059c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a00059c:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00059e:	b172      	cbz	r2, 1a0005be <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
1a0005a0:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a0005a2:	68c3      	ldr	r3, [r0, #12]
1a0005a4:	4413      	add	r3, r2
1a0005a6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a0005a8:	6844      	ldr	r4, [r0, #4]
1a0005aa:	42a3      	cmp	r3, r4
1a0005ac:	d301      	bcc.n	1a0005b2 <prvCopyDataFromQueue+0x16>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a0005ae:	6803      	ldr	r3, [r0, #0]
1a0005b0:	60c3      	str	r3, [r0, #12]
1a0005b2:	4603      	mov	r3, r0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a0005b4:	4608      	mov	r0, r1
1a0005b6:	68d9      	ldr	r1, [r3, #12]
1a0005b8:	f003 f9f0 	bl	1a00399c <memcpy>
1a0005bc:	bd10      	pop	{r4, pc}
1a0005be:	4770      	bx	lr

1a0005c0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
1a0005c0:	b538      	push	{r3, r4, r5, lr}
1a0005c2:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
1a0005c4:	f001 fb44 	bl	1a001c50 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
1a0005c8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a0005cc:	b2e4      	uxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0005ce:	e00a      	b.n	1a0005e6 <prvUnlockQueue+0x26>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0005d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a0005d2:	b15b      	cbz	r3, 1a0005ec <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0005d4:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a0005d8:	f000 ff7c 	bl	1a0014d4 <xTaskRemoveFromEventList>
1a0005dc:	b108      	cbz	r0, 1a0005e2 <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
1a0005de:	f001 f80b 	bl	1a0015f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
1a0005e2:	3c01      	subs	r4, #1
1a0005e4:	b2e4      	uxtb	r4, r4
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0005e6:	b263      	sxtb	r3, r4
1a0005e8:	2b00      	cmp	r3, #0
1a0005ea:	dcf1      	bgt.n	1a0005d0 <prvUnlockQueue+0x10>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
1a0005ec:	23ff      	movs	r3, #255	; 0xff
1a0005ee:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
1a0005f2:	f001 fb4f 	bl	1a001c94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
1a0005f6:	f001 fb2b 	bl	1a001c50 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
1a0005fa:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0005fe:	b2e4      	uxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000600:	e00a      	b.n	1a000618 <prvUnlockQueue+0x58>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000602:	692b      	ldr	r3, [r5, #16]
1a000604:	b15b      	cbz	r3, 1a00061e <prvUnlockQueue+0x5e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000606:	f105 0010 	add.w	r0, r5, #16
1a00060a:	f000 ff63 	bl	1a0014d4 <xTaskRemoveFromEventList>
1a00060e:	b108      	cbz	r0, 1a000614 <prvUnlockQueue+0x54>
				{
					vTaskMissedYield();
1a000610:	f000 fff2 	bl	1a0015f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
1a000614:	3c01      	subs	r4, #1
1a000616:	b2e4      	uxtb	r4, r4
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000618:	b263      	sxtb	r3, r4
1a00061a:	2b00      	cmp	r3, #0
1a00061c:	dcf1      	bgt.n	1a000602 <prvUnlockQueue+0x42>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
1a00061e:	23ff      	movs	r3, #255	; 0xff
1a000620:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
1a000624:	f001 fb36 	bl	1a001c94 <vPortExitCritical>
1a000628:	bd38      	pop	{r3, r4, r5, pc}
1a00062a:	bf00      	nop

1a00062c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
1a00062c:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a00062e:	b940      	cbnz	r0, 1a000642 <xQueueGenericReset+0x16>
1a000630:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000634:	f383 8811 	msr	BASEPRI, r3
1a000638:	f3bf 8f6f 	isb	sy
1a00063c:	f3bf 8f4f 	dsb	sy
1a000640:	e7fe      	b.n	1a000640 <xQueueGenericReset+0x14>
1a000642:	4604      	mov	r4, r0
1a000644:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
1a000646:	f001 fb03 	bl	1a001c50 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a00064a:	6821      	ldr	r1, [r4, #0]
1a00064c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00064e:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000650:	fb03 1002 	mla	r0, r3, r2, r1
1a000654:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000656:	2000      	movs	r0, #0
1a000658:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a00065a:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a00065c:	3a01      	subs	r2, #1
1a00065e:	fb02 1303 	mla	r3, r2, r3, r1
1a000662:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000664:	23ff      	movs	r3, #255	; 0xff
1a000666:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a00066a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
1a00066e:	b97d      	cbnz	r5, 1a000690 <xQueueGenericReset+0x64>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000670:	6923      	ldr	r3, [r4, #16]
1a000672:	b1ab      	cbz	r3, 1a0006a0 <xQueueGenericReset+0x74>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000674:	f104 0010 	add.w	r0, r4, #16
1a000678:	f000 ff2c 	bl	1a0014d4 <xTaskRemoveFromEventList>
1a00067c:	b180      	cbz	r0, 1a0006a0 <xQueueGenericReset+0x74>
				{
					queueYIELD_IF_USING_PREEMPTION();
1a00067e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000682:	4b09      	ldr	r3, [pc, #36]	; (1a0006a8 <xQueueGenericReset+0x7c>)
1a000684:	601a      	str	r2, [r3, #0]
1a000686:	f3bf 8f4f 	dsb	sy
1a00068a:	f3bf 8f6f 	isb	sy
1a00068e:	e007      	b.n	1a0006a0 <xQueueGenericReset+0x74>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000690:	f104 0010 	add.w	r0, r4, #16
1a000694:	f000 fa92 	bl	1a000bbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000698:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00069c:	f000 fa8e 	bl	1a000bbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
1a0006a0:	f001 faf8 	bl	1a001c94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
1a0006a4:	2001      	movs	r0, #1
1a0006a6:	bd38      	pop	{r3, r4, r5, pc}
1a0006a8:	e000ed04 	.word	0xe000ed04

1a0006ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
1a0006ac:	b538      	push	{r3, r4, r5, lr}
1a0006ae:	461d      	mov	r5, r3
1a0006b0:	9c04      	ldr	r4, [sp, #16]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
1a0006b2:	460b      	mov	r3, r1
1a0006b4:	b909      	cbnz	r1, 1a0006ba <prvInitialiseNewQueue+0xe>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a0006b6:	6024      	str	r4, [r4, #0]
1a0006b8:	e000      	b.n	1a0006bc <prvInitialiseNewQueue+0x10>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a0006ba:	6022      	str	r2, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
1a0006bc:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0006be:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a0006c0:	4620      	mov	r0, r4
1a0006c2:	2101      	movs	r1, #1
1a0006c4:	f7ff ffb2 	bl	1a00062c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
1a0006c8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
1a0006cc:	bd38      	pop	{r3, r4, r5, pc}
1a0006ce:	bf00      	nop

1a0006d0 <xQueueGenericCreateStatic>:

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0006d0:	b940      	cbnz	r0, 1a0006e4 <xQueueGenericCreateStatic+0x14>
1a0006d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006d6:	f383 8811 	msr	BASEPRI, r3
1a0006da:	f3bf 8f6f 	isb	sy
1a0006de:	f3bf 8f4f 	dsb	sy
1a0006e2:	e7fe      	b.n	1a0006e2 <xQueueGenericCreateStatic+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
1a0006e4:	b510      	push	{r4, lr}
1a0006e6:	b084      	sub	sp, #16
1a0006e8:	4604      	mov	r4, r0

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
1a0006ea:	b943      	cbnz	r3, 1a0006fe <xQueueGenericCreateStatic+0x2e>
1a0006ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006f0:	f383 8811 	msr	BASEPRI, r3
1a0006f4:	f3bf 8f6f 	isb	sy
1a0006f8:	f3bf 8f4f 	dsb	sy
1a0006fc:	e7fe      	b.n	1a0006fc <xQueueGenericCreateStatic+0x2c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a0006fe:	b112      	cbz	r2, 1a000706 <xQueueGenericCreateStatic+0x36>
1a000700:	b119      	cbz	r1, 1a00070a <xQueueGenericCreateStatic+0x3a>
1a000702:	2001      	movs	r0, #1
1a000704:	e002      	b.n	1a00070c <xQueueGenericCreateStatic+0x3c>
1a000706:	2001      	movs	r0, #1
1a000708:	e000      	b.n	1a00070c <xQueueGenericCreateStatic+0x3c>
1a00070a:	2000      	movs	r0, #0
1a00070c:	b940      	cbnz	r0, 1a000720 <xQueueGenericCreateStatic+0x50>
1a00070e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000712:	f383 8811 	msr	BASEPRI, r3
1a000716:	f3bf 8f6f 	isb	sy
1a00071a:	f3bf 8f4f 	dsb	sy
1a00071e:	e7fe      	b.n	1a00071e <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000720:	b912      	cbnz	r2, 1a000728 <xQueueGenericCreateStatic+0x58>
1a000722:	b919      	cbnz	r1, 1a00072c <xQueueGenericCreateStatic+0x5c>
1a000724:	2001      	movs	r0, #1
1a000726:	e002      	b.n	1a00072e <xQueueGenericCreateStatic+0x5e>
1a000728:	2001      	movs	r0, #1
1a00072a:	e000      	b.n	1a00072e <xQueueGenericCreateStatic+0x5e>
1a00072c:	2000      	movs	r0, #0
1a00072e:	b940      	cbnz	r0, 1a000742 <xQueueGenericCreateStatic+0x72>
1a000730:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000734:	f383 8811 	msr	BASEPRI, r3
1a000738:	f3bf 8f6f 	isb	sy
1a00073c:	f3bf 8f4f 	dsb	sy
1a000740:	e7fe      	b.n	1a000740 <xQueueGenericCreateStatic+0x70>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000742:	2050      	movs	r0, #80	; 0x50
1a000744:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000746:	9803      	ldr	r0, [sp, #12]
1a000748:	2850      	cmp	r0, #80	; 0x50
1a00074a:	d008      	beq.n	1a00075e <xQueueGenericCreateStatic+0x8e>
1a00074c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000750:	f383 8811 	msr	BASEPRI, r3
1a000754:	f3bf 8f6f 	isb	sy
1a000758:	f3bf 8f4f 	dsb	sy
1a00075c:	e7fe      	b.n	1a00075c <xQueueGenericCreateStatic+0x8c>
1a00075e:	4620      	mov	r0, r4
1a000760:	461c      	mov	r4, r3
		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewQueue != NULL )
1a000762:	b13b      	cbz	r3, 1a000774 <xQueueGenericCreateStatic+0xa4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000764:	2301      	movs	r3, #1
1a000766:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a00076a:	9400      	str	r4, [sp, #0]
1a00076c:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000770:	f7ff ff9c 	bl	1a0006ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
1a000774:	4620      	mov	r0, r4
1a000776:	b004      	add	sp, #16
1a000778:	bd10      	pop	{r4, pc}
1a00077a:	bf00      	nop

1a00077c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
1a00077c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00077e:	b085      	sub	sp, #20
1a000780:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a000782:	b940      	cbnz	r0, 1a000796 <xQueueGenericSend+0x1a>
1a000784:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000788:	f383 8811 	msr	BASEPRI, r3
1a00078c:	f3bf 8f6f 	isb	sy
1a000790:	f3bf 8f4f 	dsb	sy
1a000794:	e7fe      	b.n	1a000794 <xQueueGenericSend+0x18>
1a000796:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000798:	b919      	cbnz	r1, 1a0007a2 <xQueueGenericSend+0x26>
1a00079a:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00079c:	b91a      	cbnz	r2, 1a0007a6 <xQueueGenericSend+0x2a>
1a00079e:	2201      	movs	r2, #1
1a0007a0:	e002      	b.n	1a0007a8 <xQueueGenericSend+0x2c>
1a0007a2:	2201      	movs	r2, #1
1a0007a4:	e000      	b.n	1a0007a8 <xQueueGenericSend+0x2c>
1a0007a6:	2200      	movs	r2, #0
1a0007a8:	b942      	cbnz	r2, 1a0007bc <xQueueGenericSend+0x40>
1a0007aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0007ae:	f383 8811 	msr	BASEPRI, r3
1a0007b2:	f3bf 8f6f 	isb	sy
1a0007b6:	f3bf 8f4f 	dsb	sy
1a0007ba:	e7fe      	b.n	1a0007ba <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0007bc:	2b02      	cmp	r3, #2
1a0007be:	d103      	bne.n	1a0007c8 <xQueueGenericSend+0x4c>
1a0007c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0007c2:	2a01      	cmp	r2, #1
1a0007c4:	d102      	bne.n	1a0007cc <xQueueGenericSend+0x50>
1a0007c6:	e002      	b.n	1a0007ce <xQueueGenericSend+0x52>
1a0007c8:	2201      	movs	r2, #1
1a0007ca:	e000      	b.n	1a0007ce <xQueueGenericSend+0x52>
1a0007cc:	2200      	movs	r2, #0
1a0007ce:	b942      	cbnz	r2, 1a0007e2 <xQueueGenericSend+0x66>
1a0007d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0007d4:	f383 8811 	msr	BASEPRI, r3
1a0007d8:	f3bf 8f6f 	isb	sy
1a0007dc:	f3bf 8f4f 	dsb	sy
1a0007e0:	e7fe      	b.n	1a0007e0 <xQueueGenericSend+0x64>
1a0007e2:	461d      	mov	r5, r3
1a0007e4:	460e      	mov	r6, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0007e6:	f000 ff0d 	bl	1a001604 <xTaskGetSchedulerState>
1a0007ea:	b918      	cbnz	r0, 1a0007f4 <xQueueGenericSend+0x78>
1a0007ec:	9b01      	ldr	r3, [sp, #4]
1a0007ee:	b91b      	cbnz	r3, 1a0007f8 <xQueueGenericSend+0x7c>
1a0007f0:	2301      	movs	r3, #1
1a0007f2:	e002      	b.n	1a0007fa <xQueueGenericSend+0x7e>
1a0007f4:	2301      	movs	r3, #1
1a0007f6:	e000      	b.n	1a0007fa <xQueueGenericSend+0x7e>
1a0007f8:	2300      	movs	r3, #0
1a0007fa:	b943      	cbnz	r3, 1a00080e <xQueueGenericSend+0x92>
1a0007fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000800:	f383 8811 	msr	BASEPRI, r3
1a000804:	f3bf 8f6f 	isb	sy
1a000808:	f3bf 8f4f 	dsb	sy
1a00080c:	e7fe      	b.n	1a00080c <xQueueGenericSend+0x90>
1a00080e:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
1a000810:	f001 fa1e 	bl	1a001c50 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000814:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000816:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000818:	429a      	cmp	r2, r3
1a00081a:	d301      	bcc.n	1a000820 <xQueueGenericSend+0xa4>
1a00081c:	2d02      	cmp	r5, #2
1a00081e:	d121      	bne.n	1a000864 <xQueueGenericSend+0xe8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000820:	4620      	mov	r0, r4
1a000822:	4631      	mov	r1, r6
1a000824:	462a      	mov	r2, r5
1a000826:	f7ff fe7d 	bl	1a000524 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00082a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00082c:	b16b      	cbz	r3, 1a00084a <xQueueGenericSend+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00082e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000832:	f000 fe4f 	bl	1a0014d4 <xTaskRemoveFromEventList>
1a000836:	b188      	cbz	r0, 1a00085c <xQueueGenericSend+0xe0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
1a000838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00083c:	4b32      	ldr	r3, [pc, #200]	; (1a000908 <xQueueGenericSend+0x18c>)
1a00083e:	601a      	str	r2, [r3, #0]
1a000840:	f3bf 8f4f 	dsb	sy
1a000844:	f3bf 8f6f 	isb	sy
1a000848:	e008      	b.n	1a00085c <xQueueGenericSend+0xe0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
1a00084a:	b138      	cbz	r0, 1a00085c <xQueueGenericSend+0xe0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
1a00084c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000850:	4b2d      	ldr	r3, [pc, #180]	; (1a000908 <xQueueGenericSend+0x18c>)
1a000852:	601a      	str	r2, [r3, #0]
1a000854:	f3bf 8f4f 	dsb	sy
1a000858:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
1a00085c:	f001 fa1a 	bl	1a001c94 <vPortExitCritical>
				return pdPASS;
1a000860:	2001      	movs	r0, #1
1a000862:	e04e      	b.n	1a000902 <xQueueGenericSend+0x186>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a000864:	9b01      	ldr	r3, [sp, #4]
1a000866:	b91b      	cbnz	r3, 1a000870 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
1a000868:	f001 fa14 	bl	1a001c94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
1a00086c:	2000      	movs	r0, #0
1a00086e:	e048      	b.n	1a000902 <xQueueGenericSend+0x186>
				}
				else if( xEntryTimeSet == pdFALSE )
1a000870:	b91f      	cbnz	r7, 1a00087a <xQueueGenericSend+0xfe>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000872:	a802      	add	r0, sp, #8
1a000874:	f000 fe74 	bl	1a001560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000878:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a00087a:	f001 fa0b 	bl	1a001c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
1a00087e:	f000 fc4f 	bl	1a001120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000882:	f001 f9e5 	bl	1a001c50 <vPortEnterCritical>
1a000886:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00088a:	b25b      	sxtb	r3, r3
1a00088c:	f1b3 3fff 	cmp.w	r3, #4294967295
1a000890:	d102      	bne.n	1a000898 <xQueueGenericSend+0x11c>
1a000892:	2300      	movs	r3, #0
1a000894:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000898:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00089c:	b25b      	sxtb	r3, r3
1a00089e:	f1b3 3fff 	cmp.w	r3, #4294967295
1a0008a2:	d102      	bne.n	1a0008aa <xQueueGenericSend+0x12e>
1a0008a4:	2300      	movs	r3, #0
1a0008a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0008aa:	f001 f9f3 	bl	1a001c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0008ae:	a802      	add	r0, sp, #8
1a0008b0:	a901      	add	r1, sp, #4
1a0008b2:	f000 fe61 	bl	1a001578 <xTaskCheckForTimeOut>
1a0008b6:	b9f0      	cbnz	r0, 1a0008f6 <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a0008b8:	4620      	mov	r0, r4
1a0008ba:	f7ff fe15 	bl	1a0004e8 <prvIsQueueFull>
1a0008be:	b1a0      	cbz	r0, 1a0008ea <xQueueGenericSend+0x16e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a0008c0:	f104 0010 	add.w	r0, r4, #16
1a0008c4:	9901      	ldr	r1, [sp, #4]
1a0008c6:	f000 fdd1 	bl	1a00146c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
1a0008ca:	4620      	mov	r0, r4
1a0008cc:	f7ff fe78 	bl	1a0005c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
1a0008d0:	f000 fcc6 	bl	1a001260 <xTaskResumeAll>
1a0008d4:	2800      	cmp	r0, #0
1a0008d6:	d19b      	bne.n	1a000810 <xQueueGenericSend+0x94>
				{
					portYIELD_WITHIN_API();
1a0008d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0008dc:	4b0a      	ldr	r3, [pc, #40]	; (1a000908 <xQueueGenericSend+0x18c>)
1a0008de:	601a      	str	r2, [r3, #0]
1a0008e0:	f3bf 8f4f 	dsb	sy
1a0008e4:	f3bf 8f6f 	isb	sy
1a0008e8:	e792      	b.n	1a000810 <xQueueGenericSend+0x94>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
1a0008ea:	4620      	mov	r0, r4
1a0008ec:	f7ff fe68 	bl	1a0005c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0008f0:	f000 fcb6 	bl	1a001260 <xTaskResumeAll>
1a0008f4:	e78c      	b.n	1a000810 <xQueueGenericSend+0x94>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
1a0008f6:	4620      	mov	r0, r4
1a0008f8:	f7ff fe62 	bl	1a0005c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0008fc:	f000 fcb0 	bl	1a001260 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
1a000900:	2000      	movs	r0, #0
		}
	}
}
1a000902:	b005      	add	sp, #20
1a000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000906:	bf00      	nop
1a000908:	e000ed04 	.word	0xe000ed04

1a00090c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
1a00090c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a000910:	b940      	cbnz	r0, 1a000924 <xQueueGenericSendFromISR+0x18>
1a000912:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000916:	f383 8811 	msr	BASEPRI, r3
1a00091a:	f3bf 8f6f 	isb	sy
1a00091e:	f3bf 8f4f 	dsb	sy
1a000922:	e7fe      	b.n	1a000922 <xQueueGenericSendFromISR+0x16>
1a000924:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000926:	b919      	cbnz	r1, 1a000930 <xQueueGenericSendFromISR+0x24>
1a000928:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a00092a:	b918      	cbnz	r0, 1a000934 <xQueueGenericSendFromISR+0x28>
1a00092c:	2001      	movs	r0, #1
1a00092e:	e002      	b.n	1a000936 <xQueueGenericSendFromISR+0x2a>
1a000930:	2001      	movs	r0, #1
1a000932:	e000      	b.n	1a000936 <xQueueGenericSendFromISR+0x2a>
1a000934:	2000      	movs	r0, #0
1a000936:	b940      	cbnz	r0, 1a00094a <xQueueGenericSendFromISR+0x3e>
1a000938:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00093c:	f383 8811 	msr	BASEPRI, r3
1a000940:	f3bf 8f6f 	isb	sy
1a000944:	f3bf 8f4f 	dsb	sy
1a000948:	e7fe      	b.n	1a000948 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a00094a:	2b02      	cmp	r3, #2
1a00094c:	d103      	bne.n	1a000956 <xQueueGenericSendFromISR+0x4a>
1a00094e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000950:	2801      	cmp	r0, #1
1a000952:	d102      	bne.n	1a00095a <xQueueGenericSendFromISR+0x4e>
1a000954:	e002      	b.n	1a00095c <xQueueGenericSendFromISR+0x50>
1a000956:	2001      	movs	r0, #1
1a000958:	e000      	b.n	1a00095c <xQueueGenericSendFromISR+0x50>
1a00095a:	2000      	movs	r0, #0
1a00095c:	b940      	cbnz	r0, 1a000970 <xQueueGenericSendFromISR+0x64>
1a00095e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000962:	f383 8811 	msr	BASEPRI, r3
1a000966:	f3bf 8f6f 	isb	sy
1a00096a:	f3bf 8f4f 	dsb	sy
1a00096e:	e7fe      	b.n	1a00096e <xQueueGenericSendFromISR+0x62>
1a000970:	461f      	mov	r7, r3
1a000972:	4690      	mov	r8, r2
1a000974:	4689      	mov	r9, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000976:	f001 faa1 	bl	1a001ebc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a00097a:	f3ef 8611 	mrs	r6, BASEPRI
1a00097e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000982:	f383 8811 	msr	BASEPRI, r3
1a000986:	f3bf 8f6f 	isb	sy
1a00098a:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a00098e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000990:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000992:	429a      	cmp	r2, r3
1a000994:	d301      	bcc.n	1a00099a <xQueueGenericSendFromISR+0x8e>
1a000996:	2f02      	cmp	r7, #2
1a000998:	d11f      	bne.n	1a0009da <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
1a00099a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a00099e:	b2ed      	uxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0009a0:	4620      	mov	r0, r4
1a0009a2:	4649      	mov	r1, r9
1a0009a4:	463a      	mov	r2, r7
1a0009a6:	f7ff fdbd 	bl	1a000524 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
1a0009aa:	b26b      	sxtb	r3, r5
1a0009ac:	f1b3 3fff 	cmp.w	r3, #4294967295
1a0009b0:	d10d      	bne.n	1a0009ce <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0009b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0009b4:	b19b      	cbz	r3, 1a0009de <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0009b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0009ba:	f000 fd8b 	bl	1a0014d4 <xTaskRemoveFromEventList>
1a0009be:	b180      	cbz	r0, 1a0009e2 <xQueueGenericSendFromISR+0xd6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
1a0009c0:	f1b8 0f00 	cmp.w	r8, #0
1a0009c4:	d00f      	beq.n	1a0009e6 <xQueueGenericSendFromISR+0xda>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
1a0009c6:	2001      	movs	r0, #1
1a0009c8:	f8c8 0000 	str.w	r0, [r8]
1a0009cc:	e00c      	b.n	1a0009e8 <xQueueGenericSendFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a0009ce:	1c6b      	adds	r3, r5, #1
1a0009d0:	b2db      	uxtb	r3, r3
1a0009d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
1a0009d6:	2001      	movs	r0, #1
1a0009d8:	e006      	b.n	1a0009e8 <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
1a0009da:	2000      	movs	r0, #0
1a0009dc:	e004      	b.n	1a0009e8 <xQueueGenericSendFromISR+0xdc>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
1a0009de:	2001      	movs	r0, #1
1a0009e0:	e002      	b.n	1a0009e8 <xQueueGenericSendFromISR+0xdc>
1a0009e2:	2001      	movs	r0, #1
1a0009e4:	e000      	b.n	1a0009e8 <xQueueGenericSendFromISR+0xdc>
1a0009e6:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0009e8:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
1a0009ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a0009f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
1a0009f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0009f2:	b085      	sub	sp, #20
1a0009f4:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
1a0009f6:	b940      	cbnz	r0, 1a000a0a <xQueueReceive+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0009f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009fc:	f383 8811 	msr	BASEPRI, r3
1a000a00:	f3bf 8f6f 	isb	sy
1a000a04:	f3bf 8f4f 	dsb	sy
1a000a08:	e7fe      	b.n	1a000a08 <xQueueReceive+0x18>
1a000a0a:	4604      	mov	r4, r0

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000a0c:	b919      	cbnz	r1, 1a000a16 <xQueueReceive+0x26>
1a000a0e:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000a10:	b91b      	cbnz	r3, 1a000a1a <xQueueReceive+0x2a>
1a000a12:	2301      	movs	r3, #1
1a000a14:	e002      	b.n	1a000a1c <xQueueReceive+0x2c>
1a000a16:	2301      	movs	r3, #1
1a000a18:	e000      	b.n	1a000a1c <xQueueReceive+0x2c>
1a000a1a:	2300      	movs	r3, #0
1a000a1c:	b943      	cbnz	r3, 1a000a30 <xQueueReceive+0x40>
1a000a1e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a22:	f383 8811 	msr	BASEPRI, r3
1a000a26:	f3bf 8f6f 	isb	sy
1a000a2a:	f3bf 8f4f 	dsb	sy
1a000a2e:	e7fe      	b.n	1a000a2e <xQueueReceive+0x3e>
1a000a30:	460e      	mov	r6, r1

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000a32:	f000 fde7 	bl	1a001604 <xTaskGetSchedulerState>
1a000a36:	b918      	cbnz	r0, 1a000a40 <xQueueReceive+0x50>
1a000a38:	9b01      	ldr	r3, [sp, #4]
1a000a3a:	b91b      	cbnz	r3, 1a000a44 <xQueueReceive+0x54>
1a000a3c:	2301      	movs	r3, #1
1a000a3e:	e002      	b.n	1a000a46 <xQueueReceive+0x56>
1a000a40:	2301      	movs	r3, #1
1a000a42:	e000      	b.n	1a000a46 <xQueueReceive+0x56>
1a000a44:	2300      	movs	r3, #0
1a000a46:	b943      	cbnz	r3, 1a000a5a <xQueueReceive+0x6a>
1a000a48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a4c:	f383 8811 	msr	BASEPRI, r3
1a000a50:	f3bf 8f6f 	isb	sy
1a000a54:	f3bf 8f4f 	dsb	sy
1a000a58:	e7fe      	b.n	1a000a58 <xQueueReceive+0x68>
1a000a5a:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
1a000a5c:	f001 f8f8 	bl	1a001c50 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000a60:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000a62:	b1c5      	cbz	r5, 1a000a96 <xQueueReceive+0xa6>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000a64:	4620      	mov	r0, r4
1a000a66:	4631      	mov	r1, r6
1a000a68:	f7ff fd98 	bl	1a00059c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000a6c:	3d01      	subs	r5, #1
1a000a6e:	63a5      	str	r5, [r4, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000a70:	6923      	ldr	r3, [r4, #16]
1a000a72:	b163      	cbz	r3, 1a000a8e <xQueueReceive+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000a74:	f104 0010 	add.w	r0, r4, #16
1a000a78:	f000 fd2c 	bl	1a0014d4 <xTaskRemoveFromEventList>
1a000a7c:	b138      	cbz	r0, 1a000a8e <xQueueReceive+0x9e>
					{
						queueYIELD_IF_USING_PREEMPTION();
1a000a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a82:	4b30      	ldr	r3, [pc, #192]	; (1a000b44 <xQueueReceive+0x154>)
1a000a84:	601a      	str	r2, [r3, #0]
1a000a86:	f3bf 8f4f 	dsb	sy
1a000a8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
1a000a8e:	f001 f901 	bl	1a001c94 <vPortExitCritical>
				return pdPASS;
1a000a92:	2001      	movs	r0, #1
1a000a94:	e053      	b.n	1a000b3e <xQueueReceive+0x14e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a000a96:	9b01      	ldr	r3, [sp, #4]
1a000a98:	b91b      	cbnz	r3, 1a000aa2 <xQueueReceive+0xb2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
1a000a9a:	f001 f8fb 	bl	1a001c94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
1a000a9e:	2000      	movs	r0, #0
1a000aa0:	e04d      	b.n	1a000b3e <xQueueReceive+0x14e>
				}
				else if( xEntryTimeSet == pdFALSE )
1a000aa2:	b91f      	cbnz	r7, 1a000aac <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000aa4:	a802      	add	r0, sp, #8
1a000aa6:	f000 fd5b 	bl	1a001560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000aaa:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a000aac:	f001 f8f2 	bl	1a001c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
1a000ab0:	f000 fb36 	bl	1a001120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000ab4:	f001 f8cc 	bl	1a001c50 <vPortEnterCritical>
1a000ab8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000abc:	b25b      	sxtb	r3, r3
1a000abe:	f1b3 3fff 	cmp.w	r3, #4294967295
1a000ac2:	d102      	bne.n	1a000aca <xQueueReceive+0xda>
1a000ac4:	2300      	movs	r3, #0
1a000ac6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000aca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000ace:	b25b      	sxtb	r3, r3
1a000ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
1a000ad4:	d102      	bne.n	1a000adc <xQueueReceive+0xec>
1a000ad6:	2300      	movs	r3, #0
1a000ad8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000adc:	f001 f8da 	bl	1a001c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000ae0:	a802      	add	r0, sp, #8
1a000ae2:	a901      	add	r1, sp, #4
1a000ae4:	f000 fd48 	bl	1a001578 <xTaskCheckForTimeOut>
1a000ae8:	b9f0      	cbnz	r0, 1a000b28 <xQueueReceive+0x138>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000aea:	4620      	mov	r0, r4
1a000aec:	f7ff fd0c 	bl	1a000508 <prvIsQueueEmpty>
1a000af0:	b1a0      	cbz	r0, 1a000b1c <xQueueReceive+0x12c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000af2:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000af6:	9901      	ldr	r1, [sp, #4]
1a000af8:	f000 fcb8 	bl	1a00146c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000afc:	4620      	mov	r0, r4
1a000afe:	f7ff fd5f 	bl	1a0005c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000b02:	f000 fbad 	bl	1a001260 <xTaskResumeAll>
1a000b06:	2800      	cmp	r0, #0
1a000b08:	d1a8      	bne.n	1a000a5c <xQueueReceive+0x6c>
				{
					portYIELD_WITHIN_API();
1a000b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b0e:	4b0d      	ldr	r3, [pc, #52]	; (1a000b44 <xQueueReceive+0x154>)
1a000b10:	601a      	str	r2, [r3, #0]
1a000b12:	f3bf 8f4f 	dsb	sy
1a000b16:	f3bf 8f6f 	isb	sy
1a000b1a:	e79f      	b.n	1a000a5c <xQueueReceive+0x6c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
1a000b1c:	4620      	mov	r0, r4
1a000b1e:	f7ff fd4f 	bl	1a0005c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000b22:	f000 fb9d 	bl	1a001260 <xTaskResumeAll>
1a000b26:	e799      	b.n	1a000a5c <xQueueReceive+0x6c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
1a000b28:	4620      	mov	r0, r4
1a000b2a:	f7ff fd49 	bl	1a0005c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000b2e:	f000 fb97 	bl	1a001260 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000b32:	4620      	mov	r0, r4
1a000b34:	f7ff fce8 	bl	1a000508 <prvIsQueueEmpty>
1a000b38:	2800      	cmp	r0, #0
1a000b3a:	d08f      	beq.n	1a000a5c <xQueueReceive+0x6c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
1a000b3c:	2000      	movs	r0, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
1a000b3e:	b005      	add	sp, #20
1a000b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000b42:	bf00      	nop
1a000b44:	e000ed04 	.word	0xe000ed04

1a000b48 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000b48:	2300      	movs	r3, #0
1a000b4a:	e00b      	b.n	1a000b64 <vQueueAddToRegistry+0x1c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a000b4c:	4a07      	ldr	r2, [pc, #28]	; (1a000b6c <vQueueAddToRegistry+0x24>)
1a000b4e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a000b52:	b932      	cbnz	r2, 1a000b62 <vQueueAddToRegistry+0x1a>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a000b54:	4a05      	ldr	r2, [pc, #20]	; (1a000b6c <vQueueAddToRegistry+0x24>)
1a000b56:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a000b5a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a000b5e:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a000b60:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000b62:	3301      	adds	r3, #1
1a000b64:	2b07      	cmp	r3, #7
1a000b66:	d9f1      	bls.n	1a000b4c <vQueueAddToRegistry+0x4>
1a000b68:	4770      	bx	lr
1a000b6a:	bf00      	nop
1a000b6c:	10002d28 	.word	0x10002d28

1a000b70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a000b70:	b570      	push	{r4, r5, r6, lr}
1a000b72:	4604      	mov	r4, r0
1a000b74:	460e      	mov	r6, r1
1a000b76:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a000b78:	f001 f86a 	bl	1a001c50 <vPortEnterCritical>
1a000b7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000b80:	b25b      	sxtb	r3, r3
1a000b82:	f1b3 3fff 	cmp.w	r3, #4294967295
1a000b86:	d102      	bne.n	1a000b8e <vQueueWaitForMessageRestricted+0x1e>
1a000b88:	2300      	movs	r3, #0
1a000b8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000b8e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000b92:	b25b      	sxtb	r3, r3
1a000b94:	f1b3 3fff 	cmp.w	r3, #4294967295
1a000b98:	d102      	bne.n	1a000ba0 <vQueueWaitForMessageRestricted+0x30>
1a000b9a:	2300      	movs	r3, #0
1a000b9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000ba0:	f001 f878 	bl	1a001c94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a000ba4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000ba6:	b92b      	cbnz	r3, 1a000bb4 <vQueueWaitForMessageRestricted+0x44>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a000ba8:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000bac:	4631      	mov	r1, r6
1a000bae:	462a      	mov	r2, r5
1a000bb0:	f000 fc74 	bl	1a00149c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a000bb4:	4620      	mov	r0, r4
1a000bb6:	f7ff fd03 	bl	1a0005c0 <prvUnlockQueue>
1a000bba:	bd70      	pop	{r4, r5, r6, pc}

1a000bbc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000bbc:	f100 0308 	add.w	r3, r0, #8
1a000bc0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a000bc2:	f04f 32ff 	mov.w	r2, #4294967295
1a000bc6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000bc8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000bca:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a000bcc:	2300      	movs	r3, #0
1a000bce:	6003      	str	r3, [r0, #0]
1a000bd0:	4770      	bx	lr
1a000bd2:	bf00      	nop

1a000bd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a000bd4:	2300      	movs	r3, #0
1a000bd6:	6103      	str	r3, [r0, #16]
1a000bd8:	4770      	bx	lr
1a000bda:	bf00      	nop

1a000bdc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a000bdc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a000bde:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a000be0:	689a      	ldr	r2, [r3, #8]
1a000be2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a000be4:	689a      	ldr	r2, [r3, #8]
1a000be6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a000be8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000bea:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000bec:	6803      	ldr	r3, [r0, #0]
1a000bee:	3301      	adds	r3, #1
1a000bf0:	6003      	str	r3, [r0, #0]
1a000bf2:	4770      	bx	lr

1a000bf4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a000bf4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a000bf6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a000bf8:	f1b5 3fff 	cmp.w	r5, #4294967295
1a000bfc:	d101      	bne.n	1a000c02 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
1a000bfe:	6902      	ldr	r2, [r0, #16]
1a000c00:	e007      	b.n	1a000c12 <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000c02:	f100 0208 	add.w	r2, r0, #8
1a000c06:	e000      	b.n	1a000c0a <vListInsert+0x16>
1a000c08:	461a      	mov	r2, r3
1a000c0a:	6853      	ldr	r3, [r2, #4]
1a000c0c:	681c      	ldr	r4, [r3, #0]
1a000c0e:	42ac      	cmp	r4, r5
1a000c10:	d9fa      	bls.n	1a000c08 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a000c12:	6853      	ldr	r3, [r2, #4]
1a000c14:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a000c16:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a000c18:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a000c1a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000c1c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000c1e:	6803      	ldr	r3, [r0, #0]
1a000c20:	3301      	adds	r3, #1
1a000c22:	6003      	str	r3, [r0, #0]
}
1a000c24:	bc30      	pop	{r4, r5}
1a000c26:	4770      	bx	lr

1a000c28 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a000c28:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a000c2a:	6842      	ldr	r2, [r0, #4]
1a000c2c:	6881      	ldr	r1, [r0, #8]
1a000c2e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a000c30:	6882      	ldr	r2, [r0, #8]
1a000c32:	6841      	ldr	r1, [r0, #4]
1a000c34:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a000c36:	685a      	ldr	r2, [r3, #4]
1a000c38:	4282      	cmp	r2, r0
1a000c3a:	d101      	bne.n	1a000c40 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a000c3c:	6882      	ldr	r2, [r0, #8]
1a000c3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a000c40:	2200      	movs	r2, #0
1a000c42:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a000c44:	681a      	ldr	r2, [r3, #0]
1a000c46:	3a01      	subs	r2, #1
1a000c48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a000c4a:	6818      	ldr	r0, [r3, #0]
}
1a000c4c:	4770      	bx	lr
1a000c4e:	bf00      	nop

1a000c50 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a000c50:	4b03      	ldr	r3, [pc, #12]	; (1a000c60 <vApplicationGetIdleTaskMemory+0x10>)
1a000c52:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a000c54:	4b03      	ldr	r3, [pc, #12]	; (1a000c64 <vApplicationGetIdleTaskMemory+0x14>)
1a000c56:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a000c58:	235a      	movs	r3, #90	; 0x5a
1a000c5a:	6013      	str	r3, [r2, #0]
1a000c5c:	4770      	bx	lr
1a000c5e:	bf00      	nop
1a000c60:	100023fc 	.word	0x100023fc
1a000c64:	10002294 	.word	0x10002294

1a000c68 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a000c68:	4b03      	ldr	r3, [pc, #12]	; (1a000c78 <vApplicationGetTimerTaskMemory+0x10>)
1a000c6a:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a000c6c:	4b03      	ldr	r3, [pc, #12]	; (1a000c7c <vApplicationGetTimerTaskMemory+0x14>)
1a000c6e:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a000c70:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a000c74:	6013      	str	r3, [r2, #0]
1a000c76:	4770      	bx	lr
1a000c78:	1000245c 	.word	0x1000245c
1a000c7c:	100024bc 	.word	0x100024bc

1a000c80 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
    while(1)
        ;
1a000c80:	e7fe      	b.n	1a000c80 <vApplicationStackOverflowHook>
1a000c82:	bf00      	nop

1a000c84 <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook( void )
{
    while(1)
        ;
1a000c84:	e7fe      	b.n	1a000c84 <vApplicationMallocFailedHook>
1a000c86:	bf00      	nop

1a000c88 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000c88:	4b0a      	ldr	r3, [pc, #40]	; (1a000cb4 <prvResetNextTaskUnblockTime+0x2c>)
1a000c8a:	681b      	ldr	r3, [r3, #0]
1a000c8c:	681b      	ldr	r3, [r3, #0]
1a000c8e:	b90b      	cbnz	r3, 1a000c94 <prvResetNextTaskUnblockTime+0xc>
1a000c90:	2301      	movs	r3, #1
1a000c92:	e000      	b.n	1a000c96 <prvResetNextTaskUnblockTime+0xe>
1a000c94:	2300      	movs	r3, #0
1a000c96:	b123      	cbz	r3, 1a000ca2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a000c98:	f04f 32ff 	mov.w	r2, #4294967295
1a000c9c:	4b06      	ldr	r3, [pc, #24]	; (1a000cb8 <prvResetNextTaskUnblockTime+0x30>)
1a000c9e:	601a      	str	r2, [r3, #0]
1a000ca0:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a000ca2:	4b04      	ldr	r3, [pc, #16]	; (1a000cb4 <prvResetNextTaskUnblockTime+0x2c>)
1a000ca4:	681b      	ldr	r3, [r3, #0]
1a000ca6:	68db      	ldr	r3, [r3, #12]
1a000ca8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a000caa:	685a      	ldr	r2, [r3, #4]
1a000cac:	4b02      	ldr	r3, [pc, #8]	; (1a000cb8 <prvResetNextTaskUnblockTime+0x30>)
1a000cae:	601a      	str	r2, [r3, #0]
1a000cb0:	4770      	bx	lr
1a000cb2:	bf00      	nop
1a000cb4:	10002a60 	.word	0x10002a60
1a000cb8:	10002b3c 	.word	0x10002b3c

1a000cbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
1a000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000cc0:	4682      	mov	sl, r0
1a000cc2:	460d      	mov	r5, r1
1a000cc4:	4617      	mov	r7, r2
1a000cc6:	4699      	mov	r9, r3
1a000cc8:	9e08      	ldr	r6, [sp, #32]
1a000cca:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a000cce:	9c0a      	ldr	r4, [sp, #40]	; 0x28

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a000cd0:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a000cd2:	21a5      	movs	r1, #165	; 0xa5
1a000cd4:	0092      	lsls	r2, r2, #2
1a000cd6:	f002 fe6c 	bl	1a0039b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a000cda:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a000cdc:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a000ce0:	3a01      	subs	r2, #1
1a000ce2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a000ce6:	f027 0707 	bic.w	r7, r7, #7

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a000cea:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000cec:	2300      	movs	r3, #0
1a000cee:	e006      	b.n	1a000cfe <prvInitialiseNewTask+0x42>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a000cf0:	5ce9      	ldrb	r1, [r5, r3]
1a000cf2:	18e2      	adds	r2, r4, r3
1a000cf4:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
1a000cf8:	5cea      	ldrb	r2, [r5, r3]
1a000cfa:	b112      	cbz	r2, 1a000d02 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000cfc:	3301      	adds	r3, #1
1a000cfe:	2b0f      	cmp	r3, #15
1a000d00:	d9f6      	bls.n	1a000cf0 <prvInitialiseNewTask+0x34>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a000d02:	2300      	movs	r3, #0
1a000d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a000d08:	2e06      	cmp	r6, #6
1a000d0a:	d900      	bls.n	1a000d0e <prvInitialiseNewTask+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a000d0c:	2606      	movs	r6, #6
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
1a000d0e:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
1a000d10:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a000d12:	2500      	movs	r5, #0
1a000d14:	6565      	str	r5, [r4, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a000d16:	1d20      	adds	r0, r4, #4
1a000d18:	f7ff ff5c 	bl	1a000bd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a000d1c:	f104 0018 	add.w	r0, r4, #24
1a000d20:	f7ff ff58 	bl	1a000bd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a000d24:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000d26:	f1c6 0607 	rsb	r6, r6, #7
1a000d2a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a000d2c:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
1a000d2e:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a000d30:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a000d34:	4638      	mov	r0, r7
1a000d36:	4651      	mov	r1, sl
1a000d38:	464a      	mov	r2, r9
1a000d3a:	f000 ff5b 	bl	1a001bf4 <pxPortInitialiseStack>
1a000d3e:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
1a000d40:	f1b8 0f00 	cmp.w	r8, #0
1a000d44:	d001      	beq.n	1a000d4a <prvInitialiseNewTask+0x8e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a000d46:	f8c8 4000 	str.w	r4, [r8]
1a000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000d4e:	bf00      	nop

1a000d50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
1a000d50:	b538      	push	{r3, r4, r5, lr}
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000d52:	2400      	movs	r4, #0
1a000d54:	e007      	b.n	1a000d66 <prvInitialiseTaskLists+0x16>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a000d56:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000d5a:	009b      	lsls	r3, r3, #2
1a000d5c:	480e      	ldr	r0, [pc, #56]	; (1a000d98 <prvInitialiseTaskLists+0x48>)
1a000d5e:	4418      	add	r0, r3
1a000d60:	f7ff ff2c 	bl	1a000bbc <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000d64:	3401      	adds	r4, #1
1a000d66:	2c06      	cmp	r4, #6
1a000d68:	d9f5      	bls.n	1a000d56 <prvInitialiseTaskLists+0x6>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
1a000d6a:	4d0c      	ldr	r5, [pc, #48]	; (1a000d9c <prvInitialiseTaskLists+0x4c>)
1a000d6c:	4628      	mov	r0, r5
1a000d6e:	f7ff ff25 	bl	1a000bbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a000d72:	4c0b      	ldr	r4, [pc, #44]	; (1a000da0 <prvInitialiseTaskLists+0x50>)
1a000d74:	4620      	mov	r0, r4
1a000d76:	f7ff ff21 	bl	1a000bbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a000d7a:	480a      	ldr	r0, [pc, #40]	; (1a000da4 <prvInitialiseTaskLists+0x54>)
1a000d7c:	f7ff ff1e 	bl	1a000bbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
1a000d80:	4809      	ldr	r0, [pc, #36]	; (1a000da8 <prvInitialiseTaskLists+0x58>)
1a000d82:	f7ff ff1b 	bl	1a000bbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
1a000d86:	4809      	ldr	r0, [pc, #36]	; (1a000dac <prvInitialiseTaskLists+0x5c>)
1a000d88:	f7ff ff18 	bl	1a000bbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
1a000d8c:	4b08      	ldr	r3, [pc, #32]	; (1a000db0 <prvInitialiseTaskLists+0x60>)
1a000d8e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a000d90:	4b08      	ldr	r3, [pc, #32]	; (1a000db4 <prvInitialiseTaskLists+0x64>)
1a000d92:	601c      	str	r4, [r3, #0]
1a000d94:	bd38      	pop	{r3, r4, r5, pc}
1a000d96:	bf00      	nop
1a000d98:	10002a84 	.word	0x10002a84
1a000d9c:	10002b44 	.word	0x10002b44
1a000da0:	10002b58 	.word	0x10002b58
1a000da4:	10002b20 	.word	0x10002b20
1a000da8:	10002a68 	.word	0x10002a68
1a000dac:	10002b6c 	.word	0x10002b6c
1a000db0:	10002a60 	.word	0x10002a60
1a000db4:	10002a7c 	.word	0x10002a7c

1a000db8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
1a000db8:	b510      	push	{r4, lr}
1a000dba:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
1a000dbc:	f000 ff48 	bl	1a001c50 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
1a000dc0:	4a20      	ldr	r2, [pc, #128]	; (1a000e44 <prvAddNewTaskToReadyList+0x8c>)
1a000dc2:	6813      	ldr	r3, [r2, #0]
1a000dc4:	3301      	adds	r3, #1
1a000dc6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a000dc8:	4b1f      	ldr	r3, [pc, #124]	; (1a000e48 <prvAddNewTaskToReadyList+0x90>)
1a000dca:	681b      	ldr	r3, [r3, #0]
1a000dcc:	b93b      	cbnz	r3, 1a000dde <prvAddNewTaskToReadyList+0x26>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
1a000dce:	4b1e      	ldr	r3, [pc, #120]	; (1a000e48 <prvAddNewTaskToReadyList+0x90>)
1a000dd0:	601c      	str	r4, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a000dd2:	6813      	ldr	r3, [r2, #0]
1a000dd4:	2b01      	cmp	r3, #1
1a000dd6:	d10d      	bne.n	1a000df4 <prvAddNewTaskToReadyList+0x3c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
1a000dd8:	f7ff ffba 	bl	1a000d50 <prvInitialiseTaskLists>
1a000ddc:	e00a      	b.n	1a000df4 <prvAddNewTaskToReadyList+0x3c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
1a000dde:	4b1b      	ldr	r3, [pc, #108]	; (1a000e4c <prvAddNewTaskToReadyList+0x94>)
1a000de0:	681b      	ldr	r3, [r3, #0]
1a000de2:	b93b      	cbnz	r3, 1a000df4 <prvAddNewTaskToReadyList+0x3c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a000de4:	4b18      	ldr	r3, [pc, #96]	; (1a000e48 <prvAddNewTaskToReadyList+0x90>)
1a000de6:	681b      	ldr	r3, [r3, #0]
1a000de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000dea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000dec:	429a      	cmp	r2, r3
1a000dee:	d801      	bhi.n	1a000df4 <prvAddNewTaskToReadyList+0x3c>
				{
					pxCurrentTCB = pxNewTCB;
1a000df0:	4b15      	ldr	r3, [pc, #84]	; (1a000e48 <prvAddNewTaskToReadyList+0x90>)
1a000df2:	601c      	str	r4, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
1a000df4:	4a16      	ldr	r2, [pc, #88]	; (1a000e50 <prvAddNewTaskToReadyList+0x98>)
1a000df6:	6813      	ldr	r3, [r2, #0]
1a000df8:	3301      	adds	r3, #1
1a000dfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a000dfc:	64a3      	str	r3, [r4, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
1a000dfe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a000e00:	2301      	movs	r3, #1
1a000e02:	4083      	lsls	r3, r0
1a000e04:	4913      	ldr	r1, [pc, #76]	; (1a000e54 <prvAddNewTaskToReadyList+0x9c>)
1a000e06:	680a      	ldr	r2, [r1, #0]
1a000e08:	4313      	orrs	r3, r2
1a000e0a:	600b      	str	r3, [r1, #0]
1a000e0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a000e10:	0080      	lsls	r0, r0, #2
1a000e12:	4b11      	ldr	r3, [pc, #68]	; (1a000e58 <prvAddNewTaskToReadyList+0xa0>)
1a000e14:	4418      	add	r0, r3
1a000e16:	1d21      	adds	r1, r4, #4
1a000e18:	f7ff fee0 	bl	1a000bdc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
1a000e1c:	f000 ff3a 	bl	1a001c94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
1a000e20:	4b0a      	ldr	r3, [pc, #40]	; (1a000e4c <prvAddNewTaskToReadyList+0x94>)
1a000e22:	681b      	ldr	r3, [r3, #0]
1a000e24:	b16b      	cbz	r3, 1a000e42 <prvAddNewTaskToReadyList+0x8a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a000e26:	4b08      	ldr	r3, [pc, #32]	; (1a000e48 <prvAddNewTaskToReadyList+0x90>)
1a000e28:	681b      	ldr	r3, [r3, #0]
1a000e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000e2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000e2e:	429a      	cmp	r2, r3
1a000e30:	d207      	bcs.n	1a000e42 <prvAddNewTaskToReadyList+0x8a>
		{
			taskYIELD_IF_USING_PREEMPTION();
1a000e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e36:	4b09      	ldr	r3, [pc, #36]	; (1a000e5c <prvAddNewTaskToReadyList+0xa4>)
1a000e38:	601a      	str	r2, [r3, #0]
1a000e3a:	f3bf 8f4f 	dsb	sy
1a000e3e:	f3bf 8f6f 	isb	sy
1a000e42:	bd10      	pop	{r4, pc}
1a000e44:	10002b18 	.word	0x10002b18
1a000e48:	10002b1c 	.word	0x10002b1c
1a000e4c:	10002a64 	.word	0x10002a64
1a000e50:	10002b40 	.word	0x10002b40
1a000e54:	10002b80 	.word	0x10002b80
1a000e58:	10002a84 	.word	0x10002a84
1a000e5c:	e000ed04 	.word	0xe000ed04

1a000e60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
1a000e60:	b510      	push	{r4, lr}
1a000e62:	4604      	mov	r4, r0
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a000e64:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a000e68:	b933      	cbnz	r3, 1a000e78 <prvDeleteTCB+0x18>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
1a000e6a:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a000e6c:	f7ff fb30 	bl	1a0004d0 <vPortFree>
				vPortFree( pxTCB );
1a000e70:	4620      	mov	r0, r4
1a000e72:	f7ff fb2d 	bl	1a0004d0 <vPortFree>
1a000e76:	bd10      	pop	{r4, pc}
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a000e78:	2b01      	cmp	r3, #1
1a000e7a:	d102      	bne.n	1a000e82 <prvDeleteTCB+0x22>
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
1a000e7c:	f7ff fb28 	bl	1a0004d0 <vPortFree>
1a000e80:	bd10      	pop	{r4, pc}
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a000e82:	2b02      	cmp	r3, #2
1a000e84:	d008      	beq.n	1a000e98 <prvDeleteTCB+0x38>
1a000e86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e8a:	f383 8811 	msr	BASEPRI, r3
1a000e8e:	f3bf 8f6f 	isb	sy
1a000e92:	f3bf 8f4f 	dsb	sy
1a000e96:	e7fe      	b.n	1a000e96 <prvDeleteTCB+0x36>
1a000e98:	bd10      	pop	{r4, pc}
1a000e9a:	bf00      	nop

1a000e9c <prvCheckTasksWaitingTermination>:
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
1a000e9c:	b510      	push	{r4, lr}
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a000e9e:	e014      	b.n	1a000eca <prvCheckTasksWaitingTermination+0x2e>
		{
			taskENTER_CRITICAL();
1a000ea0:	f000 fed6 	bl	1a001c50 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a000ea4:	4b0b      	ldr	r3, [pc, #44]	; (1a000ed4 <prvCheckTasksWaitingTermination+0x38>)
1a000ea6:	68db      	ldr	r3, [r3, #12]
1a000ea8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a000eaa:	1d20      	adds	r0, r4, #4
1a000eac:	f7ff febc 	bl	1a000c28 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a000eb0:	4a09      	ldr	r2, [pc, #36]	; (1a000ed8 <prvCheckTasksWaitingTermination+0x3c>)
1a000eb2:	6813      	ldr	r3, [r2, #0]
1a000eb4:	3b01      	subs	r3, #1
1a000eb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a000eb8:	4a08      	ldr	r2, [pc, #32]	; (1a000edc <prvCheckTasksWaitingTermination+0x40>)
1a000eba:	6813      	ldr	r3, [r2, #0]
1a000ebc:	3b01      	subs	r3, #1
1a000ebe:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
1a000ec0:	f000 fee8 	bl	1a001c94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
1a000ec4:	4620      	mov	r0, r4
1a000ec6:	f7ff ffcb 	bl	1a000e60 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a000eca:	4b04      	ldr	r3, [pc, #16]	; (1a000edc <prvCheckTasksWaitingTermination+0x40>)
1a000ecc:	681b      	ldr	r3, [r3, #0]
1a000ece:	2b00      	cmp	r3, #0
1a000ed0:	d1e6      	bne.n	1a000ea0 <prvCheckTasksWaitingTermination+0x4>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
1a000ed2:	bd10      	pop	{r4, pc}
1a000ed4:	10002a68 	.word	0x10002a68
1a000ed8:	10002b18 	.word	0x10002b18
1a000edc:	10002b14 	.word	0x10002b14

1a000ee0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
1a000ee0:	b508      	push	{r3, lr}

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
1a000ee2:	f7ff ffdb 	bl	1a000e9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a000ee6:	4b06      	ldr	r3, [pc, #24]	; (1a000f00 <prvIdleTask+0x20>)
1a000ee8:	681b      	ldr	r3, [r3, #0]
1a000eea:	2b01      	cmp	r3, #1
1a000eec:	d9f9      	bls.n	1a000ee2 <prvIdleTask+0x2>
			{
				taskYIELD();
1a000eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000ef2:	4b04      	ldr	r3, [pc, #16]	; (1a000f04 <prvIdleTask+0x24>)
1a000ef4:	601a      	str	r2, [r3, #0]
1a000ef6:	f3bf 8f4f 	dsb	sy
1a000efa:	f3bf 8f6f 	isb	sy
1a000efe:	e7f0      	b.n	1a000ee2 <prvIdleTask+0x2>
1a000f00:	10002a84 	.word	0x10002a84
1a000f04:	e000ed04 	.word	0xe000ed04

1a000f08 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a000f08:	b570      	push	{r4, r5, r6, lr}
1a000f0a:	4604      	mov	r4, r0
1a000f0c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a000f0e:	4b1c      	ldr	r3, [pc, #112]	; (1a000f80 <prvAddCurrentTaskToDelayedList+0x78>)
1a000f10:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a000f12:	4b1c      	ldr	r3, [pc, #112]	; (1a000f84 <prvAddCurrentTaskToDelayedList+0x7c>)
1a000f14:	6818      	ldr	r0, [r3, #0]
1a000f16:	3004      	adds	r0, #4
1a000f18:	f7ff fe86 	bl	1a000c28 <uxListRemove>
1a000f1c:	b948      	cbnz	r0, 1a000f32 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a000f1e:	4b19      	ldr	r3, [pc, #100]	; (1a000f84 <prvAddCurrentTaskToDelayedList+0x7c>)
1a000f20:	681b      	ldr	r3, [r3, #0]
1a000f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000f24:	2301      	movs	r3, #1
1a000f26:	4093      	lsls	r3, r2
1a000f28:	4917      	ldr	r1, [pc, #92]	; (1a000f88 <prvAddCurrentTaskToDelayedList+0x80>)
1a000f2a:	680a      	ldr	r2, [r1, #0]
1a000f2c:	ea22 0303 	bic.w	r3, r2, r3
1a000f30:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a000f32:	f1b4 3fff 	cmp.w	r4, #4294967295
1a000f36:	d107      	bne.n	1a000f48 <prvAddCurrentTaskToDelayedList+0x40>
1a000f38:	b136      	cbz	r6, 1a000f48 <prvAddCurrentTaskToDelayedList+0x40>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000f3a:	4b12      	ldr	r3, [pc, #72]	; (1a000f84 <prvAddCurrentTaskToDelayedList+0x7c>)
1a000f3c:	6819      	ldr	r1, [r3, #0]
1a000f3e:	4813      	ldr	r0, [pc, #76]	; (1a000f8c <prvAddCurrentTaskToDelayedList+0x84>)
1a000f40:	3104      	adds	r1, #4
1a000f42:	f7ff fe4b 	bl	1a000bdc <vListInsertEnd>
1a000f46:	bd70      	pop	{r4, r5, r6, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a000f48:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a000f4a:	4b0e      	ldr	r3, [pc, #56]	; (1a000f84 <prvAddCurrentTaskToDelayedList+0x7c>)
1a000f4c:	681b      	ldr	r3, [r3, #0]
1a000f4e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a000f50:	42ac      	cmp	r4, r5
1a000f52:	d207      	bcs.n	1a000f64 <prvAddCurrentTaskToDelayedList+0x5c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000f54:	4b0e      	ldr	r3, [pc, #56]	; (1a000f90 <prvAddCurrentTaskToDelayedList+0x88>)
1a000f56:	6818      	ldr	r0, [r3, #0]
1a000f58:	4b0a      	ldr	r3, [pc, #40]	; (1a000f84 <prvAddCurrentTaskToDelayedList+0x7c>)
1a000f5a:	6819      	ldr	r1, [r3, #0]
1a000f5c:	3104      	adds	r1, #4
1a000f5e:	f7ff fe49 	bl	1a000bf4 <vListInsert>
1a000f62:	bd70      	pop	{r4, r5, r6, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a000f64:	4b0b      	ldr	r3, [pc, #44]	; (1a000f94 <prvAddCurrentTaskToDelayedList+0x8c>)
1a000f66:	6818      	ldr	r0, [r3, #0]
1a000f68:	4b06      	ldr	r3, [pc, #24]	; (1a000f84 <prvAddCurrentTaskToDelayedList+0x7c>)
1a000f6a:	6819      	ldr	r1, [r3, #0]
1a000f6c:	3104      	adds	r1, #4
1a000f6e:	f7ff fe41 	bl	1a000bf4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a000f72:	4b09      	ldr	r3, [pc, #36]	; (1a000f98 <prvAddCurrentTaskToDelayedList+0x90>)
1a000f74:	681b      	ldr	r3, [r3, #0]
1a000f76:	429c      	cmp	r4, r3
1a000f78:	d201      	bcs.n	1a000f7e <prvAddCurrentTaskToDelayedList+0x76>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a000f7a:	4b07      	ldr	r3, [pc, #28]	; (1a000f98 <prvAddCurrentTaskToDelayedList+0x90>)
1a000f7c:	601c      	str	r4, [r3, #0]
1a000f7e:	bd70      	pop	{r4, r5, r6, pc}
1a000f80:	10002b38 	.word	0x10002b38
1a000f84:	10002b1c 	.word	0x10002b1c
1a000f88:	10002b80 	.word	0x10002b80
1a000f8c:	10002b6c 	.word	0x10002b6c
1a000f90:	10002a7c 	.word	0x10002a7c
1a000f94:	10002a60 	.word	0x10002a60
1a000f98:	10002b3c 	.word	0x10002b3c

1a000f9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
1a000f9c:	b570      	push	{r4, r5, r6, lr}
1a000f9e:	b086      	sub	sp, #24
1a000fa0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a000fa2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
1a000fa4:	b945      	cbnz	r5, 1a000fb8 <xTaskCreateStatic+0x1c>
1a000fa6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000faa:	f383 8811 	msr	BASEPRI, r3
1a000fae:	f3bf 8f6f 	isb	sy
1a000fb2:	f3bf 8f4f 	dsb	sy
1a000fb6:	e7fe      	b.n	1a000fb6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a000fb8:	b944      	cbnz	r4, 1a000fcc <xTaskCreateStatic+0x30>
1a000fba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fbe:	f383 8811 	msr	BASEPRI, r3
1a000fc2:	f3bf 8f6f 	isb	sy
1a000fc6:	f3bf 8f4f 	dsb	sy
1a000fca:	e7fe      	b.n	1a000fca <xTaskCreateStatic+0x2e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
1a000fcc:	2660      	movs	r6, #96	; 0x60
1a000fce:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a000fd0:	9e04      	ldr	r6, [sp, #16]
1a000fd2:	2e60      	cmp	r6, #96	; 0x60
1a000fd4:	d008      	beq.n	1a000fe8 <xTaskCreateStatic+0x4c>
1a000fd6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fda:	f383 8811 	msr	BASEPRI, r3
1a000fde:	f3bf 8f6f 	isb	sy
1a000fe2:	f3bf 8f4f 	dsb	sy
1a000fe6:	e7fe      	b.n	1a000fe6 <xTaskCreateStatic+0x4a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
1a000fe8:	b18c      	cbz	r4, 1a00100e <xTaskCreateStatic+0x72>
1a000fea:	b185      	cbz	r5, 1a00100e <xTaskCreateStatic+0x72>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a000fec:	6325      	str	r5, [r4, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a000fee:	2502      	movs	r5, #2
1a000ff0:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a000ff4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a000ff6:	9500      	str	r5, [sp, #0]
1a000ff8:	ad05      	add	r5, sp, #20
1a000ffa:	9501      	str	r5, [sp, #4]
1a000ffc:	9402      	str	r4, [sp, #8]
1a000ffe:	2500      	movs	r5, #0
1a001000:	9503      	str	r5, [sp, #12]
1a001002:	f7ff fe5b 	bl	1a000cbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001006:	4620      	mov	r0, r4
1a001008:	f7ff fed6 	bl	1a000db8 <prvAddNewTaskToReadyList>
1a00100c:	e001      	b.n	1a001012 <xTaskCreateStatic+0x76>
		}
		else
		{
			xReturn = NULL;
1a00100e:	2300      	movs	r3, #0
1a001010:	9305      	str	r3, [sp, #20]
		}

		return xReturn;
	}
1a001012:	9805      	ldr	r0, [sp, #20]
1a001014:	b006      	add	sp, #24
1a001016:	bd70      	pop	{r4, r5, r6, pc}

1a001018 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
1a001018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00101c:	b085      	sub	sp, #20
1a00101e:	4680      	mov	r8, r0
1a001020:	460f      	mov	r7, r1
1a001022:	4615      	mov	r5, r2
1a001024:	461e      	mov	r6, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001026:	0090      	lsls	r0, r2, #2
1a001028:	f7ff fa20 	bl	1a00046c <pvPortMalloc>

			if( pxStack != NULL )
1a00102c:	b160      	cbz	r0, 1a001048 <xTaskCreate+0x30>
1a00102e:	4681      	mov	r9, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001030:	2060      	movs	r0, #96	; 0x60
1a001032:	f7ff fa1b 	bl	1a00046c <pvPortMalloc>

				if( pxNewTCB != NULL )
1a001036:	4604      	mov	r4, r0
1a001038:	b110      	cbz	r0, 1a001040 <xTaskCreate+0x28>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
1a00103a:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
1a00103e:	e004      	b.n	1a00104a <xTaskCreate+0x32>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
1a001040:	4648      	mov	r0, r9
1a001042:	f7ff fa45 	bl	1a0004d0 <vPortFree>
1a001046:	e000      	b.n	1a00104a <xTaskCreate+0x32>
				}
			}
			else
			{
				pxNewTCB = NULL;
1a001048:	2400      	movs	r4, #0
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
1a00104a:	b19c      	cbz	r4, 1a001074 <xTaskCreate+0x5c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a00104c:	2300      	movs	r3, #0
1a00104e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a001054:	9200      	str	r2, [sp, #0]
1a001056:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a001058:	9201      	str	r2, [sp, #4]
1a00105a:	9402      	str	r4, [sp, #8]
1a00105c:	9303      	str	r3, [sp, #12]
1a00105e:	4640      	mov	r0, r8
1a001060:	4639      	mov	r1, r7
1a001062:	462a      	mov	r2, r5
1a001064:	4633      	mov	r3, r6
1a001066:	f7ff fe29 	bl	1a000cbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00106a:	4620      	mov	r0, r4
1a00106c:	f7ff fea4 	bl	1a000db8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001070:	2001      	movs	r0, #1
1a001072:	e001      	b.n	1a001078 <xTaskCreate+0x60>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001074:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
1a001078:	b005      	add	sp, #20
1a00107a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00107e:	bf00      	nop

1a001080 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
1a001080:	b510      	push	{r4, lr}
1a001082:	b088      	sub	sp, #32
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001084:	2400      	movs	r4, #0
1a001086:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001088:	9406      	str	r4, [sp, #24]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a00108a:	a805      	add	r0, sp, #20
1a00108c:	a906      	add	r1, sp, #24
1a00108e:	aa07      	add	r2, sp, #28
1a001090:	f7ff fdde 	bl	1a000c50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001094:	9400      	str	r4, [sp, #0]
1a001096:	9b06      	ldr	r3, [sp, #24]
1a001098:	9301      	str	r3, [sp, #4]
1a00109a:	9b05      	ldr	r3, [sp, #20]
1a00109c:	9302      	str	r3, [sp, #8]
1a00109e:	481a      	ldr	r0, [pc, #104]	; (1a001108 <vTaskStartScheduler+0x88>)
1a0010a0:	491a      	ldr	r1, [pc, #104]	; (1a00110c <vTaskStartScheduler+0x8c>)
1a0010a2:	9a07      	ldr	r2, [sp, #28]
1a0010a4:	4623      	mov	r3, r4
1a0010a6:	f7ff ff79 	bl	1a000f9c <xTaskCreateStatic>
1a0010aa:	4b19      	ldr	r3, [pc, #100]	; (1a001110 <vTaskStartScheduler+0x90>)
1a0010ac:	6018      	str	r0, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
1a0010ae:	b108      	cbz	r0, 1a0010b4 <vTaskStartScheduler+0x34>
		{
			xReturn = pdPASS;
1a0010b0:	2001      	movs	r0, #1
1a0010b2:	e000      	b.n	1a0010b6 <vTaskStartScheduler+0x36>
		}
		else
		{
			xReturn = pdFAIL;
1a0010b4:	2000      	movs	r0, #0
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
1a0010b6:	2801      	cmp	r0, #1
1a0010b8:	d101      	bne.n	1a0010be <vTaskStartScheduler+0x3e>
		{
			xReturn = xTimerCreateTimerTask();
1a0010ba:	f000 fb97 	bl	1a0017ec <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
1a0010be:	2801      	cmp	r0, #1
1a0010c0:	d114      	bne.n	1a0010ec <vTaskStartScheduler+0x6c>
1a0010c2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010c6:	f383 8811 	msr	BASEPRI, r3
1a0010ca:	f3bf 8f6f 	isb	sy
1a0010ce:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
1a0010d2:	f04f 32ff 	mov.w	r2, #4294967295
1a0010d6:	4b0f      	ldr	r3, [pc, #60]	; (1a001114 <vTaskStartScheduler+0x94>)
1a0010d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0010da:	2201      	movs	r2, #1
1a0010dc:	4b0e      	ldr	r3, [pc, #56]	; (1a001118 <vTaskStartScheduler+0x98>)
1a0010de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a0010e0:	2200      	movs	r2, #0
1a0010e2:	4b0e      	ldr	r3, [pc, #56]	; (1a00111c <vTaskStartScheduler+0x9c>)
1a0010e4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
1a0010e6:	f000 fe55 	bl	1a001d94 <xPortStartScheduler>
1a0010ea:	e00b      	b.n	1a001104 <vTaskStartScheduler+0x84>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0010ec:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0010f0:	d108      	bne.n	1a001104 <vTaskStartScheduler+0x84>
1a0010f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010f6:	f383 8811 	msr	BASEPRI, r3
1a0010fa:	f3bf 8f6f 	isb	sy
1a0010fe:	f3bf 8f4f 	dsb	sy
1a001102:	e7fe      	b.n	1a001102 <vTaskStartScheduler+0x82>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
1a001104:	b008      	add	sp, #32
1a001106:	bd10      	pop	{r4, pc}
1a001108:	1a000ee1 	.word	0x1a000ee1
1a00110c:	1a003a1c 	.word	0x1a003a1c
1a001110:	10002b34 	.word	0x10002b34
1a001114:	10002b3c 	.word	0x10002b3c
1a001118:	10002a64 	.word	0x10002a64
1a00111c:	10002b38 	.word	0x10002b38

1a001120 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
1a001120:	4a02      	ldr	r2, [pc, #8]	; (1a00112c <vTaskSuspendAll+0xc>)
1a001122:	6813      	ldr	r3, [r2, #0]
1a001124:	3301      	adds	r3, #1
1a001126:	6013      	str	r3, [r2, #0]
1a001128:	4770      	bx	lr
1a00112a:	bf00      	nop
1a00112c:	10002b10 	.word	0x10002b10

1a001130 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
1a001130:	4b01      	ldr	r3, [pc, #4]	; (1a001138 <xTaskGetTickCount+0x8>)
1a001132:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
1a001134:	4770      	bx	lr
1a001136:	bf00      	nop
1a001138:	10002b38 	.word	0x10002b38

1a00113c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
1a00113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00113e:	4b3d      	ldr	r3, [pc, #244]	; (1a001234 <xTaskIncrementTick+0xf8>)
1a001140:	681b      	ldr	r3, [r3, #0]
1a001142:	2b00      	cmp	r3, #0
1a001144:	d169      	bne.n	1a00121a <xTaskIncrementTick+0xde>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001146:	4b3c      	ldr	r3, [pc, #240]	; (1a001238 <xTaskIncrementTick+0xfc>)
1a001148:	681d      	ldr	r5, [r3, #0]
1a00114a:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
1a00114c:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a00114e:	b9c5      	cbnz	r5, 1a001182 <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
1a001150:	4b3a      	ldr	r3, [pc, #232]	; (1a00123c <xTaskIncrementTick+0x100>)
1a001152:	681b      	ldr	r3, [r3, #0]
1a001154:	681b      	ldr	r3, [r3, #0]
1a001156:	b143      	cbz	r3, 1a00116a <xTaskIncrementTick+0x2e>
1a001158:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00115c:	f383 8811 	msr	BASEPRI, r3
1a001160:	f3bf 8f6f 	isb	sy
1a001164:	f3bf 8f4f 	dsb	sy
1a001168:	e7fe      	b.n	1a001168 <xTaskIncrementTick+0x2c>
1a00116a:	4a34      	ldr	r2, [pc, #208]	; (1a00123c <xTaskIncrementTick+0x100>)
1a00116c:	6811      	ldr	r1, [r2, #0]
1a00116e:	4b34      	ldr	r3, [pc, #208]	; (1a001240 <xTaskIncrementTick+0x104>)
1a001170:	6818      	ldr	r0, [r3, #0]
1a001172:	6010      	str	r0, [r2, #0]
1a001174:	6019      	str	r1, [r3, #0]
1a001176:	4a33      	ldr	r2, [pc, #204]	; (1a001244 <xTaskIncrementTick+0x108>)
1a001178:	6813      	ldr	r3, [r2, #0]
1a00117a:	3301      	adds	r3, #1
1a00117c:	6013      	str	r3, [r2, #0]
1a00117e:	f7ff fd83 	bl	1a000c88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001182:	4b31      	ldr	r3, [pc, #196]	; (1a001248 <xTaskIncrementTick+0x10c>)
1a001184:	681b      	ldr	r3, [r3, #0]
1a001186:	429d      	cmp	r5, r3
1a001188:	d203      	bcs.n	1a001192 <xTaskIncrementTick+0x56>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1a00118a:	2400      	movs	r4, #0
1a00118c:	e03a      	b.n	1a001204 <xTaskIncrementTick+0xc8>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
1a00118e:	2401      	movs	r4, #1
1a001190:	e000      	b.n	1a001194 <xTaskIncrementTick+0x58>
1a001192:	2400      	movs	r4, #0
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001194:	4b29      	ldr	r3, [pc, #164]	; (1a00123c <xTaskIncrementTick+0x100>)
1a001196:	681b      	ldr	r3, [r3, #0]
1a001198:	681b      	ldr	r3, [r3, #0]
1a00119a:	b90b      	cbnz	r3, 1a0011a0 <xTaskIncrementTick+0x64>
1a00119c:	2301      	movs	r3, #1
1a00119e:	e000      	b.n	1a0011a2 <xTaskIncrementTick+0x66>
1a0011a0:	2300      	movs	r3, #0
1a0011a2:	b123      	cbz	r3, 1a0011ae <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0011a4:	f04f 32ff 	mov.w	r2, #4294967295
1a0011a8:	4b27      	ldr	r3, [pc, #156]	; (1a001248 <xTaskIncrementTick+0x10c>)
1a0011aa:	601a      	str	r2, [r3, #0]
					break;
1a0011ac:	e02a      	b.n	1a001204 <xTaskIncrementTick+0xc8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0011ae:	4b23      	ldr	r3, [pc, #140]	; (1a00123c <xTaskIncrementTick+0x100>)
1a0011b0:	681b      	ldr	r3, [r3, #0]
1a0011b2:	68db      	ldr	r3, [r3, #12]
1a0011b4:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0011b6:	6873      	ldr	r3, [r6, #4]

					if( xConstTickCount < xItemValue )
1a0011b8:	429d      	cmp	r5, r3
1a0011ba:	d202      	bcs.n	1a0011c2 <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
1a0011bc:	4a22      	ldr	r2, [pc, #136]	; (1a001248 <xTaskIncrementTick+0x10c>)
1a0011be:	6013      	str	r3, [r2, #0]
						break;
1a0011c0:	e020      	b.n	1a001204 <xTaskIncrementTick+0xc8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0011c2:	1d37      	adds	r7, r6, #4
1a0011c4:	4638      	mov	r0, r7
1a0011c6:	f7ff fd2f 	bl	1a000c28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0011ca:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a0011cc:	b11b      	cbz	r3, 1a0011d6 <xTaskIncrementTick+0x9a>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0011ce:	f106 0018 	add.w	r0, r6, #24
1a0011d2:	f7ff fd29 	bl	1a000c28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
1a0011d6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0011d8:	2201      	movs	r2, #1
1a0011da:	fa02 f103 	lsl.w	r1, r2, r3
1a0011de:	481b      	ldr	r0, [pc, #108]	; (1a00124c <xTaskIncrementTick+0x110>)
1a0011e0:	6802      	ldr	r2, [r0, #0]
1a0011e2:	430a      	orrs	r2, r1
1a0011e4:	6002      	str	r2, [r0, #0]
1a0011e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0011ea:	009b      	lsls	r3, r3, #2
1a0011ec:	4818      	ldr	r0, [pc, #96]	; (1a001250 <xTaskIncrementTick+0x114>)
1a0011ee:	4418      	add	r0, r3
1a0011f0:	4639      	mov	r1, r7
1a0011f2:	f7ff fcf3 	bl	1a000bdc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0011f6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a0011f8:	4b16      	ldr	r3, [pc, #88]	; (1a001254 <xTaskIncrementTick+0x118>)
1a0011fa:	681b      	ldr	r3, [r3, #0]
1a0011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0011fe:	429a      	cmp	r2, r3
1a001200:	d2c5      	bcs.n	1a00118e <xTaskIncrementTick+0x52>
1a001202:	e7c7      	b.n	1a001194 <xTaskIncrementTick+0x58>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001204:	4b13      	ldr	r3, [pc, #76]	; (1a001254 <xTaskIncrementTick+0x118>)
1a001206:	681b      	ldr	r3, [r3, #0]
1a001208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00120a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00120e:	009b      	lsls	r3, r3, #2
1a001210:	4a0f      	ldr	r2, [pc, #60]	; (1a001250 <xTaskIncrementTick+0x114>)
1a001212:	58d3      	ldr	r3, [r2, r3]
1a001214:	2b01      	cmp	r3, #1
1a001216:	d806      	bhi.n	1a001226 <xTaskIncrementTick+0xea>
1a001218:	e006      	b.n	1a001228 <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
1a00121a:	4a0f      	ldr	r2, [pc, #60]	; (1a001258 <xTaskIncrementTick+0x11c>)
1a00121c:	6813      	ldr	r3, [r2, #0]
1a00121e:	3301      	adds	r3, #1
1a001220:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1a001222:	2400      	movs	r4, #0
1a001224:	e000      	b.n	1a001228 <xTaskIncrementTick+0xec>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
1a001226:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
1a001228:	4b0c      	ldr	r3, [pc, #48]	; (1a00125c <xTaskIncrementTick+0x120>)
1a00122a:	681b      	ldr	r3, [r3, #0]
1a00122c:	b103      	cbz	r3, 1a001230 <xTaskIncrementTick+0xf4>
		{
			xSwitchRequired = pdTRUE;
1a00122e:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
1a001230:	4620      	mov	r0, r4
1a001232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001234:	10002b10 	.word	0x10002b10
1a001238:	10002b38 	.word	0x10002b38
1a00123c:	10002a60 	.word	0x10002a60
1a001240:	10002a7c 	.word	0x10002a7c
1a001244:	10002a5c 	.word	0x10002a5c
1a001248:	10002b3c 	.word	0x10002b3c
1a00124c:	10002b80 	.word	0x10002b80
1a001250:	10002a84 	.word	0x10002a84
1a001254:	10002b1c 	.word	0x10002b1c
1a001258:	10002a80 	.word	0x10002a80
1a00125c:	10002b84 	.word	0x10002b84

1a001260 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
1a001260:	b538      	push	{r3, r4, r5, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
1a001262:	4b34      	ldr	r3, [pc, #208]	; (1a001334 <xTaskResumeAll+0xd4>)
1a001264:	681b      	ldr	r3, [r3, #0]
1a001266:	b943      	cbnz	r3, 1a00127a <xTaskResumeAll+0x1a>
1a001268:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00126c:	f383 8811 	msr	BASEPRI, r3
1a001270:	f3bf 8f6f 	isb	sy
1a001274:	f3bf 8f4f 	dsb	sy
1a001278:	e7fe      	b.n	1a001278 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
1a00127a:	f000 fce9 	bl	1a001c50 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
1a00127e:	4b2d      	ldr	r3, [pc, #180]	; (1a001334 <xTaskResumeAll+0xd4>)
1a001280:	681a      	ldr	r2, [r3, #0]
1a001282:	3a01      	subs	r2, #1
1a001284:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001286:	681b      	ldr	r3, [r3, #0]
1a001288:	2b00      	cmp	r3, #0
1a00128a:	d14c      	bne.n	1a001326 <xTaskResumeAll+0xc6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a00128c:	4b2a      	ldr	r3, [pc, #168]	; (1a001338 <xTaskResumeAll+0xd8>)
1a00128e:	681b      	ldr	r3, [r3, #0]
1a001290:	bb33      	cbnz	r3, 1a0012e0 <xTaskResumeAll+0x80>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
1a001292:	2400      	movs	r4, #0
1a001294:	e04a      	b.n	1a00132c <xTaskResumeAll+0xcc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001296:	4b29      	ldr	r3, [pc, #164]	; (1a00133c <xTaskResumeAll+0xdc>)
1a001298:	68db      	ldr	r3, [r3, #12]
1a00129a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00129c:	f104 0018 	add.w	r0, r4, #24
1a0012a0:	f7ff fcc2 	bl	1a000c28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0012a4:	1d25      	adds	r5, r4, #4
1a0012a6:	4628      	mov	r0, r5
1a0012a8:	f7ff fcbe 	bl	1a000c28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0012ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0012ae:	2201      	movs	r2, #1
1a0012b0:	fa02 f103 	lsl.w	r1, r2, r3
1a0012b4:	4822      	ldr	r0, [pc, #136]	; (1a001340 <xTaskResumeAll+0xe0>)
1a0012b6:	6802      	ldr	r2, [r0, #0]
1a0012b8:	430a      	orrs	r2, r1
1a0012ba:	6002      	str	r2, [r0, #0]
1a0012bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0012c0:	009b      	lsls	r3, r3, #2
1a0012c2:	4820      	ldr	r0, [pc, #128]	; (1a001344 <xTaskResumeAll+0xe4>)
1a0012c4:	4418      	add	r0, r3
1a0012c6:	4629      	mov	r1, r5
1a0012c8:	f7ff fc88 	bl	1a000bdc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0012cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0012ce:	4b1e      	ldr	r3, [pc, #120]	; (1a001348 <xTaskResumeAll+0xe8>)
1a0012d0:	681b      	ldr	r3, [r3, #0]
1a0012d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0012d4:	429a      	cmp	r2, r3
1a0012d6:	d304      	bcc.n	1a0012e2 <xTaskResumeAll+0x82>
					{
						xYieldPending = pdTRUE;
1a0012d8:	2201      	movs	r2, #1
1a0012da:	4b1c      	ldr	r3, [pc, #112]	; (1a00134c <xTaskResumeAll+0xec>)
1a0012dc:	601a      	str	r2, [r3, #0]
1a0012de:	e000      	b.n	1a0012e2 <xTaskResumeAll+0x82>
1a0012e0:	2400      	movs	r4, #0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a0012e2:	4b16      	ldr	r3, [pc, #88]	; (1a00133c <xTaskResumeAll+0xdc>)
1a0012e4:	681b      	ldr	r3, [r3, #0]
1a0012e6:	2b00      	cmp	r3, #0
1a0012e8:	d1d5      	bne.n	1a001296 <xTaskResumeAll+0x36>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
1a0012ea:	b10c      	cbz	r4, 1a0012f0 <xTaskResumeAll+0x90>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
1a0012ec:	f7ff fccc 	bl	1a000c88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0012f0:	4b17      	ldr	r3, [pc, #92]	; (1a001350 <xTaskResumeAll+0xf0>)
1a0012f2:	681c      	ldr	r4, [r3, #0]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0012f4:	b154      	cbz	r4, 1a00130c <xTaskResumeAll+0xac>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
1a0012f6:	f7ff ff21 	bl	1a00113c <xTaskIncrementTick>
1a0012fa:	b110      	cbz	r0, 1a001302 <xTaskResumeAll+0xa2>
							{
								xYieldPending = pdTRUE;
1a0012fc:	2201      	movs	r2, #1
1a0012fe:	4b13      	ldr	r3, [pc, #76]	; (1a00134c <xTaskResumeAll+0xec>)
1a001300:	601a      	str	r2, [r3, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001302:	3c01      	subs	r4, #1
1a001304:	d1f7      	bne.n	1a0012f6 <xTaskResumeAll+0x96>

						uxPendedTicks = 0;
1a001306:	2200      	movs	r2, #0
1a001308:	4b11      	ldr	r3, [pc, #68]	; (1a001350 <xTaskResumeAll+0xf0>)
1a00130a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
1a00130c:	4b0f      	ldr	r3, [pc, #60]	; (1a00134c <xTaskResumeAll+0xec>)
1a00130e:	681b      	ldr	r3, [r3, #0]
1a001310:	b15b      	cbz	r3, 1a00132a <xTaskResumeAll+0xca>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
1a001312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001316:	4b0f      	ldr	r3, [pc, #60]	; (1a001354 <xTaskResumeAll+0xf4>)
1a001318:	601a      	str	r2, [r3, #0]
1a00131a:	f3bf 8f4f 	dsb	sy
1a00131e:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
1a001322:	2401      	movs	r4, #1
1a001324:	e002      	b.n	1a00132c <xTaskResumeAll+0xcc>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
1a001326:	2400      	movs	r4, #0
1a001328:	e000      	b.n	1a00132c <xTaskResumeAll+0xcc>
1a00132a:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a00132c:	f000 fcb2 	bl	1a001c94 <vPortExitCritical>

	return xAlreadyYielded;
}
1a001330:	4620      	mov	r0, r4
1a001332:	bd38      	pop	{r3, r4, r5, pc}
1a001334:	10002b10 	.word	0x10002b10
1a001338:	10002b18 	.word	0x10002b18
1a00133c:	10002b20 	.word	0x10002b20
1a001340:	10002b80 	.word	0x10002b80
1a001344:	10002a84 	.word	0x10002a84
1a001348:	10002b1c 	.word	0x10002b1c
1a00134c:	10002b84 	.word	0x10002b84
1a001350:	10002a80 	.word	0x10002a80
1a001354:	e000ed04 	.word	0xe000ed04

1a001358 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
1a001358:	b510      	push	{r4, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
1a00135a:	b1a8      	cbz	r0, 1a001388 <vTaskDelay+0x30>
1a00135c:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
1a00135e:	4b10      	ldr	r3, [pc, #64]	; (1a0013a0 <vTaskDelay+0x48>)
1a001360:	681b      	ldr	r3, [r3, #0]
1a001362:	b143      	cbz	r3, 1a001376 <vTaskDelay+0x1e>
1a001364:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001368:	f383 8811 	msr	BASEPRI, r3
1a00136c:	f3bf 8f6f 	isb	sy
1a001370:	f3bf 8f4f 	dsb	sy
1a001374:	e7fe      	b.n	1a001374 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a001376:	f7ff fed3 	bl	1a001120 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a00137a:	4620      	mov	r0, r4
1a00137c:	2100      	movs	r1, #0
1a00137e:	f7ff fdc3 	bl	1a000f08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
1a001382:	f7ff ff6d 	bl	1a001260 <xTaskResumeAll>
1a001386:	e000      	b.n	1a00138a <vTaskDelay+0x32>

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
	BaseType_t xAlreadyYielded = pdFALSE;
1a001388:	2000      	movs	r0, #0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
1a00138a:	b938      	cbnz	r0, 1a00139c <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
1a00138c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001390:	4b04      	ldr	r3, [pc, #16]	; (1a0013a4 <vTaskDelay+0x4c>)
1a001392:	601a      	str	r2, [r3, #0]
1a001394:	f3bf 8f4f 	dsb	sy
1a001398:	f3bf 8f6f 	isb	sy
1a00139c:	bd10      	pop	{r4, pc}
1a00139e:	bf00      	nop
1a0013a0:	10002b10 	.word	0x10002b10
1a0013a4:	e000ed04 	.word	0xe000ed04

1a0013a8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0013a8:	4b2b      	ldr	r3, [pc, #172]	; (1a001458 <vTaskSwitchContext+0xb0>)
1a0013aa:	681b      	ldr	r3, [r3, #0]
1a0013ac:	b11b      	cbz	r3, 1a0013b6 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
1a0013ae:	2201      	movs	r2, #1
1a0013b0:	4b2a      	ldr	r3, [pc, #168]	; (1a00145c <vTaskSwitchContext+0xb4>)
1a0013b2:	601a      	str	r2, [r3, #0]
1a0013b4:	4770      	bx	lr

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
1a0013b6:	b510      	push	{r4, lr}
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
1a0013b8:	2200      	movs	r2, #0
1a0013ba:	4b28      	ldr	r3, [pc, #160]	; (1a00145c <vTaskSwitchContext+0xb4>)
1a0013bc:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
1a0013be:	4b28      	ldr	r3, [pc, #160]	; (1a001460 <vTaskSwitchContext+0xb8>)
1a0013c0:	681b      	ldr	r3, [r3, #0]
1a0013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0013c4:	681a      	ldr	r2, [r3, #0]
1a0013c6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0013ca:	d10b      	bne.n	1a0013e4 <vTaskSwitchContext+0x3c>
1a0013cc:	685a      	ldr	r2, [r3, #4]
1a0013ce:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0013d2:	d107      	bne.n	1a0013e4 <vTaskSwitchContext+0x3c>
1a0013d4:	689a      	ldr	r2, [r3, #8]
1a0013d6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0013da:	d103      	bne.n	1a0013e4 <vTaskSwitchContext+0x3c>
1a0013dc:	68db      	ldr	r3, [r3, #12]
1a0013de:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a0013e2:	d005      	beq.n	1a0013f0 <vTaskSwitchContext+0x48>
1a0013e4:	4b1e      	ldr	r3, [pc, #120]	; (1a001460 <vTaskSwitchContext+0xb8>)
1a0013e6:	6818      	ldr	r0, [r3, #0]
1a0013e8:	6819      	ldr	r1, [r3, #0]
1a0013ea:	3134      	adds	r1, #52	; 0x34
1a0013ec:	f7ff fc48 	bl	1a000c80 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0013f0:	4b1c      	ldr	r3, [pc, #112]	; (1a001464 <vTaskSwitchContext+0xbc>)
1a0013f2:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0013f4:	fab3 f383 	clz	r3, r3
1a0013f8:	b2db      	uxtb	r3, r3
1a0013fa:	f1c3 031f 	rsb	r3, r3, #31
1a0013fe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001402:	0092      	lsls	r2, r2, #2
1a001404:	4918      	ldr	r1, [pc, #96]	; (1a001468 <vTaskSwitchContext+0xc0>)
1a001406:	588a      	ldr	r2, [r1, r2]
1a001408:	b942      	cbnz	r2, 1a00141c <vTaskSwitchContext+0x74>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a00140a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00140e:	f383 8811 	msr	BASEPRI, r3
1a001412:	f3bf 8f6f 	isb	sy
1a001416:	f3bf 8f4f 	dsb	sy
1a00141a:	e7fe      	b.n	1a00141a <vTaskSwitchContext+0x72>
1a00141c:	4c12      	ldr	r4, [pc, #72]	; (1a001468 <vTaskSwitchContext+0xc0>)
1a00141e:	009a      	lsls	r2, r3, #2
1a001420:	18d1      	adds	r1, r2, r3
1a001422:	0089      	lsls	r1, r1, #2
1a001424:	4421      	add	r1, r4
1a001426:	6848      	ldr	r0, [r1, #4]
1a001428:	6840      	ldr	r0, [r0, #4]
1a00142a:	6048      	str	r0, [r1, #4]
1a00142c:	441a      	add	r2, r3
1a00142e:	0092      	lsls	r2, r2, #2
1a001430:	3208      	adds	r2, #8
1a001432:	4422      	add	r2, r4
1a001434:	4290      	cmp	r0, r2
1a001436:	d105      	bne.n	1a001444 <vTaskSwitchContext+0x9c>
1a001438:	6841      	ldr	r1, [r0, #4]
1a00143a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a00143e:	0092      	lsls	r2, r2, #2
1a001440:	4422      	add	r2, r4
1a001442:	6051      	str	r1, [r2, #4]
1a001444:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001448:	009b      	lsls	r3, r3, #2
1a00144a:	4a07      	ldr	r2, [pc, #28]	; (1a001468 <vTaskSwitchContext+0xc0>)
1a00144c:	4413      	add	r3, r2
1a00144e:	685b      	ldr	r3, [r3, #4]
1a001450:	68da      	ldr	r2, [r3, #12]
1a001452:	4b03      	ldr	r3, [pc, #12]	; (1a001460 <vTaskSwitchContext+0xb8>)
1a001454:	601a      	str	r2, [r3, #0]
1a001456:	bd10      	pop	{r4, pc}
1a001458:	10002b10 	.word	0x10002b10
1a00145c:	10002b84 	.word	0x10002b84
1a001460:	10002b1c 	.word	0x10002b1c
1a001464:	10002b80 	.word	0x10002b80
1a001468:	10002a84 	.word	0x10002a84

1a00146c <vTaskPlaceOnEventList>:
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
	configASSERT( pxEventList );
1a00146c:	b940      	cbnz	r0, 1a001480 <vTaskPlaceOnEventList+0x14>
1a00146e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001472:	f383 8811 	msr	BASEPRI, r3
1a001476:	f3bf 8f6f 	isb	sy
1a00147a:	f3bf 8f4f 	dsb	sy
1a00147e:	e7fe      	b.n	1a00147e <vTaskPlaceOnEventList+0x12>
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
1a001480:	b510      	push	{r4, lr}
1a001482:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001484:	4b04      	ldr	r3, [pc, #16]	; (1a001498 <vTaskPlaceOnEventList+0x2c>)
1a001486:	6819      	ldr	r1, [r3, #0]
1a001488:	3118      	adds	r1, #24
1a00148a:	f7ff fbb3 	bl	1a000bf4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a00148e:	4620      	mov	r0, r4
1a001490:	2101      	movs	r1, #1
1a001492:	f7ff fd39 	bl	1a000f08 <prvAddCurrentTaskToDelayedList>
1a001496:	bd10      	pop	{r4, pc}
1a001498:	10002b1c 	.word	0x10002b1c

1a00149c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a00149c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a00149e:	b940      	cbnz	r0, 1a0014b2 <vTaskPlaceOnEventListRestricted+0x16>
1a0014a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014a4:	f383 8811 	msr	BASEPRI, r3
1a0014a8:	f3bf 8f6f 	isb	sy
1a0014ac:	f3bf 8f4f 	dsb	sy
1a0014b0:	e7fe      	b.n	1a0014b0 <vTaskPlaceOnEventListRestricted+0x14>
1a0014b2:	460d      	mov	r5, r1
1a0014b4:	4614      	mov	r4, r2

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0014b6:	4a06      	ldr	r2, [pc, #24]	; (1a0014d0 <vTaskPlaceOnEventListRestricted+0x34>)
1a0014b8:	6811      	ldr	r1, [r2, #0]
1a0014ba:	3118      	adds	r1, #24
1a0014bc:	f7ff fb8e 	bl	1a000bdc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
1a0014c0:	b10c      	cbz	r4, 1a0014c6 <vTaskPlaceOnEventListRestricted+0x2a>
		{
			xTicksToWait = portMAX_DELAY;
1a0014c2:	f04f 35ff 	mov.w	r5, #4294967295
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a0014c6:	4628      	mov	r0, r5
1a0014c8:	4621      	mov	r1, r4
1a0014ca:	f7ff fd1d 	bl	1a000f08 <prvAddCurrentTaskToDelayedList>
1a0014ce:	bd38      	pop	{r3, r4, r5, pc}
1a0014d0:	10002b1c 	.word	0x10002b1c

1a0014d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
1a0014d4:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a0014d6:	68c3      	ldr	r3, [r0, #12]
1a0014d8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a0014da:	b944      	cbnz	r4, 1a0014ee <xTaskRemoveFromEventList+0x1a>
1a0014dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014e0:	f383 8811 	msr	BASEPRI, r3
1a0014e4:	f3bf 8f6f 	isb	sy
1a0014e8:	f3bf 8f4f 	dsb	sy
1a0014ec:	e7fe      	b.n	1a0014ec <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a0014ee:	f104 0518 	add.w	r5, r4, #24
1a0014f2:	4628      	mov	r0, r5
1a0014f4:	f7ff fb98 	bl	1a000c28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0014f8:	4b13      	ldr	r3, [pc, #76]	; (1a001548 <xTaskRemoveFromEventList+0x74>)
1a0014fa:	681b      	ldr	r3, [r3, #0]
1a0014fc:	b9a3      	cbnz	r3, 1a001528 <xTaskRemoveFromEventList+0x54>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a0014fe:	1d25      	adds	r5, r4, #4
1a001500:	4628      	mov	r0, r5
1a001502:	f7ff fb91 	bl	1a000c28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001506:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001508:	2201      	movs	r2, #1
1a00150a:	fa02 f103 	lsl.w	r1, r2, r3
1a00150e:	480f      	ldr	r0, [pc, #60]	; (1a00154c <xTaskRemoveFromEventList+0x78>)
1a001510:	6802      	ldr	r2, [r0, #0]
1a001512:	430a      	orrs	r2, r1
1a001514:	6002      	str	r2, [r0, #0]
1a001516:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00151a:	009b      	lsls	r3, r3, #2
1a00151c:	480c      	ldr	r0, [pc, #48]	; (1a001550 <xTaskRemoveFromEventList+0x7c>)
1a00151e:	4418      	add	r0, r3
1a001520:	4629      	mov	r1, r5
1a001522:	f7ff fb5b 	bl	1a000bdc <vListInsertEnd>
1a001526:	e003      	b.n	1a001530 <xTaskRemoveFromEventList+0x5c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001528:	480a      	ldr	r0, [pc, #40]	; (1a001554 <xTaskRemoveFromEventList+0x80>)
1a00152a:	4629      	mov	r1, r5
1a00152c:	f7ff fb56 	bl	1a000bdc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001530:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001532:	4b09      	ldr	r3, [pc, #36]	; (1a001558 <xTaskRemoveFromEventList+0x84>)
1a001534:	681b      	ldr	r3, [r3, #0]
1a001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001538:	429a      	cmp	r2, r3
1a00153a:	d903      	bls.n	1a001544 <xTaskRemoveFromEventList+0x70>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
1a00153c:	2001      	movs	r0, #1
1a00153e:	4b07      	ldr	r3, [pc, #28]	; (1a00155c <xTaskRemoveFromEventList+0x88>)
1a001540:	6018      	str	r0, [r3, #0]
1a001542:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
1a001544:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
1a001546:	bd38      	pop	{r3, r4, r5, pc}
1a001548:	10002b10 	.word	0x10002b10
1a00154c:	10002b80 	.word	0x10002b80
1a001550:	10002a84 	.word	0x10002a84
1a001554:	10002b20 	.word	0x10002b20
1a001558:	10002b1c 	.word	0x10002b1c
1a00155c:	10002b84 	.word	0x10002b84

1a001560 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001560:	4b03      	ldr	r3, [pc, #12]	; (1a001570 <vTaskInternalSetTimeOutState+0x10>)
1a001562:	681b      	ldr	r3, [r3, #0]
1a001564:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001566:	4b03      	ldr	r3, [pc, #12]	; (1a001574 <vTaskInternalSetTimeOutState+0x14>)
1a001568:	681b      	ldr	r3, [r3, #0]
1a00156a:	6043      	str	r3, [r0, #4]
1a00156c:	4770      	bx	lr
1a00156e:	bf00      	nop
1a001570:	10002a5c 	.word	0x10002a5c
1a001574:	10002b38 	.word	0x10002b38

1a001578 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
1a001578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
1a00157a:	b940      	cbnz	r0, 1a00158e <xTaskCheckForTimeOut+0x16>
1a00157c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001580:	f383 8811 	msr	BASEPRI, r3
1a001584:	f3bf 8f6f 	isb	sy
1a001588:	f3bf 8f4f 	dsb	sy
1a00158c:	e7fe      	b.n	1a00158c <xTaskCheckForTimeOut+0x14>
1a00158e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001590:	b941      	cbnz	r1, 1a0015a4 <xTaskCheckForTimeOut+0x2c>
1a001592:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001596:	f383 8811 	msr	BASEPRI, r3
1a00159a:	f3bf 8f6f 	isb	sy
1a00159e:	f3bf 8f4f 	dsb	sy
1a0015a2:	e7fe      	b.n	1a0015a2 <xTaskCheckForTimeOut+0x2a>
1a0015a4:	460c      	mov	r4, r1

	taskENTER_CRITICAL();
1a0015a6:	f000 fb53 	bl	1a001c50 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
1a0015aa:	4b11      	ldr	r3, [pc, #68]	; (1a0015f0 <xTaskCheckForTimeOut+0x78>)
1a0015ac:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0015ae:	6869      	ldr	r1, [r5, #4]
1a0015b0:	1a42      	subs	r2, r0, r1
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
1a0015b2:	6823      	ldr	r3, [r4, #0]
1a0015b4:	f1b3 3fff 	cmp.w	r3, #4294967295
1a0015b8:	d013      	beq.n	1a0015e2 <xTaskCheckForTimeOut+0x6a>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a0015ba:	682f      	ldr	r7, [r5, #0]
1a0015bc:	4e0d      	ldr	r6, [pc, #52]	; (1a0015f4 <xTaskCheckForTimeOut+0x7c>)
1a0015be:	6836      	ldr	r6, [r6, #0]
1a0015c0:	42b7      	cmp	r7, r6
1a0015c2:	d001      	beq.n	1a0015c8 <xTaskCheckForTimeOut+0x50>
1a0015c4:	4288      	cmp	r0, r1
1a0015c6:	d20e      	bcs.n	1a0015e6 <xTaskCheckForTimeOut+0x6e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a0015c8:	429a      	cmp	r2, r3
1a0015ca:	d206      	bcs.n	1a0015da <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
1a0015cc:	1a9b      	subs	r3, r3, r2
1a0015ce:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a0015d0:	4628      	mov	r0, r5
1a0015d2:	f7ff ffc5 	bl	1a001560 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a0015d6:	2400      	movs	r4, #0
1a0015d8:	e006      	b.n	1a0015e8 <xTaskCheckForTimeOut+0x70>
		}
		else
		{
			*pxTicksToWait = 0;
1a0015da:	2300      	movs	r3, #0
1a0015dc:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a0015de:	2401      	movs	r4, #1
1a0015e0:	e002      	b.n	1a0015e8 <xTaskCheckForTimeOut+0x70>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
1a0015e2:	2400      	movs	r4, #0
1a0015e4:	e000      	b.n	1a0015e8 <xTaskCheckForTimeOut+0x70>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
1a0015e6:	2401      	movs	r4, #1
		{
			*pxTicksToWait = 0;
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
1a0015e8:	f000 fb54 	bl	1a001c94 <vPortExitCritical>

	return xReturn;
}
1a0015ec:	4620      	mov	r0, r4
1a0015ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0015f0:	10002b38 	.word	0x10002b38
1a0015f4:	10002a5c 	.word	0x10002a5c

1a0015f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
1a0015f8:	2201      	movs	r2, #1
1a0015fa:	4b01      	ldr	r3, [pc, #4]	; (1a001600 <vTaskMissedYield+0x8>)
1a0015fc:	601a      	str	r2, [r3, #0]
1a0015fe:	4770      	bx	lr
1a001600:	10002b84 	.word	0x10002b84

1a001604 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
1a001604:	4b05      	ldr	r3, [pc, #20]	; (1a00161c <xTaskGetSchedulerState+0x18>)
1a001606:	681b      	ldr	r3, [r3, #0]
1a001608:	b123      	cbz	r3, 1a001614 <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00160a:	4b05      	ldr	r3, [pc, #20]	; (1a001620 <xTaskGetSchedulerState+0x1c>)
1a00160c:	681b      	ldr	r3, [r3, #0]
1a00160e:	b91b      	cbnz	r3, 1a001618 <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
1a001610:	2002      	movs	r0, #2
1a001612:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001614:	2001      	movs	r0, #1
1a001616:	4770      	bx	lr
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
1a001618:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
1a00161a:	4770      	bx	lr
1a00161c:	10002a64 	.word	0x10002a64
1a001620:	10002b10 	.word	0x10002b10

1a001624 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
1a001624:	2800      	cmp	r0, #0
1a001626:	d04b      	beq.n	1a0016c0 <xTaskPriorityDisinherit+0x9c>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
1a001628:	b538      	push	{r3, r4, r5, lr}
1a00162a:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
1a00162c:	4a27      	ldr	r2, [pc, #156]	; (1a0016cc <xTaskPriorityDisinherit+0xa8>)
1a00162e:	6812      	ldr	r2, [r2, #0]
1a001630:	4290      	cmp	r0, r2
1a001632:	d008      	beq.n	1a001646 <xTaskPriorityDisinherit+0x22>
1a001634:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001638:	f383 8811 	msr	BASEPRI, r3
1a00163c:	f3bf 8f6f 	isb	sy
1a001640:	f3bf 8f4f 	dsb	sy
1a001644:	e7fe      	b.n	1a001644 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001646:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001648:	b942      	cbnz	r2, 1a00165c <xTaskPriorityDisinherit+0x38>
1a00164a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00164e:	f383 8811 	msr	BASEPRI, r3
1a001652:	f3bf 8f6f 	isb	sy
1a001656:	f3bf 8f4f 	dsb	sy
1a00165a:	e7fe      	b.n	1a00165a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a00165c:	3a01      	subs	r2, #1
1a00165e:	6542      	str	r2, [r0, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001660:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001662:	6d19      	ldr	r1, [r3, #80]	; 0x50
1a001664:	4288      	cmp	r0, r1
1a001666:	d02d      	beq.n	1a0016c4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001668:	bb72      	cbnz	r2, 1a0016c8 <xTaskPriorityDisinherit+0xa4>
1a00166a:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00166c:	1d1d      	adds	r5, r3, #4
1a00166e:	4628      	mov	r0, r5
1a001670:	f7ff fada 	bl	1a000c28 <uxListRemove>
1a001674:	b970      	cbnz	r0, 1a001694 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001676:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001678:	eb02 0382 	add.w	r3, r2, r2, lsl #2
1a00167c:	009b      	lsls	r3, r3, #2
1a00167e:	4914      	ldr	r1, [pc, #80]	; (1a0016d0 <xTaskPriorityDisinherit+0xac>)
1a001680:	58cb      	ldr	r3, [r1, r3]
1a001682:	b93b      	cbnz	r3, 1a001694 <xTaskPriorityDisinherit+0x70>
1a001684:	2301      	movs	r3, #1
1a001686:	fa03 f202 	lsl.w	r2, r3, r2
1a00168a:	4912      	ldr	r1, [pc, #72]	; (1a0016d4 <xTaskPriorityDisinherit+0xb0>)
1a00168c:	680b      	ldr	r3, [r1, #0]
1a00168e:	ea23 0302 	bic.w	r3, r3, r2
1a001692:	600b      	str	r3, [r1, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001694:	6d20      	ldr	r0, [r4, #80]	; 0x50
1a001696:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001698:	f1c0 0307 	rsb	r3, r0, #7
1a00169c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a00169e:	2401      	movs	r4, #1
1a0016a0:	fa04 f100 	lsl.w	r1, r4, r0
1a0016a4:	4a0b      	ldr	r2, [pc, #44]	; (1a0016d4 <xTaskPriorityDisinherit+0xb0>)
1a0016a6:	6813      	ldr	r3, [r2, #0]
1a0016a8:	430b      	orrs	r3, r1
1a0016aa:	6013      	str	r3, [r2, #0]
1a0016ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0016b0:	0080      	lsls	r0, r0, #2
1a0016b2:	4b07      	ldr	r3, [pc, #28]	; (1a0016d0 <xTaskPriorityDisinherit+0xac>)
1a0016b4:	4418      	add	r0, r3
1a0016b6:	4629      	mov	r1, r5
1a0016b8:	f7ff fa90 	bl	1a000bdc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
1a0016bc:	4620      	mov	r0, r4
1a0016be:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
1a0016c0:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a0016c2:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
1a0016c4:	2000      	movs	r0, #0
1a0016c6:	bd38      	pop	{r3, r4, r5, pc}
1a0016c8:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a0016ca:	bd38      	pop	{r3, r4, r5, pc}
1a0016cc:	10002b1c 	.word	0x10002b1c
1a0016d0:	10002a84 	.word	0x10002a84
1a0016d4:	10002b80 	.word	0x10002b80

1a0016d8 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a0016d8:	4b06      	ldr	r3, [pc, #24]	; (1a0016f4 <prvGetNextExpireTime+0x1c>)
1a0016da:	681a      	ldr	r2, [r3, #0]
1a0016dc:	6813      	ldr	r3, [r2, #0]
1a0016de:	fab3 f383 	clz	r3, r3
1a0016e2:	095b      	lsrs	r3, r3, #5
1a0016e4:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a0016e6:	b913      	cbnz	r3, 1a0016ee <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0016e8:	68d3      	ldr	r3, [r2, #12]
1a0016ea:	6818      	ldr	r0, [r3, #0]
1a0016ec:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a0016ee:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a0016f0:	4770      	bx	lr
1a0016f2:	bf00      	nop
1a0016f4:	10002b88 	.word	0x10002b88

1a0016f8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a0016f8:	b510      	push	{r4, lr}
1a0016fa:	4604      	mov	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a0016fc:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0016fe:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001700:	4291      	cmp	r1, r2
1a001702:	d80a      	bhi.n	1a00171a <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001704:	1ad2      	subs	r2, r2, r3
1a001706:	6983      	ldr	r3, [r0, #24]
1a001708:	429a      	cmp	r2, r3
1a00170a:	d211      	bcs.n	1a001730 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a00170c:	4b0a      	ldr	r3, [pc, #40]	; (1a001738 <prvInsertTimerInActiveList+0x40>)
1a00170e:	6818      	ldr	r0, [r3, #0]
1a001710:	1d21      	adds	r1, r4, #4
1a001712:	f7ff fa6f 	bl	1a000bf4 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
1a001716:	2000      	movs	r0, #0
1a001718:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a00171a:	429a      	cmp	r2, r3
1a00171c:	d201      	bcs.n	1a001722 <prvInsertTimerInActiveList+0x2a>
1a00171e:	4299      	cmp	r1, r3
1a001720:	d208      	bcs.n	1a001734 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001722:	4b06      	ldr	r3, [pc, #24]	; (1a00173c <prvInsertTimerInActiveList+0x44>)
1a001724:	6818      	ldr	r0, [r3, #0]
1a001726:	1d21      	adds	r1, r4, #4
1a001728:	f7ff fa64 	bl	1a000bf4 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
1a00172c:	2000      	movs	r0, #0
1a00172e:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001730:	2001      	movs	r0, #1
1a001732:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
1a001734:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a001736:	bd10      	pop	{r4, pc}
1a001738:	10002cac 	.word	0x10002cac
1a00173c:	10002b88 	.word	0x10002b88

1a001740 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001740:	b530      	push	{r4, r5, lr}
1a001742:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001744:	f000 fa84 	bl	1a001c50 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001748:	4b10      	ldr	r3, [pc, #64]	; (1a00178c <prvCheckForValidListAndQueue+0x4c>)
1a00174a:	681b      	ldr	r3, [r3, #0]
1a00174c:	b9cb      	cbnz	r3, 1a001782 <prvCheckForValidListAndQueue+0x42>
		{
			vListInitialise( &xActiveTimerList1 );
1a00174e:	4d10      	ldr	r5, [pc, #64]	; (1a001790 <prvCheckForValidListAndQueue+0x50>)
1a001750:	4628      	mov	r0, r5
1a001752:	f7ff fa33 	bl	1a000bbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001756:	4c0f      	ldr	r4, [pc, #60]	; (1a001794 <prvCheckForValidListAndQueue+0x54>)
1a001758:	4620      	mov	r0, r4
1a00175a:	f7ff fa2f 	bl	1a000bbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a00175e:	4b0e      	ldr	r3, [pc, #56]	; (1a001798 <prvCheckForValidListAndQueue+0x58>)
1a001760:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001762:	4b0e      	ldr	r3, [pc, #56]	; (1a00179c <prvCheckForValidListAndQueue+0x5c>)
1a001764:	601c      	str	r4, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001766:	2300      	movs	r3, #0
1a001768:	9300      	str	r3, [sp, #0]
1a00176a:	200a      	movs	r0, #10
1a00176c:	2110      	movs	r1, #16
1a00176e:	4a0c      	ldr	r2, [pc, #48]	; (1a0017a0 <prvCheckForValidListAndQueue+0x60>)
1a001770:	4b0c      	ldr	r3, [pc, #48]	; (1a0017a4 <prvCheckForValidListAndQueue+0x64>)
1a001772:	f7fe ffad 	bl	1a0006d0 <xQueueGenericCreateStatic>
1a001776:	4b05      	ldr	r3, [pc, #20]	; (1a00178c <prvCheckForValidListAndQueue+0x4c>)
1a001778:	6018      	str	r0, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
1a00177a:	b110      	cbz	r0, 1a001782 <prvCheckForValidListAndQueue+0x42>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a00177c:	490a      	ldr	r1, [pc, #40]	; (1a0017a8 <prvCheckForValidListAndQueue+0x68>)
1a00177e:	f7ff f9e3 	bl	1a000b48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001782:	f000 fa87 	bl	1a001c94 <vPortExitCritical>
}
1a001786:	b003      	add	sp, #12
1a001788:	bd30      	pop	{r4, r5, pc}
1a00178a:	bf00      	nop
1a00178c:	10002ca8 	.word	0x10002ca8
1a001790:	10002b8c 	.word	0x10002b8c
1a001794:	10002ba0 	.word	0x10002ba0
1a001798:	10002b88 	.word	0x10002b88
1a00179c:	10002cac 	.word	0x10002cac
1a0017a0:	10002bb4 	.word	0x10002bb4
1a0017a4:	10002c58 	.word	0x10002c58
1a0017a8:	1a003a24 	.word	0x1a003a24

1a0017ac <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
1a0017ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0017b0:	9c07      	ldr	r4, [sp, #28]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a0017b2:	b941      	cbnz	r1, 1a0017c6 <prvInitialiseNewTimer+0x1a>
1a0017b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017b8:	f383 8811 	msr	BASEPRI, r3
1a0017bc:	f3bf 8f6f 	isb	sy
1a0017c0:	f3bf 8f4f 	dsb	sy
1a0017c4:	e7fe      	b.n	1a0017c4 <prvInitialiseNewTimer+0x18>
1a0017c6:	460f      	mov	r7, r1

	if( pxNewTimer != NULL )
1a0017c8:	b174      	cbz	r4, 1a0017e8 <prvInitialiseNewTimer+0x3c>
1a0017ca:	461d      	mov	r5, r3
1a0017cc:	4616      	mov	r6, r2
1a0017ce:	4680      	mov	r8, r0
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
1a0017d0:	f7ff ffb6 	bl	1a001740 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
1a0017d4:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a0017d8:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a0017da:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a0017dc:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a0017de:	9b06      	ldr	r3, [sp, #24]
1a0017e0:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a0017e2:	1d20      	adds	r0, r4, #4
1a0017e4:	f7ff f9f6 	bl	1a000bd4 <vListInitialiseItem>
1a0017e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0017ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
1a0017ec:	b510      	push	{r4, lr}
1a0017ee:	b088      	sub	sp, #32

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
1a0017f0:	f7ff ffa6 	bl	1a001740 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
1a0017f4:	4b15      	ldr	r3, [pc, #84]	; (1a00184c <xTimerCreateTimerTask+0x60>)
1a0017f6:	681b      	ldr	r3, [r3, #0]
1a0017f8:	b1d3      	cbz	r3, 1a001830 <xTimerCreateTimerTask+0x44>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a0017fa:	2400      	movs	r4, #0
1a0017fc:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a0017fe:	9406      	str	r4, [sp, #24]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001800:	a805      	add	r0, sp, #20
1a001802:	a906      	add	r1, sp, #24
1a001804:	aa07      	add	r2, sp, #28
1a001806:	f7ff fa2f 	bl	1a000c68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a00180a:	2304      	movs	r3, #4
1a00180c:	9300      	str	r3, [sp, #0]
1a00180e:	9b06      	ldr	r3, [sp, #24]
1a001810:	9301      	str	r3, [sp, #4]
1a001812:	9b05      	ldr	r3, [sp, #20]
1a001814:	9302      	str	r3, [sp, #8]
1a001816:	480e      	ldr	r0, [pc, #56]	; (1a001850 <xTimerCreateTimerTask+0x64>)
1a001818:	490e      	ldr	r1, [pc, #56]	; (1a001854 <xTimerCreateTimerTask+0x68>)
1a00181a:	9a07      	ldr	r2, [sp, #28]
1a00181c:	4623      	mov	r3, r4
1a00181e:	f7ff fbbd 	bl	1a000f9c <xTaskCreateStatic>
1a001822:	4b0d      	ldr	r3, [pc, #52]	; (1a001858 <xTimerCreateTimerTask+0x6c>)
1a001824:	6018      	str	r0, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
1a001826:	b908      	cbnz	r0, 1a00182c <xTimerCreateTimerTask+0x40>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
1a001828:	4620      	mov	r0, r4
1a00182a:	e002      	b.n	1a001832 <xTimerCreateTimerTask+0x46>
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
			{
				xReturn = pdPASS;
1a00182c:	2001      	movs	r0, #1
1a00182e:	e000      	b.n	1a001832 <xTimerCreateTimerTask+0x46>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
1a001830:	2000      	movs	r0, #0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
1a001832:	b940      	cbnz	r0, 1a001846 <xTimerCreateTimerTask+0x5a>
1a001834:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001838:	f383 8811 	msr	BASEPRI, r3
1a00183c:	f3bf 8f6f 	isb	sy
1a001840:	f3bf 8f4f 	dsb	sy
1a001844:	e7fe      	b.n	1a001844 <xTimerCreateTimerTask+0x58>
	return xReturn;
}
1a001846:	b008      	add	sp, #32
1a001848:	bd10      	pop	{r4, pc}
1a00184a:	bf00      	nop
1a00184c:	10002ca8 	.word	0x10002ca8
1a001850:	1a001b61 	.word	0x1a001b61
1a001854:	1a003a2c 	.word	0x1a003a2c
1a001858:	10002cb0 	.word	0x10002cb0

1a00185c <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
1a00185c:	b530      	push	{r4, r5, lr}
1a00185e:	b085      	sub	sp, #20
1a001860:	9c09      	ldr	r4, [sp, #36]	; 0x24
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
1a001862:	2530      	movs	r5, #48	; 0x30
1a001864:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a001866:	9d03      	ldr	r5, [sp, #12]
1a001868:	2d30      	cmp	r5, #48	; 0x30
1a00186a:	d008      	beq.n	1a00187e <xTimerCreateStatic+0x22>
1a00186c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001870:	f383 8811 	msr	BASEPRI, r3
1a001874:	f3bf 8f6f 	isb	sy
1a001878:	f3bf 8f4f 	dsb	sy
1a00187c:	e7fe      	b.n	1a00187c <xTimerCreateStatic+0x20>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
1a00187e:	b944      	cbnz	r4, 1a001892 <xTimerCreateStatic+0x36>
1a001880:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001884:	f383 8811 	msr	BASEPRI, r3
1a001888:	f3bf 8f6f 	isb	sy
1a00188c:	f3bf 8f4f 	dsb	sy
1a001890:	e7fe      	b.n	1a001890 <xTimerCreateStatic+0x34>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewTimer != NULL )
1a001892:	b13c      	cbz	r4, 1a0018a4 <xTimerCreateStatic+0x48>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a001894:	9d08      	ldr	r5, [sp, #32]
1a001896:	9500      	str	r5, [sp, #0]
1a001898:	9401      	str	r4, [sp, #4]
1a00189a:	f7ff ff87 	bl	1a0017ac <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a00189e:	2301      	movs	r3, #1
1a0018a0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
	}
1a0018a4:	4620      	mov	r0, r4
1a0018a6:	b005      	add	sp, #20
1a0018a8:	bd30      	pop	{r4, r5, pc}
1a0018aa:	bf00      	nop

1a0018ac <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
1a0018ac:	b940      	cbnz	r0, 1a0018c0 <xTimerGenericCommand+0x14>
1a0018ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018b2:	f383 8811 	msr	BASEPRI, r3
1a0018b6:	f3bf 8f6f 	isb	sy
1a0018ba:	f3bf 8f4f 	dsb	sy
1a0018be:	e7fe      	b.n	1a0018be <xTimerGenericCommand+0x12>
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
1a0018c0:	b530      	push	{r4, r5, lr}
1a0018c2:	b085      	sub	sp, #20
1a0018c4:	4615      	mov	r5, r2
1a0018c6:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
1a0018c8:	4a12      	ldr	r2, [pc, #72]	; (1a001914 <xTimerGenericCommand+0x68>)
1a0018ca:	6810      	ldr	r0, [r2, #0]
1a0018cc:	b1f0      	cbz	r0, 1a00190c <xTimerGenericCommand+0x60>
1a0018ce:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
1a0018d0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a0018d2:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a0018d4:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a0018d6:	2905      	cmp	r1, #5
1a0018d8:	dc13      	bgt.n	1a001902 <xTimerGenericCommand+0x56>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a0018da:	f7ff fe93 	bl	1a001604 <xTaskGetSchedulerState>
1a0018de:	2802      	cmp	r0, #2
1a0018e0:	d107      	bne.n	1a0018f2 <xTimerGenericCommand+0x46>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0018e2:	4b0c      	ldr	r3, [pc, #48]	; (1a001914 <xTimerGenericCommand+0x68>)
1a0018e4:	6818      	ldr	r0, [r3, #0]
1a0018e6:	4669      	mov	r1, sp
1a0018e8:	9a08      	ldr	r2, [sp, #32]
1a0018ea:	2300      	movs	r3, #0
1a0018ec:	f7fe ff46 	bl	1a00077c <xQueueGenericSend>
1a0018f0:	e00d      	b.n	1a00190e <xTimerGenericCommand+0x62>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a0018f2:	4b08      	ldr	r3, [pc, #32]	; (1a001914 <xTimerGenericCommand+0x68>)
1a0018f4:	6818      	ldr	r0, [r3, #0]
1a0018f6:	4669      	mov	r1, sp
1a0018f8:	2200      	movs	r2, #0
1a0018fa:	4613      	mov	r3, r2
1a0018fc:	f7fe ff3e 	bl	1a00077c <xQueueGenericSend>
1a001900:	e005      	b.n	1a00190e <xTimerGenericCommand+0x62>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001902:	4669      	mov	r1, sp
1a001904:	2300      	movs	r3, #0
1a001906:	f7ff f801 	bl	1a00090c <xQueueGenericSendFromISR>
1a00190a:	e000      	b.n	1a00190e <xTimerGenericCommand+0x62>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
1a00190c:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
1a00190e:	b005      	add	sp, #20
1a001910:	bd30      	pop	{r4, r5, pc}
1a001912:	bf00      	nop
1a001914:	10002ca8 	.word	0x10002ca8

1a001918 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
1a001918:	b570      	push	{r4, r5, r6, lr}
1a00191a:	b082      	sub	sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a00191c:	e029      	b.n	1a001972 <prvSwitchTimerLists+0x5a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00191e:	68db      	ldr	r3, [r3, #12]
1a001920:	681e      	ldr	r6, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001922:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001924:	1d25      	adds	r5, r4, #4
1a001926:	4628      	mov	r0, r5
1a001928:	f7ff f97e 	bl	1a000c28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00192c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00192e:	4620      	mov	r0, r4
1a001930:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001932:	69e3      	ldr	r3, [r4, #28]
1a001934:	2b01      	cmp	r3, #1
1a001936:	d11c      	bne.n	1a001972 <prvSwitchTimerLists+0x5a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001938:	69a3      	ldr	r3, [r4, #24]
1a00193a:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00193c:	42b3      	cmp	r3, r6
1a00193e:	d907      	bls.n	1a001950 <prvSwitchTimerLists+0x38>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a001940:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001942:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001944:	4b11      	ldr	r3, [pc, #68]	; (1a00198c <prvSwitchTimerLists+0x74>)
1a001946:	6818      	ldr	r0, [r3, #0]
1a001948:	4629      	mov	r1, r5
1a00194a:	f7ff f953 	bl	1a000bf4 <vListInsert>
1a00194e:	e010      	b.n	1a001972 <prvSwitchTimerLists+0x5a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001950:	2300      	movs	r3, #0
1a001952:	9300      	str	r3, [sp, #0]
1a001954:	4620      	mov	r0, r4
1a001956:	4619      	mov	r1, r3
1a001958:	4632      	mov	r2, r6
1a00195a:	f7ff ffa7 	bl	1a0018ac <xTimerGenericCommand>
				configASSERT( xResult );
1a00195e:	b940      	cbnz	r0, 1a001972 <prvSwitchTimerLists+0x5a>
1a001960:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001964:	f383 8811 	msr	BASEPRI, r3
1a001968:	f3bf 8f6f 	isb	sy
1a00196c:	f3bf 8f4f 	dsb	sy
1a001970:	e7fe      	b.n	1a001970 <prvSwitchTimerLists+0x58>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001972:	4b06      	ldr	r3, [pc, #24]	; (1a00198c <prvSwitchTimerLists+0x74>)
1a001974:	681b      	ldr	r3, [r3, #0]
1a001976:	681a      	ldr	r2, [r3, #0]
1a001978:	2a00      	cmp	r2, #0
1a00197a:	d1d0      	bne.n	1a00191e <prvSwitchTimerLists+0x6>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
1a00197c:	4a04      	ldr	r2, [pc, #16]	; (1a001990 <prvSwitchTimerLists+0x78>)
1a00197e:	6810      	ldr	r0, [r2, #0]
1a001980:	4902      	ldr	r1, [pc, #8]	; (1a00198c <prvSwitchTimerLists+0x74>)
1a001982:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a001984:	6013      	str	r3, [r2, #0]
}
1a001986:	b002      	add	sp, #8
1a001988:	bd70      	pop	{r4, r5, r6, pc}
1a00198a:	bf00      	nop
1a00198c:	10002b88 	.word	0x10002b88
1a001990:	10002cac 	.word	0x10002cac

1a001994 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
1a001994:	b538      	push	{r3, r4, r5, lr}
1a001996:	4605      	mov	r5, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
1a001998:	f7ff fbca 	bl	1a001130 <xTaskGetTickCount>
1a00199c:	4604      	mov	r4, r0

	if( xTimeNow < xLastTime )
1a00199e:	4b07      	ldr	r3, [pc, #28]	; (1a0019bc <prvSampleTimeNow+0x28>)
1a0019a0:	681b      	ldr	r3, [r3, #0]
1a0019a2:	4298      	cmp	r0, r3
1a0019a4:	d204      	bcs.n	1a0019b0 <prvSampleTimeNow+0x1c>
	{
		prvSwitchTimerLists();
1a0019a6:	f7ff ffb7 	bl	1a001918 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a0019aa:	2301      	movs	r3, #1
1a0019ac:	602b      	str	r3, [r5, #0]
1a0019ae:	e001      	b.n	1a0019b4 <prvSampleTimeNow+0x20>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
1a0019b0:	2300      	movs	r3, #0
1a0019b2:	602b      	str	r3, [r5, #0]
	}

	xLastTime = xTimeNow;
1a0019b4:	4b01      	ldr	r3, [pc, #4]	; (1a0019bc <prvSampleTimeNow+0x28>)
1a0019b6:	601c      	str	r4, [r3, #0]

	return xTimeNow;
}
1a0019b8:	4620      	mov	r0, r4
1a0019ba:	bd38      	pop	{r3, r4, r5, pc}
1a0019bc:	10002c54 	.word	0x10002c54

1a0019c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
1a0019c0:	b570      	push	{r4, r5, r6, lr}
1a0019c2:	b082      	sub	sp, #8
1a0019c4:	4605      	mov	r5, r0
1a0019c6:	460e      	mov	r6, r1
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0019c8:	4b13      	ldr	r3, [pc, #76]	; (1a001a18 <prvProcessExpiredTimer+0x58>)
1a0019ca:	681b      	ldr	r3, [r3, #0]
1a0019cc:	68db      	ldr	r3, [r3, #12]
1a0019ce:	68dc      	ldr	r4, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0019d0:	1d20      	adds	r0, r4, #4
1a0019d2:	f7ff f929 	bl	1a000c28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0019d6:	69e3      	ldr	r3, [r4, #28]
1a0019d8:	2b01      	cmp	r3, #1
1a0019da:	d118      	bne.n	1a001a0e <prvProcessExpiredTimer+0x4e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0019dc:	69a1      	ldr	r1, [r4, #24]
1a0019de:	4620      	mov	r0, r4
1a0019e0:	4429      	add	r1, r5
1a0019e2:	4632      	mov	r2, r6
1a0019e4:	462b      	mov	r3, r5
1a0019e6:	f7ff fe87 	bl	1a0016f8 <prvInsertTimerInActiveList>
1a0019ea:	b180      	cbz	r0, 1a001a0e <prvProcessExpiredTimer+0x4e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0019ec:	2300      	movs	r3, #0
1a0019ee:	9300      	str	r3, [sp, #0]
1a0019f0:	4620      	mov	r0, r4
1a0019f2:	4619      	mov	r1, r3
1a0019f4:	462a      	mov	r2, r5
1a0019f6:	f7ff ff59 	bl	1a0018ac <xTimerGenericCommand>
			configASSERT( xResult );
1a0019fa:	b940      	cbnz	r0, 1a001a0e <prvProcessExpiredTimer+0x4e>
1a0019fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a00:	f383 8811 	msr	BASEPRI, r3
1a001a04:	f3bf 8f6f 	isb	sy
1a001a08:	f3bf 8f4f 	dsb	sy
1a001a0c:	e7fe      	b.n	1a001a0c <prvProcessExpiredTimer+0x4c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001a10:	4620      	mov	r0, r4
1a001a12:	4798      	blx	r3
}
1a001a14:	b002      	add	sp, #8
1a001a16:	bd70      	pop	{r4, r5, r6, pc}
1a001a18:	10002b88 	.word	0x10002b88

1a001a1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
1a001a1c:	b570      	push	{r4, r5, r6, lr}
1a001a1e:	b082      	sub	sp, #8
1a001a20:	4606      	mov	r6, r0
1a001a22:	460c      	mov	r4, r1
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
1a001a24:	f7ff fb7c 	bl	1a001120 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001a28:	a801      	add	r0, sp, #4
1a001a2a:	f7ff ffb3 	bl	1a001994 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a001a2e:	9b01      	ldr	r3, [sp, #4]
1a001a30:	bb1b      	cbnz	r3, 1a001a7a <prvProcessTimerOrBlockTask+0x5e>
1a001a32:	4605      	mov	r5, r0
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a001a34:	b944      	cbnz	r4, 1a001a48 <prvProcessTimerOrBlockTask+0x2c>
1a001a36:	4286      	cmp	r6, r0
1a001a38:	d806      	bhi.n	1a001a48 <prvProcessTimerOrBlockTask+0x2c>
			{
				( void ) xTaskResumeAll();
1a001a3a:	f7ff fc11 	bl	1a001260 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a001a3e:	4630      	mov	r0, r6
1a001a40:	4629      	mov	r1, r5
1a001a42:	f7ff ffbd 	bl	1a0019c0 <prvProcessExpiredTimer>
1a001a46:	e01a      	b.n	1a001a7e <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
1a001a48:	b12c      	cbz	r4, 1a001a56 <prvProcessTimerOrBlockTask+0x3a>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a001a4a:	4b0e      	ldr	r3, [pc, #56]	; (1a001a84 <prvProcessTimerOrBlockTask+0x68>)
1a001a4c:	681b      	ldr	r3, [r3, #0]
1a001a4e:	681c      	ldr	r4, [r3, #0]
1a001a50:	fab4 f484 	clz	r4, r4
1a001a54:	0964      	lsrs	r4, r4, #5
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a001a56:	4b0c      	ldr	r3, [pc, #48]	; (1a001a88 <prvProcessTimerOrBlockTask+0x6c>)
1a001a58:	6818      	ldr	r0, [r3, #0]
1a001a5a:	1b71      	subs	r1, r6, r5
1a001a5c:	4622      	mov	r2, r4
1a001a5e:	f7ff f887 	bl	1a000b70 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
1a001a62:	f7ff fbfd 	bl	1a001260 <xTaskResumeAll>
1a001a66:	b950      	cbnz	r0, 1a001a7e <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
1a001a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001a6c:	4b07      	ldr	r3, [pc, #28]	; (1a001a8c <prvProcessTimerOrBlockTask+0x70>)
1a001a6e:	601a      	str	r2, [r3, #0]
1a001a70:	f3bf 8f4f 	dsb	sy
1a001a74:	f3bf 8f6f 	isb	sy
1a001a78:	e001      	b.n	1a001a7e <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
1a001a7a:	f7ff fbf1 	bl	1a001260 <xTaskResumeAll>
		}
	}
}
1a001a7e:	b002      	add	sp, #8
1a001a80:	bd70      	pop	{r4, r5, r6, pc}
1a001a82:	bf00      	nop
1a001a84:	10002cac 	.word	0x10002cac
1a001a88:	10002ca8 	.word	0x10002ca8
1a001a8c:	e000ed04 	.word	0xe000ed04

1a001a90 <prvProcessReceivedCommands>:
	return xProcessTimerNow;
}
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
1a001a90:	b530      	push	{r4, r5, lr}
1a001a92:	b089      	sub	sp, #36	; 0x24
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001a94:	e057      	b.n	1a001b46 <prvProcessReceivedCommands+0xb6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a001a96:	9b04      	ldr	r3, [sp, #16]
1a001a98:	2b00      	cmp	r3, #0
1a001a9a:	da03      	bge.n	1a001aa4 <prvProcessReceivedCommands+0x14>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a001a9c:	9806      	ldr	r0, [sp, #24]
1a001a9e:	9907      	ldr	r1, [sp, #28]
1a001aa0:	9b05      	ldr	r3, [sp, #20]
1a001aa2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a001aa4:	9b04      	ldr	r3, [sp, #16]
1a001aa6:	2b00      	cmp	r3, #0
1a001aa8:	db4d      	blt.n	1a001b46 <prvProcessReceivedCommands+0xb6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a001aaa:	9c06      	ldr	r4, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a001aac:	6963      	ldr	r3, [r4, #20]
1a001aae:	b113      	cbz	r3, 1a001ab6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001ab0:	1d20      	adds	r0, r4, #4
1a001ab2:	f7ff f8b9 	bl	1a000c28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001ab6:	a803      	add	r0, sp, #12
1a001ab8:	f7ff ff6c 	bl	1a001994 <prvSampleTimeNow>
1a001abc:	4603      	mov	r3, r0

			switch( xMessage.xMessageID )
1a001abe:	9a04      	ldr	r2, [sp, #16]
1a001ac0:	2a09      	cmp	r2, #9
1a001ac2:	d840      	bhi.n	1a001b46 <prvProcessReceivedCommands+0xb6>
1a001ac4:	e8df f002 	tbb	[pc, r2]
1a001ac8:	3f050505 	.word	0x3f050505
1a001acc:	05053927 	.word	0x05053927
1a001ad0:	273f      	.short	0x273f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a001ad2:	9d05      	ldr	r5, [sp, #20]
1a001ad4:	69a1      	ldr	r1, [r4, #24]
1a001ad6:	4620      	mov	r0, r4
1a001ad8:	4429      	add	r1, r5
1a001ada:	461a      	mov	r2, r3
1a001adc:	462b      	mov	r3, r5
1a001ade:	f7ff fe0b 	bl	1a0016f8 <prvInsertTimerInActiveList>
1a001ae2:	b380      	cbz	r0, 1a001b46 <prvProcessReceivedCommands+0xb6>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001ae6:	4620      	mov	r0, r4
1a001ae8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001aea:	69e3      	ldr	r3, [r4, #28]
1a001aec:	2b01      	cmp	r3, #1
1a001aee:	d12a      	bne.n	1a001b46 <prvProcessReceivedCommands+0xb6>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a001af0:	69a2      	ldr	r2, [r4, #24]
1a001af2:	2300      	movs	r3, #0
1a001af4:	9300      	str	r3, [sp, #0]
1a001af6:	4620      	mov	r0, r4
1a001af8:	4619      	mov	r1, r3
1a001afa:	9c05      	ldr	r4, [sp, #20]
1a001afc:	4422      	add	r2, r4
1a001afe:	f7ff fed5 	bl	1a0018ac <xTimerGenericCommand>
							configASSERT( xResult );
1a001b02:	bb00      	cbnz	r0, 1a001b46 <prvProcessReceivedCommands+0xb6>
1a001b04:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b08:	f383 8811 	msr	BASEPRI, r3
1a001b0c:	f3bf 8f6f 	isb	sy
1a001b10:	f3bf 8f4f 	dsb	sy
1a001b14:	e7fe      	b.n	1a001b14 <prvProcessReceivedCommands+0x84>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a001b16:	9905      	ldr	r1, [sp, #20]
1a001b18:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001b1a:	b941      	cbnz	r1, 1a001b2e <prvProcessReceivedCommands+0x9e>
1a001b1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b20:	f383 8811 	msr	BASEPRI, r3
1a001b24:	f3bf 8f6f 	isb	sy
1a001b28:	f3bf 8f4f 	dsb	sy
1a001b2c:	e7fe      	b.n	1a001b2c <prvProcessReceivedCommands+0x9c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a001b2e:	4620      	mov	r0, r4
1a001b30:	4419      	add	r1, r3
1a001b32:	461a      	mov	r2, r3
1a001b34:	f7ff fde0 	bl	1a0016f8 <prvInsertTimerInActiveList>
					break;
1a001b38:	e005      	b.n	1a001b46 <prvProcessReceivedCommands+0xb6>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a001b3a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a001b3e:	b913      	cbnz	r3, 1a001b46 <prvProcessReceivedCommands+0xb6>
						{
							vPortFree( pxTimer );
1a001b40:	4620      	mov	r0, r4
1a001b42:	f7fe fcc5 	bl	1a0004d0 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001b46:	4b05      	ldr	r3, [pc, #20]	; (1a001b5c <prvProcessReceivedCommands+0xcc>)
1a001b48:	6818      	ldr	r0, [r3, #0]
1a001b4a:	a904      	add	r1, sp, #16
1a001b4c:	2200      	movs	r2, #0
1a001b4e:	f7fe ff4f 	bl	1a0009f0 <xQueueReceive>
1a001b52:	2800      	cmp	r0, #0
1a001b54:	d19f      	bne.n	1a001a96 <prvProcessReceivedCommands+0x6>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
1a001b56:	b009      	add	sp, #36	; 0x24
1a001b58:	bd30      	pop	{r4, r5, pc}
1a001b5a:	bf00      	nop
1a001b5c:	10002ca8 	.word	0x10002ca8

1a001b60 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
1a001b60:	b500      	push	{lr}
1a001b62:	b083      	sub	sp, #12

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a001b64:	a801      	add	r0, sp, #4
1a001b66:	f7ff fdb7 	bl	1a0016d8 <prvGetNextExpireTime>

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a001b6a:	9901      	ldr	r1, [sp, #4]
1a001b6c:	f7ff ff56 	bl	1a001a1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
1a001b70:	f7ff ff8e 	bl	1a001a90 <prvProcessReceivedCommands>
	}
1a001b74:	e7f6      	b.n	1a001b64 <prvTimerTask+0x4>
1a001b76:	bf00      	nop

1a001b78 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a001b78:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a001b7a:	2300      	movs	r3, #0
1a001b7c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a001b7e:	4b0d      	ldr	r3, [pc, #52]	; (1a001bb4 <prvTaskExitError+0x3c>)
1a001b80:	681b      	ldr	r3, [r3, #0]
1a001b82:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001b86:	d008      	beq.n	1a001b9a <prvTaskExitError+0x22>
1a001b88:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b8c:	f383 8811 	msr	BASEPRI, r3
1a001b90:	f3bf 8f6f 	isb	sy
1a001b94:	f3bf 8f4f 	dsb	sy
1a001b98:	e7fe      	b.n	1a001b98 <prvTaskExitError+0x20>
1a001b9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b9e:	f383 8811 	msr	BASEPRI, r3
1a001ba2:	f3bf 8f6f 	isb	sy
1a001ba6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a001baa:	9b01      	ldr	r3, [sp, #4]
1a001bac:	2b00      	cmp	r3, #0
1a001bae:	d0fc      	beq.n	1a001baa <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a001bb0:	b002      	add	sp, #8
1a001bb2:	4770      	bx	lr
1a001bb4:	10000000 	.word	0x10000000

1a001bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a001bb8:	4808      	ldr	r0, [pc, #32]	; (1a001bdc <prvPortStartFirstTask+0x24>)
1a001bba:	6800      	ldr	r0, [r0, #0]
1a001bbc:	6800      	ldr	r0, [r0, #0]
1a001bbe:	f380 8808 	msr	MSP, r0
1a001bc2:	f04f 0000 	mov.w	r0, #0
1a001bc6:	f380 8814 	msr	CONTROL, r0
1a001bca:	b662      	cpsie	i
1a001bcc:	b661      	cpsie	f
1a001bce:	f3bf 8f4f 	dsb	sy
1a001bd2:	f3bf 8f6f 	isb	sy
1a001bd6:	df00      	svc	0
1a001bd8:	bf00      	nop
1a001bda:	0000      	.short	0x0000
1a001bdc:	e000ed08 	.word	0xe000ed08

1a001be0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a001be0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a001bf0 <vPortEnableVFP+0x10>
1a001be4:	6801      	ldr	r1, [r0, #0]
1a001be6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001bea:	6001      	str	r1, [r0, #0]
1a001bec:	4770      	bx	lr
1a001bee:	0000      	.short	0x0000
1a001bf0:	e000ed88 	.word	0xe000ed88

1a001bf4 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a001bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a001bf8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a001bfc:	f021 0101 	bic.w	r1, r1, #1
1a001c00:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a001c04:	4b05      	ldr	r3, [pc, #20]	; (1a001c1c <pxPortInitialiseStack+0x28>)
1a001c06:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a001c0a:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a001c0e:	f06f 0302 	mvn.w	r3, #2
1a001c12:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
1a001c16:	3844      	subs	r0, #68	; 0x44
1a001c18:	4770      	bx	lr
1a001c1a:	bf00      	nop
1a001c1c:	1a001b79 	.word	0x1a001b79

1a001c20 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
1a001c20:	4b07      	ldr	r3, [pc, #28]	; (1a001c40 <pxCurrentTCBConst2>)
1a001c22:	6819      	ldr	r1, [r3, #0]
1a001c24:	6808      	ldr	r0, [r1, #0]
1a001c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001c2a:	f380 8809 	msr	PSP, r0
1a001c2e:	f3bf 8f6f 	isb	sy
1a001c32:	f04f 0000 	mov.w	r0, #0
1a001c36:	f380 8811 	msr	BASEPRI, r0
1a001c3a:	4770      	bx	lr
1a001c3c:	f3af 8000 	nop.w

1a001c40 <pxCurrentTCBConst2>:
1a001c40:	10002b1c 	.word	0x10002b1c
1a001c44:	f3af 8000 	nop.w
1a001c48:	f3af 8000 	nop.w
1a001c4c:	f3af 8000 	nop.w

1a001c50 <vPortEnterCritical>:
1a001c50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c54:	f383 8811 	msr	BASEPRI, r3
1a001c58:	f3bf 8f6f 	isb	sy
1a001c5c:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
1a001c60:	4a0a      	ldr	r2, [pc, #40]	; (1a001c8c <vPortEnterCritical+0x3c>)
1a001c62:	6813      	ldr	r3, [r2, #0]
1a001c64:	3301      	adds	r3, #1
1a001c66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
1a001c68:	2b01      	cmp	r3, #1
1a001c6a:	d10d      	bne.n	1a001c88 <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a001c6c:	4b08      	ldr	r3, [pc, #32]	; (1a001c90 <vPortEnterCritical+0x40>)
1a001c6e:	681b      	ldr	r3, [r3, #0]
1a001c70:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001c74:	d008      	beq.n	1a001c88 <vPortEnterCritical+0x38>
1a001c76:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c7a:	f383 8811 	msr	BASEPRI, r3
1a001c7e:	f3bf 8f6f 	isb	sy
1a001c82:	f3bf 8f4f 	dsb	sy
1a001c86:	e7fe      	b.n	1a001c86 <vPortEnterCritical+0x36>
1a001c88:	4770      	bx	lr
1a001c8a:	bf00      	nop
1a001c8c:	10000000 	.word	0x10000000
1a001c90:	e000ed04 	.word	0xe000ed04

1a001c94 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
1a001c94:	4b09      	ldr	r3, [pc, #36]	; (1a001cbc <vPortExitCritical+0x28>)
1a001c96:	681b      	ldr	r3, [r3, #0]
1a001c98:	b943      	cbnz	r3, 1a001cac <vPortExitCritical+0x18>
1a001c9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c9e:	f383 8811 	msr	BASEPRI, r3
1a001ca2:	f3bf 8f6f 	isb	sy
1a001ca6:	f3bf 8f4f 	dsb	sy
1a001caa:	e7fe      	b.n	1a001caa <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a001cac:	3b01      	subs	r3, #1
1a001cae:	4a03      	ldr	r2, [pc, #12]	; (1a001cbc <vPortExitCritical+0x28>)
1a001cb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a001cb2:	b90b      	cbnz	r3, 1a001cb8 <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a001cb4:	f383 8811 	msr	BASEPRI, r3
1a001cb8:	4770      	bx	lr
1a001cba:	bf00      	nop
1a001cbc:	10000000 	.word	0x10000000

1a001cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
1a001cc0:	f3ef 8009 	mrs	r0, PSP
1a001cc4:	f3bf 8f6f 	isb	sy
1a001cc8:	4b15      	ldr	r3, [pc, #84]	; (1a001d20 <pxCurrentTCBConst>)
1a001cca:	681a      	ldr	r2, [r3, #0]
1a001ccc:	f01e 0f10 	tst.w	lr, #16
1a001cd0:	bf08      	it	eq
1a001cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a001cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001cda:	6010      	str	r0, [r2, #0]
1a001cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a001ce0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a001ce4:	f380 8811 	msr	BASEPRI, r0
1a001ce8:	f3bf 8f4f 	dsb	sy
1a001cec:	f3bf 8f6f 	isb	sy
1a001cf0:	f7ff fb5a 	bl	1a0013a8 <vTaskSwitchContext>
1a001cf4:	f04f 0000 	mov.w	r0, #0
1a001cf8:	f380 8811 	msr	BASEPRI, r0
1a001cfc:	bc09      	pop	{r0, r3}
1a001cfe:	6819      	ldr	r1, [r3, #0]
1a001d00:	6808      	ldr	r0, [r1, #0]
1a001d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001d06:	f01e 0f10 	tst.w	lr, #16
1a001d0a:	bf08      	it	eq
1a001d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a001d10:	f380 8809 	msr	PSP, r0
1a001d14:	f3bf 8f6f 	isb	sy
1a001d18:	4770      	bx	lr
1a001d1a:	bf00      	nop
1a001d1c:	f3af 8000 	nop.w

1a001d20 <pxCurrentTCBConst>:
1a001d20:	10002b1c 	.word	0x10002b1c
1a001d24:	f3af 8000 	nop.w
1a001d28:	f3af 8000 	nop.w
1a001d2c:	f3af 8000 	nop.w

1a001d30 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
1a001d30:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a001d32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d36:	f383 8811 	msr	BASEPRI, r3
1a001d3a:	f3bf 8f6f 	isb	sy
1a001d3e:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
1a001d42:	f7ff f9fb 	bl	1a00113c <xTaskIncrementTick>
1a001d46:	b118      	cbz	r0, 1a001d50 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a001d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001d4c:	4b02      	ldr	r3, [pc, #8]	; (1a001d58 <SysTick_Handler+0x28>)
1a001d4e:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a001d50:	2300      	movs	r3, #0
1a001d52:	f383 8811 	msr	BASEPRI, r3
1a001d56:	bd08      	pop	{r3, pc}
1a001d58:	e000ed04 	.word	0xe000ed04

1a001d5c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a001d5c:	4a08      	ldr	r2, [pc, #32]	; (1a001d80 <vPortSetupTimerInterrupt+0x24>)
1a001d5e:	2300      	movs	r3, #0
1a001d60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a001d62:	4908      	ldr	r1, [pc, #32]	; (1a001d84 <vPortSetupTimerInterrupt+0x28>)
1a001d64:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a001d66:	4b08      	ldr	r3, [pc, #32]	; (1a001d88 <vPortSetupTimerInterrupt+0x2c>)
1a001d68:	681b      	ldr	r3, [r3, #0]
1a001d6a:	4908      	ldr	r1, [pc, #32]	; (1a001d8c <vPortSetupTimerInterrupt+0x30>)
1a001d6c:	fba1 1303 	umull	r1, r3, r1, r3
1a001d70:	099b      	lsrs	r3, r3, #6
1a001d72:	3b01      	subs	r3, #1
1a001d74:	4906      	ldr	r1, [pc, #24]	; (1a001d90 <vPortSetupTimerInterrupt+0x34>)
1a001d76:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a001d78:	2307      	movs	r3, #7
1a001d7a:	6013      	str	r3, [r2, #0]
1a001d7c:	4770      	bx	lr
1a001d7e:	bf00      	nop
1a001d80:	e000e010 	.word	0xe000e010
1a001d84:	e000e018 	.word	0xe000e018
1a001d88:	10002d78 	.word	0x10002d78
1a001d8c:	10624dd3 	.word	0x10624dd3
1a001d90:	e000e014 	.word	0xe000e014

1a001d94 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a001d94:	4b40      	ldr	r3, [pc, #256]	; (1a001e98 <xPortStartScheduler+0x104>)
1a001d96:	681a      	ldr	r2, [r3, #0]
1a001d98:	4b40      	ldr	r3, [pc, #256]	; (1a001e9c <xPortStartScheduler+0x108>)
1a001d9a:	429a      	cmp	r2, r3
1a001d9c:	d108      	bne.n	1a001db0 <xPortStartScheduler+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a001d9e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001da2:	f383 8811 	msr	BASEPRI, r3
1a001da6:	f3bf 8f6f 	isb	sy
1a001daa:	f3bf 8f4f 	dsb	sy
1a001dae:	e7fe      	b.n	1a001dae <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a001db0:	4b39      	ldr	r3, [pc, #228]	; (1a001e98 <xPortStartScheduler+0x104>)
1a001db2:	681a      	ldr	r2, [r3, #0]
1a001db4:	4b3a      	ldr	r3, [pc, #232]	; (1a001ea0 <xPortStartScheduler+0x10c>)
1a001db6:	429a      	cmp	r2, r3
1a001db8:	d108      	bne.n	1a001dcc <xPortStartScheduler+0x38>
1a001dba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dbe:	f383 8811 	msr	BASEPRI, r3
1a001dc2:	f3bf 8f6f 	isb	sy
1a001dc6:	f3bf 8f4f 	dsb	sy
1a001dca:	e7fe      	b.n	1a001dca <xPortStartScheduler+0x36>

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
1a001dcc:	b510      	push	{r4, lr}
1a001dce:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a001dd0:	4b34      	ldr	r3, [pc, #208]	; (1a001ea4 <xPortStartScheduler+0x110>)
1a001dd2:	781a      	ldrb	r2, [r3, #0]
1a001dd4:	b2d2      	uxtb	r2, r2
1a001dd6:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a001dd8:	22ff      	movs	r2, #255	; 0xff
1a001dda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a001ddc:	781b      	ldrb	r3, [r3, #0]
1a001dde:	b2db      	uxtb	r3, r3
1a001de0:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a001de4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001de8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a001dec:	4a2e      	ldr	r2, [pc, #184]	; (1a001ea8 <xPortStartScheduler+0x114>)
1a001dee:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a001df0:	2207      	movs	r2, #7
1a001df2:	4b2e      	ldr	r3, [pc, #184]	; (1a001eac <xPortStartScheduler+0x118>)
1a001df4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a001df6:	e009      	b.n	1a001e0c <xPortStartScheduler+0x78>
		{
			ulMaxPRIGROUPValue--;
1a001df8:	4a2c      	ldr	r2, [pc, #176]	; (1a001eac <xPortStartScheduler+0x118>)
1a001dfa:	6813      	ldr	r3, [r2, #0]
1a001dfc:	3b01      	subs	r3, #1
1a001dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a001e00:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001e04:	005b      	lsls	r3, r3, #1
1a001e06:	b2db      	uxtb	r3, r3
1a001e08:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a001e0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a001e10:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001e14:	d1f0      	bne.n	1a001df8 <xPortStartScheduler+0x64>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a001e16:	4b25      	ldr	r3, [pc, #148]	; (1a001eac <xPortStartScheduler+0x118>)
1a001e18:	681b      	ldr	r3, [r3, #0]
1a001e1a:	f1c3 0207 	rsb	r2, r3, #7
1a001e1e:	2a03      	cmp	r2, #3
1a001e20:	d008      	beq.n	1a001e34 <xPortStartScheduler+0xa0>
1a001e22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e26:	f383 8811 	msr	BASEPRI, r3
1a001e2a:	f3bf 8f6f 	isb	sy
1a001e2e:	f3bf 8f4f 	dsb	sy
1a001e32:	e7fe      	b.n	1a001e32 <xPortStartScheduler+0x9e>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
1a001e34:	2a03      	cmp	r2, #3
1a001e36:	d008      	beq.n	1a001e4a <xPortStartScheduler+0xb6>
1a001e38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e3c:	f383 8811 	msr	BASEPRI, r3
1a001e40:	f3bf 8f6f 	isb	sy
1a001e44:	f3bf 8f4f 	dsb	sy
1a001e48:	e7fe      	b.n	1a001e48 <xPortStartScheduler+0xb4>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a001e4a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a001e4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a001e50:	4a16      	ldr	r2, [pc, #88]	; (1a001eac <xPortStartScheduler+0x118>)
1a001e52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a001e54:	9b01      	ldr	r3, [sp, #4]
1a001e56:	b2db      	uxtb	r3, r3
1a001e58:	4a12      	ldr	r2, [pc, #72]	; (1a001ea4 <xPortStartScheduler+0x110>)
1a001e5a:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a001e5c:	4b14      	ldr	r3, [pc, #80]	; (1a001eb0 <xPortStartScheduler+0x11c>)
1a001e5e:	681a      	ldr	r2, [r3, #0]
1a001e60:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a001e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a001e66:	681a      	ldr	r2, [r3, #0]
1a001e68:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a001e6c:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
1a001e6e:	f7ff ff75 	bl	1a001d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
1a001e72:	2400      	movs	r4, #0
1a001e74:	4b0f      	ldr	r3, [pc, #60]	; (1a001eb4 <xPortStartScheduler+0x120>)
1a001e76:	601c      	str	r4, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
1a001e78:	f7ff feb2 	bl	1a001be0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a001e7c:	4a0e      	ldr	r2, [pc, #56]	; (1a001eb8 <xPortStartScheduler+0x124>)
1a001e7e:	6813      	ldr	r3, [r2, #0]
1a001e80:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a001e84:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
1a001e86:	f7ff fe97 	bl	1a001bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
1a001e8a:	f7ff fa8d 	bl	1a0013a8 <vTaskSwitchContext>
	prvTaskExitError();
1a001e8e:	f7ff fe73 	bl	1a001b78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
}
1a001e92:	4620      	mov	r0, r4
1a001e94:	b002      	add	sp, #8
1a001e96:	bd10      	pop	{r4, pc}
1a001e98:	e000ed00 	.word	0xe000ed00
1a001e9c:	410fc271 	.word	0x410fc271
1a001ea0:	410fc270 	.word	0x410fc270
1a001ea4:	e000e400 	.word	0xe000e400
1a001ea8:	10002cb4 	.word	0x10002cb4
1a001eac:	10002cb8 	.word	0x10002cb8
1a001eb0:	e000ed20 	.word	0xe000ed20
1a001eb4:	10000000 	.word	0x10000000
1a001eb8:	e000ef34 	.word	0xe000ef34

1a001ebc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a001ebc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a001ec0:	2b0f      	cmp	r3, #15
1a001ec2:	d90f      	bls.n	1a001ee4 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a001ec4:	4a10      	ldr	r2, [pc, #64]	; (1a001f08 <vPortValidateInterruptPriority+0x4c>)
1a001ec6:	5c9b      	ldrb	r3, [r3, r2]
1a001ec8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a001eca:	4a10      	ldr	r2, [pc, #64]	; (1a001f0c <vPortValidateInterruptPriority+0x50>)
1a001ecc:	7812      	ldrb	r2, [r2, #0]
1a001ece:	4293      	cmp	r3, r2
1a001ed0:	d208      	bcs.n	1a001ee4 <vPortValidateInterruptPriority+0x28>
1a001ed2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ed6:	f383 8811 	msr	BASEPRI, r3
1a001eda:	f3bf 8f6f 	isb	sy
1a001ede:	f3bf 8f4f 	dsb	sy
1a001ee2:	e7fe      	b.n	1a001ee2 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a001ee4:	4b0a      	ldr	r3, [pc, #40]	; (1a001f10 <vPortValidateInterruptPriority+0x54>)
1a001ee6:	681b      	ldr	r3, [r3, #0]
1a001ee8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a001eec:	4a09      	ldr	r2, [pc, #36]	; (1a001f14 <vPortValidateInterruptPriority+0x58>)
1a001eee:	6812      	ldr	r2, [r2, #0]
1a001ef0:	4293      	cmp	r3, r2
1a001ef2:	d908      	bls.n	1a001f06 <vPortValidateInterruptPriority+0x4a>
1a001ef4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ef8:	f383 8811 	msr	BASEPRI, r3
1a001efc:	f3bf 8f6f 	isb	sy
1a001f00:	f3bf 8f4f 	dsb	sy
1a001f04:	e7fe      	b.n	1a001f04 <vPortValidateInterruptPriority+0x48>
1a001f06:	4770      	bx	lr
1a001f08:	e000e3f0 	.word	0xe000e3f0
1a001f0c:	10002cb4 	.word	0x10002cb4
1a001f10:	e000ed0c 	.word	0xe000ed0c
1a001f14:	10002cb8 	.word	0x10002cb8

1a001f18 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001f18:	4b04      	ldr	r3, [pc, #16]	; (1a001f2c <cyclesCounterInit+0x14>)
1a001f1a:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a001f1c:	4b04      	ldr	r3, [pc, #16]	; (1a001f30 <cyclesCounterInit+0x18>)
1a001f1e:	681a      	ldr	r2, [r3, #0]
1a001f20:	6813      	ldr	r3, [r2, #0]
1a001f22:	f043 0301 	orr.w	r3, r3, #1
1a001f26:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001f28:	2001      	movs	r0, #1
1a001f2a:	4770      	bx	lr
1a001f2c:	10000008 	.word	0x10000008
1a001f30:	10000004 	.word	0x10000004

1a001f34 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001f34:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001f36:	4d09      	ldr	r5, [pc, #36]	; (1a001f5c <gpioObtainPinInit+0x28>)
1a001f38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001f3c:	182c      	adds	r4, r5, r0
1a001f3e:	5c28      	ldrb	r0, [r5, r0]
1a001f40:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001f42:	7861      	ldrb	r1, [r4, #1]
1a001f44:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001f46:	78a2      	ldrb	r2, [r4, #2]
1a001f48:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001f4a:	78e2      	ldrb	r2, [r4, #3]
1a001f4c:	9b02      	ldr	r3, [sp, #8]
1a001f4e:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001f50:	7922      	ldrb	r2, [r4, #4]
1a001f52:	9b03      	ldr	r3, [sp, #12]
1a001f54:	701a      	strb	r2, [r3, #0]
}
1a001f56:	bc30      	pop	{r4, r5}
1a001f58:	4770      	bx	lr
1a001f5a:	bf00      	nop
1a001f5c:	1a003a34 	.word	0x1a003a34

1a001f60 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a001f60:	b570      	push	{r4, r5, r6, lr}
1a001f62:	b084      	sub	sp, #16
1a001f64:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001f66:	2300      	movs	r3, #0
1a001f68:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001f6c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001f70:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001f74:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001f78:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001f7c:	ab03      	add	r3, sp, #12
1a001f7e:	9300      	str	r3, [sp, #0]
1a001f80:	f10d 030b 	add.w	r3, sp, #11
1a001f84:	9301      	str	r3, [sp, #4]
1a001f86:	f10d 010f 	add.w	r1, sp, #15
1a001f8a:	f10d 020e 	add.w	r2, sp, #14
1a001f8e:	f10d 030d 	add.w	r3, sp, #13
1a001f92:	f7ff ffcf 	bl	1a001f34 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001f96:	2c05      	cmp	r4, #5
1a001f98:	f200 80a8 	bhi.w	1a0020ec <gpioInit+0x18c>
1a001f9c:	e8df f004 	tbb	[pc, r4]
1a001fa0:	46278408 	.word	0x46278408
1a001fa4:	0365      	.short	0x0365

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001fa6:	4853      	ldr	r0, [pc, #332]	; (1a0020f4 <gpioInit+0x194>)
1a001fa8:	f001 f928 	bl	1a0031fc <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a001fac:	2001      	movs	r0, #1
   switch(config) {

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;
1a001fae:	e09e      	b.n	1a0020ee <gpioInit+0x18e>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a001fb0:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001fb4:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001fb8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001fbc:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001fc0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001fc4:	494c      	ldr	r1, [pc, #304]	; (1a0020f8 <gpioInit+0x198>)
1a001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001fca:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001fce:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001fd2:	2001      	movs	r0, #1
1a001fd4:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001fd8:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a001fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001fe0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a001fe4:	ea22 0204 	bic.w	r2, r2, r4
1a001fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001fec:	e07f      	b.n	1a0020ee <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a001fee:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001ff2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001ff6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001ffa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001ffe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002002:	493d      	ldr	r1, [pc, #244]	; (1a0020f8 <gpioInit+0x198>)
1a002004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002008:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00200c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002010:	2001      	movs	r0, #1
1a002012:	fa00 f402 	lsl.w	r4, r0, r2
1a002016:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a00201a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00201e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a002022:	ea22 0204 	bic.w	r2, r2, r4
1a002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a00202a:	e060      	b.n	1a0020ee <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a00202c:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002030:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002034:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002038:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00203c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002040:	492d      	ldr	r1, [pc, #180]	; (1a0020f8 <gpioInit+0x198>)
1a002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002046:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00204a:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00204e:	2001      	movs	r0, #1
1a002050:	fa00 f402 	lsl.w	r4, r0, r2
1a002054:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a002058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00205c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a002060:	ea22 0204 	bic.w	r2, r2, r4
1a002064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a002068:	e041      	b.n	1a0020ee <gpioInit+0x18e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a00206a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00206e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002072:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002076:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00207a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00207e:	491e      	ldr	r1, [pc, #120]	; (1a0020f8 <gpioInit+0x198>)
1a002080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002084:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002088:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00208c:	2001      	movs	r0, #1
1a00208e:	fa00 f402 	lsl.w	r4, r0, r2
1a002092:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a002096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00209a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a00209e:	ea22 0204 	bic.w	r2, r2, r4
1a0020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0020a6:	e022      	b.n	1a0020ee <gpioInit+0x18e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a0020a8:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0020ac:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0020b0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0020b4:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0020b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0020bc:	490e      	ldr	r1, [pc, #56]	; (1a0020f8 <gpioInit+0x198>)
1a0020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0020c2:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0020c6:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a0020ca:	b25a      	sxtb	r2, r3
1a0020cc:	2001      	movs	r0, #1
1a0020ce:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a0020d2:	4a08      	ldr	r2, [pc, #32]	; (1a0020f4 <gpioInit+0x194>)
1a0020d4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0020d8:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a0020dc:	4331      	orrs	r1, r6
1a0020de:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0020e2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0020e6:	2100      	movs	r1, #0
1a0020e8:	54d1      	strb	r1, [r2, r3]
1a0020ea:	e000      	b.n	1a0020ee <gpioInit+0x18e>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

   default:
      ret_val = 0;
1a0020ec:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a0020ee:	b004      	add	sp, #16
1a0020f0:	bd70      	pop	{r4, r5, r6, pc}
1a0020f2:	bf00      	nop
1a0020f4:	400f4000 	.word	0x400f4000
1a0020f8:	40086000 	.word	0x40086000

1a0020fc <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a0020fc:	b510      	push	{r4, lr}
1a0020fe:	b084      	sub	sp, #16
1a002100:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002102:	2300      	movs	r3, #0
1a002104:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002108:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00210c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002110:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002114:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002118:	ab03      	add	r3, sp, #12
1a00211a:	9300      	str	r3, [sp, #0]
1a00211c:	f10d 030b 	add.w	r3, sp, #11
1a002120:	9301      	str	r3, [sp, #4]
1a002122:	f10d 010f 	add.w	r1, sp, #15
1a002126:	f10d 020e 	add.w	r2, sp, #14
1a00212a:	f10d 030d 	add.w	r3, sp, #13
1a00212e:	f7ff ff01 	bl	1a001f34 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a002132:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a002136:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a00213a:	3400      	adds	r4, #0
1a00213c:	bf18      	it	ne
1a00213e:	2401      	movne	r4, #1
1a002140:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a002144:	4a02      	ldr	r2, [pc, #8]	; (1a002150 <gpioWrite+0x54>)
1a002146:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a002148:	2001      	movs	r0, #1
1a00214a:	b004      	add	sp, #16
1a00214c:	bd10      	pop	{r4, pc}
1a00214e:	bf00      	nop
1a002150:	400f4000 	.word	0x400f4000

1a002154 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a002154:	b500      	push	{lr}
1a002156:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a002158:	2300      	movs	r3, #0
1a00215a:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00215e:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002162:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002166:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00216a:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00216e:	ab03      	add	r3, sp, #12
1a002170:	9300      	str	r3, [sp, #0]
1a002172:	f10d 030b 	add.w	r3, sp, #11
1a002176:	9301      	str	r3, [sp, #4]
1a002178:	f10d 010f 	add.w	r1, sp, #15
1a00217c:	f10d 020e 	add.w	r2, sp, #14
1a002180:	f10d 030d 	add.w	r3, sp, #13
1a002184:	f7ff fed6 	bl	1a001f34 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a002188:	f99d 200c 	ldrsb.w	r2, [sp, #12]
1a00218c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a002190:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a002194:	4a04      	ldr	r2, [pc, #16]	; (1a0021a8 <gpioRead+0x54>)
1a002196:	5cd3      	ldrb	r3, [r2, r3]
1a002198:	f013 0fff 	tst.w	r3, #255	; 0xff

   return ret_val;
}
1a00219c:	bf14      	ite	ne
1a00219e:	2001      	movne	r0, #1
1a0021a0:	2000      	moveq	r0, #0
1a0021a2:	b005      	add	sp, #20
1a0021a4:	f85d fb04 	ldr.w	pc, [sp], #4
1a0021a8:	400f4000 	.word	0x400f4000

1a0021ac <gpioToggle>:
   return ret_val;
}


bool_t gpioToggle( gpioMap_t pin )
{
1a0021ac:	b510      	push	{r4, lr}
1a0021ae:	4604      	mov	r4, r0

   return gpioWrite( pin, !gpioRead(pin) );
1a0021b0:	f7ff ffd0 	bl	1a002154 <gpioRead>
1a0021b4:	fab0 f180 	clz	r1, r0
1a0021b8:	0949      	lsrs	r1, r1, #5
1a0021ba:	4620      	mov	r0, r4
1a0021bc:	f7ff ff9e 	bl	1a0020fc <gpioWrite>
}
1a0021c0:	bd10      	pop	{r4, pc}
1a0021c2:	bf00      	nop

1a0021c4 <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0021c4:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a0021c6:	4908      	ldr	r1, [pc, #32]	; (1a0021e8 <tickerCallback+0x24>)
1a0021c8:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0021cc:	3201      	adds	r2, #1
1a0021ce:	f143 0300 	adc.w	r3, r3, #0
1a0021d2:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0021d6:	4b05      	ldr	r3, [pc, #20]	; (1a0021ec <tickerCallback+0x28>)
1a0021d8:	681b      	ldr	r3, [r3, #0]
1a0021da:	b123      	cbz	r3, 1a0021e6 <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a0021dc:	4b03      	ldr	r3, [pc, #12]	; (1a0021ec <tickerCallback+0x28>)
1a0021de:	681b      	ldr	r3, [r3, #0]
1a0021e0:	4a03      	ldr	r2, [pc, #12]	; (1a0021f0 <tickerCallback+0x2c>)
1a0021e2:	6810      	ldr	r0, [r2, #0]
1a0021e4:	4798      	blx	r3
1a0021e6:	bd08      	pop	{r3, pc}
1a0021e8:	10002d68 	.word	0x10002d68
1a0021ec:	10002cbc 	.word	0x10002cbc
1a0021f0:	10002cf0 	.word	0x10002cf0

1a0021f4 <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a0021f4:	b510      	push	{r4, lr}
1a0021f6:	b082      	sub	sp, #8
1a0021f8:	4601      	mov	r1, r0
      }
      return ret_val;
   #else
      #ifdef USE_FREERTOS
         static StaticTimer_t tickerObject;
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a0021fa:	4b0e      	ldr	r3, [pc, #56]	; (1a002234 <tickInit+0x40>)
1a0021fc:	9300      	str	r3, [sp, #0]
1a0021fe:	4b0e      	ldr	r3, [pc, #56]	; (1a002238 <tickInit+0x44>)
1a002200:	9301      	str	r3, [sp, #4]
1a002202:	480e      	ldr	r0, [pc, #56]	; (1a00223c <tickInit+0x48>)
1a002204:	2201      	movs	r2, #1
1a002206:	2300      	movs	r3, #0
1a002208:	f7ff fb28 	bl	1a00185c <xTimerCreateStatic>
                                               pdTRUE,
                                               (void * const) (0),
                                               (TimerCallbackFunction_t)(tickerCallback),
                                               &tickerObject 
                                             );
         if (h == NULL)
1a00220c:	b170      	cbz	r0, 1a00222c <tickInit+0x38>
1a00220e:	4604      	mov	r4, r0
            return 0;
         return xTimerStart(h, 0) == pdPASS;
1a002210:	f7fe ff8e 	bl	1a001130 <xTaskGetTickCount>
1a002214:	4602      	mov	r2, r0
1a002216:	2300      	movs	r3, #0
1a002218:	9300      	str	r3, [sp, #0]
1a00221a:	4620      	mov	r0, r4
1a00221c:	2101      	movs	r1, #1
1a00221e:	f7ff fb45 	bl	1a0018ac <xTimerGenericCommand>
1a002222:	2801      	cmp	r0, #1
1a002224:	bf14      	ite	ne
1a002226:	2000      	movne	r0, #0
1a002228:	2001      	moveq	r0, #1
1a00222a:	e000      	b.n	1a00222e <tickInit+0x3a>
                                               (void * const) (0),
                                               (TimerCallbackFunction_t)(tickerCallback),
                                               &tickerObject 
                                             );
         if (h == NULL)
            return 0;
1a00222c:	2000      	movs	r0, #0
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a00222e:	b002      	add	sp, #8
1a002230:	bd10      	pop	{r4, pc}
1a002232:	bf00      	nop
1a002234:	1a0021c5 	.word	0x1a0021c5
1a002238:	10002cc0 	.word	0x10002cc0
1a00223c:	1a003b6c 	.word	0x1a003b6c

1a002240 <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a002240:	b570      	push	{r4, r5, r6, lr}
1a002242:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a002244:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a002248:	009b      	lsls	r3, r3, #2
1a00224a:	4a21      	ldr	r2, [pc, #132]	; (1a0022d0 <uartProcessIRQ+0x90>)
1a00224c:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00224e:	6975      	ldr	r5, [r6, #20]
1a002250:	b2ed      	uxtb	r5, r5

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a002252:	f015 0f01 	tst.w	r5, #1
1a002256:	d019      	beq.n	1a00228c <uartProcessIRQ+0x4c>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a002258:	b930      	cbnz	r0, 1a002268 <uartProcessIRQ+0x28>
1a00225a:	4b1e      	ldr	r3, [pc, #120]	; (1a0022d4 <uartProcessIRQ+0x94>)
1a00225c:	681b      	ldr	r3, [r3, #0]
1a00225e:	b11b      	cbz	r3, 1a002268 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a002260:	4b1c      	ldr	r3, [pc, #112]	; (1a0022d4 <uartProcessIRQ+0x94>)
1a002262:	681b      	ldr	r3, [r3, #0]
1a002264:	2000      	movs	r0, #0
1a002266:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a002268:	2c03      	cmp	r4, #3
1a00226a:	d106      	bne.n	1a00227a <uartProcessIRQ+0x3a>
1a00226c:	4b1a      	ldr	r3, [pc, #104]	; (1a0022d8 <uartProcessIRQ+0x98>)
1a00226e:	681b      	ldr	r3, [r3, #0]
1a002270:	b11b      	cbz	r3, 1a00227a <uartProcessIRQ+0x3a>
         (*rxIsrCallbackUART2)(0);
1a002272:	4b19      	ldr	r3, [pc, #100]	; (1a0022d8 <uartProcessIRQ+0x98>)
1a002274:	681b      	ldr	r3, [r3, #0]
1a002276:	2000      	movs	r0, #0
1a002278:	4798      	blx	r3

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a00227a:	2c05      	cmp	r4, #5
1a00227c:	d106      	bne.n	1a00228c <uartProcessIRQ+0x4c>
1a00227e:	4b17      	ldr	r3, [pc, #92]	; (1a0022dc <uartProcessIRQ+0x9c>)
1a002280:	681b      	ldr	r3, [r3, #0]
1a002282:	b11b      	cbz	r3, 1a00228c <uartProcessIRQ+0x4c>
         (*rxIsrCallbackUART3)(0);
1a002284:	4b15      	ldr	r3, [pc, #84]	; (1a0022dc <uartProcessIRQ+0x9c>)
1a002286:	681b      	ldr	r3, [r3, #0]
1a002288:	2000      	movs	r0, #0
1a00228a:	4798      	blx	r3
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a00228c:	f015 0f20 	tst.w	r5, #32
1a002290:	d01d      	beq.n	1a0022ce <uartProcessIRQ+0x8e>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a002292:	6873      	ldr	r3, [r6, #4]
1a002294:	f013 0f02 	tst.w	r3, #2
1a002298:	d019      	beq.n	1a0022ce <uartProcessIRQ+0x8e>
       ( Chip_UART_GetIntsEnabled( lpcUarts[uart].uartAddr ) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a00229a:	b934      	cbnz	r4, 1a0022aa <uartProcessIRQ+0x6a>
1a00229c:	4b10      	ldr	r3, [pc, #64]	; (1a0022e0 <uartProcessIRQ+0xa0>)
1a00229e:	681b      	ldr	r3, [r3, #0]
1a0022a0:	b11b      	cbz	r3, 1a0022aa <uartProcessIRQ+0x6a>
         (*txIsrCallbackUART0)(0);
1a0022a2:	4b0f      	ldr	r3, [pc, #60]	; (1a0022e0 <uartProcessIRQ+0xa0>)
1a0022a4:	681b      	ldr	r3, [r3, #0]
1a0022a6:	2000      	movs	r0, #0
1a0022a8:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0022aa:	2c03      	cmp	r4, #3
1a0022ac:	d106      	bne.n	1a0022bc <uartProcessIRQ+0x7c>
1a0022ae:	4b0d      	ldr	r3, [pc, #52]	; (1a0022e4 <uartProcessIRQ+0xa4>)
1a0022b0:	681b      	ldr	r3, [r3, #0]
1a0022b2:	b11b      	cbz	r3, 1a0022bc <uartProcessIRQ+0x7c>
         (*txIsrCallbackUART2)(0);
1a0022b4:	4b0b      	ldr	r3, [pc, #44]	; (1a0022e4 <uartProcessIRQ+0xa4>)
1a0022b6:	681b      	ldr	r3, [r3, #0]
1a0022b8:	2000      	movs	r0, #0
1a0022ba:	4798      	blx	r3

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0022bc:	2c05      	cmp	r4, #5
1a0022be:	d106      	bne.n	1a0022ce <uartProcessIRQ+0x8e>
1a0022c0:	4b09      	ldr	r3, [pc, #36]	; (1a0022e8 <uartProcessIRQ+0xa8>)
1a0022c2:	681b      	ldr	r3, [r3, #0]
1a0022c4:	b11b      	cbz	r3, 1a0022ce <uartProcessIRQ+0x8e>
         (*txIsrCallbackUART3)(0);
1a0022c6:	4b08      	ldr	r3, [pc, #32]	; (1a0022e8 <uartProcessIRQ+0xa8>)
1a0022c8:	681b      	ldr	r3, [r3, #0]
1a0022ca:	2000      	movs	r0, #0
1a0022cc:	4798      	blx	r3
1a0022ce:	bd70      	pop	{r4, r5, r6, pc}
1a0022d0:	1a003b78 	.word	0x1a003b78
1a0022d4:	10002cf4 	.word	0x10002cf4
1a0022d8:	10002d04 	.word	0x10002d04
1a0022dc:	10002d08 	.word	0x10002d08
1a0022e0:	10002cf8 	.word	0x10002cf8
1a0022e4:	10002cfc 	.word	0x10002cfc
1a0022e8:	10002d00 	.word	0x10002d00

1a0022ec <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0022ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0022f0:	0080      	lsls	r0, r0, #2
1a0022f2:	4b03      	ldr	r3, [pc, #12]	; (1a002300 <uartTxReady+0x14>)
1a0022f4:	581b      	ldr	r3, [r3, r0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0022f6:	6958      	ldr	r0, [r3, #20]
}
1a0022f8:	f000 0020 	and.w	r0, r0, #32
1a0022fc:	4770      	bx	lr
1a0022fe:	bf00      	nop
1a002300:	1a003b78 	.word	0x1a003b78

1a002304 <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a002304:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002308:	0080      	lsls	r0, r0, #2
1a00230a:	4b02      	ldr	r3, [pc, #8]	; (1a002314 <uartTxWrite+0x10>)
1a00230c:	581b      	ldr	r3, [r3, r0]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a00230e:	6019      	str	r1, [r3, #0]
1a002310:	4770      	bx	lr
1a002312:	bf00      	nop
1a002314:	1a003b78 	.word	0x1a003b78

1a002318 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a002318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00231c:	4607      	mov	r7, r0
1a00231e:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a002320:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1a002390 <uartInit+0x78>
1a002324:	0044      	lsls	r4, r0, #1
1a002326:	1823      	adds	r3, r4, r0
1a002328:	009b      	lsls	r3, r3, #2
1a00232a:	eb08 0503 	add.w	r5, r8, r3
1a00232e:	f858 6003 	ldr.w	r6, [r8, r3]
1a002332:	4630      	mov	r0, r6
1a002334:	f000 fab0 	bl	1a002898 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a002338:	4630      	mov	r0, r6
1a00233a:	4649      	mov	r1, r9
1a00233c:	f000 fad6 	bl	1a0028ec <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a002340:	2307      	movs	r3, #7
1a002342:	60b3      	str	r3, [r6, #8]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002344:	6833      	ldr	r3, [r6, #0]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a002346:	2301      	movs	r3, #1
1a002348:	65f3      	str	r3, [r6, #92]	; 0x5c
   // Dummy read
   Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a00234a:	7929      	ldrb	r1, [r5, #4]
1a00234c:	796b      	ldrb	r3, [r5, #5]
1a00234e:	79aa      	ldrb	r2, [r5, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002350:	f042 0218 	orr.w	r2, r2, #24
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002354:	480c      	ldr	r0, [pc, #48]	; (1a002388 <uartInit+0x70>)
1a002356:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00235a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a00235e:	79ee      	ldrb	r6, [r5, #7]
1a002360:	7a2a      	ldrb	r2, [r5, #8]
1a002362:	7a69      	ldrb	r1, [r5, #9]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002364:	f041 01d0 	orr.w	r1, r1, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002368:	eb02 1346 	add.w	r3, r2, r6, lsl #5
1a00236c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a002370:	2f01      	cmp	r7, #1
1a002372:	d107      	bne.n	1a002384 <uartInit+0x6c>
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a002374:	4a05      	ldr	r2, [pc, #20]	; (1a00238c <uartInit+0x74>)
1a002376:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a002378:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00237c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00237e:	221a      	movs	r2, #26
1a002380:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
1a002384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a002388:	40086000 	.word	0x40086000
1a00238c:	40081000 	.word	0x40081000
1a002390:	1a003b78 	.word	0x1a003b78

1a002394 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a002394:	b538      	push	{r3, r4, r5, lr}
1a002396:	4604      	mov	r4, r0
1a002398:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a00239a:	4620      	mov	r0, r4
1a00239c:	f7ff ffa6 	bl	1a0022ec <uartTxReady>
1a0023a0:	2800      	cmp	r0, #0
1a0023a2:	d0fa      	beq.n	1a00239a <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a0023a4:	4620      	mov	r0, r4
1a0023a6:	4629      	mov	r1, r5
1a0023a8:	f7ff ffac 	bl	1a002304 <uartTxWrite>
1a0023ac:	bd38      	pop	{r3, r4, r5, pc}
1a0023ae:	bf00      	nop

1a0023b0 <uartWriteString>:
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a0023b0:	b538      	push	{r3, r4, r5, lr}
1a0023b2:	4605      	mov	r5, r0
1a0023b4:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a0023b6:	e003      	b.n	1a0023c0 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a0023b8:	4628      	mov	r0, r5
1a0023ba:	f7ff ffeb 	bl	1a002394 <uartWriteByte>
      str++;
1a0023be:	3401      	adds	r4, #1
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
   while( *str != 0 ) {
1a0023c0:	7821      	ldrb	r1, [r4, #0]
1a0023c2:	2900      	cmp	r1, #0
1a0023c4:	d1f8      	bne.n	1a0023b8 <uartWriteString+0x8>
      uartWriteByte( uart, (uint8_t)*str );
      str++;
   }
}
1a0023c6:	bd38      	pop	{r3, r4, r5, pc}

1a0023c8 <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a0023c8:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a0023ca:	2003      	movs	r0, #3
1a0023cc:	f7ff ff38 	bl	1a002240 <uartProcessIRQ>
1a0023d0:	bd08      	pop	{r3, pc}
1a0023d2:	bf00      	nop

1a0023d4 <UART3_IRQHandler>:
}

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a0023d4:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a0023d6:	2005      	movs	r0, #5
1a0023d8:	f7ff ff32 	bl	1a002240 <uartProcessIRQ>
1a0023dc:	bd08      	pop	{r3, pc}
1a0023de:	bf00      	nop

1a0023e0 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a0023e0:	e7fe      	b.n	1a0023e0 <errorOcurred>
1a0023e2:	bf00      	nop

1a0023e4 <doNothing>:
}

static void doNothing( void* ptr )
{
1a0023e4:	4770      	bx	lr
1a0023e6:	bf00      	nop

1a0023e8 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0023e8:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0023ea:	2400      	movs	r4, #0
1a0023ec:	e013      	b.n	1a002416 <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0023ee:	4b0b      	ldr	r3, [pc, #44]	; (1a00241c <TIMER0_IRQHandler+0x34>)
1a0023f0:	681a      	ldr	r2, [r3, #0]
1a0023f2:	f004 010f 	and.w	r1, r4, #15
1a0023f6:	2301      	movs	r3, #1
1a0023f8:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0023fa:	421a      	tst	r2, r3
1a0023fc:	d009      	beq.n	1a002412 <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0023fe:	4b08      	ldr	r3, [pc, #32]	; (1a002420 <TIMER0_IRQHandler+0x38>)
1a002400:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a002404:	2000      	movs	r0, #0
1a002406:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002408:	b262      	sxtb	r2, r4
1a00240a:	2301      	movs	r3, #1
1a00240c:	4093      	lsls	r3, r2
1a00240e:	4a03      	ldr	r2, [pc, #12]	; (1a00241c <TIMER0_IRQHandler+0x34>)
1a002410:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002412:	3401      	adds	r4, #1
1a002414:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002416:	2c03      	cmp	r4, #3
1a002418:	d9e9      	bls.n	1a0023ee <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a00241a:	bd10      	pop	{r4, pc}
1a00241c:	40084000 	.word	0x40084000
1a002420:	1000000c 	.word	0x1000000c

1a002424 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a002424:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002426:	2400      	movs	r4, #0
1a002428:	e014      	b.n	1a002454 <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00242a:	4b0c      	ldr	r3, [pc, #48]	; (1a00245c <TIMER1_IRQHandler+0x38>)
1a00242c:	681a      	ldr	r2, [r3, #0]
1a00242e:	f004 010f 	and.w	r1, r4, #15
1a002432:	2301      	movs	r3, #1
1a002434:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a002436:	421a      	tst	r2, r3
1a002438:	d00a      	beq.n	1a002450 <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00243a:	1d23      	adds	r3, r4, #4
1a00243c:	4a08      	ldr	r2, [pc, #32]	; (1a002460 <TIMER1_IRQHandler+0x3c>)
1a00243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002442:	2000      	movs	r0, #0
1a002444:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002446:	b262      	sxtb	r2, r4
1a002448:	2301      	movs	r3, #1
1a00244a:	4093      	lsls	r3, r2
1a00244c:	4a03      	ldr	r2, [pc, #12]	; (1a00245c <TIMER1_IRQHandler+0x38>)
1a00244e:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002450:	3401      	adds	r4, #1
1a002452:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002454:	2c03      	cmp	r4, #3
1a002456:	d9e8      	bls.n	1a00242a <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a002458:	bd10      	pop	{r4, pc}
1a00245a:	bf00      	nop
1a00245c:	40085000 	.word	0x40085000
1a002460:	1000000c 	.word	0x1000000c

1a002464 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a002464:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002466:	2400      	movs	r4, #0
1a002468:	e015      	b.n	1a002496 <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00246a:	4b0c      	ldr	r3, [pc, #48]	; (1a00249c <TIMER2_IRQHandler+0x38>)
1a00246c:	681a      	ldr	r2, [r3, #0]
1a00246e:	f004 010f 	and.w	r1, r4, #15
1a002472:	2301      	movs	r3, #1
1a002474:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a002476:	421a      	tst	r2, r3
1a002478:	d00b      	beq.n	1a002492 <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00247a:	f104 0308 	add.w	r3, r4, #8
1a00247e:	4a08      	ldr	r2, [pc, #32]	; (1a0024a0 <TIMER2_IRQHandler+0x3c>)
1a002480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002484:	2000      	movs	r0, #0
1a002486:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002488:	b262      	sxtb	r2, r4
1a00248a:	2301      	movs	r3, #1
1a00248c:	4093      	lsls	r3, r2
1a00248e:	4a03      	ldr	r2, [pc, #12]	; (1a00249c <TIMER2_IRQHandler+0x38>)
1a002490:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002492:	3401      	adds	r4, #1
1a002494:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002496:	2c03      	cmp	r4, #3
1a002498:	d9e7      	bls.n	1a00246a <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a00249a:	bd10      	pop	{r4, pc}
1a00249c:	400c3000 	.word	0x400c3000
1a0024a0:	1000000c 	.word	0x1000000c

1a0024a4 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0024a4:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0024a6:	2400      	movs	r4, #0
1a0024a8:	e015      	b.n	1a0024d6 <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0024aa:	4b0c      	ldr	r3, [pc, #48]	; (1a0024dc <TIMER3_IRQHandler+0x38>)
1a0024ac:	681a      	ldr	r2, [r3, #0]
1a0024ae:	f004 010f 	and.w	r1, r4, #15
1a0024b2:	2301      	movs	r3, #1
1a0024b4:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0024b6:	421a      	tst	r2, r3
1a0024b8:	d00b      	beq.n	1a0024d2 <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0024ba:	f104 030c 	add.w	r3, r4, #12
1a0024be:	4a08      	ldr	r2, [pc, #32]	; (1a0024e0 <TIMER3_IRQHandler+0x3c>)
1a0024c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0024c4:	2000      	movs	r0, #0
1a0024c6:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0024c8:	b262      	sxtb	r2, r4
1a0024ca:	2301      	movs	r3, #1
1a0024cc:	4093      	lsls	r3, r2
1a0024ce:	4a03      	ldr	r2, [pc, #12]	; (1a0024dc <TIMER3_IRQHandler+0x38>)
1a0024d0:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0024d2:	3401      	adds	r4, #1
1a0024d4:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0024d6:	2c03      	cmp	r4, #3
1a0024d8:	d9e7      	bls.n	1a0024aa <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0024da:	bd10      	pop	{r4, pc}
1a0024dc:	400c4000 	.word	0x400c4000
1a0024e0:	1000000c 	.word	0x1000000c

1a0024e4 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a0024e4:	b508      	push	{r3, lr}
   *printer = uart;
1a0024e6:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a0024e8:	4608      	mov	r0, r1
1a0024ea:	4611      	mov	r1, r2
1a0024ec:	f7ff ff14 	bl	1a002318 <uartInit>
1a0024f0:	bd08      	pop	{r3, pc}
1a0024f2:	bf00      	nop

1a0024f4 <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a0024f4:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a0024f6:	f7ff ff5b 	bl	1a0023b0 <uartWriteString>
1a0024fa:	bd08      	pop	{r3, pc}

1a0024fc <printEnter>:
}

void printEnter( print_t printer )
{
1a0024fc:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a0024fe:	4902      	ldr	r1, [pc, #8]	; (1a002508 <printEnter+0xc>)
1a002500:	f7ff ff56 	bl	1a0023b0 <uartWriteString>
1a002504:	bd08      	pop	{r3, pc}
1a002506:	bf00      	nop
1a002508:	1a003bc0 	.word	0x1a003bc0

1a00250c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a00250c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00250e:	f000 fae1 	bl	1a002ad4 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a002512:	4b3a      	ldr	r3, [pc, #232]	; (1a0025fc <boardInit+0xf0>)
1a002514:	6818      	ldr	r0, [r3, #0]
1a002516:	f7ff fcff 	bl	1a001f18 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a00251a:	2001      	movs	r0, #1
1a00251c:	2100      	movs	r1, #0
1a00251e:	f7ff fe69 	bl	1a0021f4 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a002522:	2000      	movs	r0, #0
1a002524:	2105      	movs	r1, #5
1a002526:	f7ff fd1b 	bl	1a001f60 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a00252a:	2024      	movs	r0, #36	; 0x24
1a00252c:	2100      	movs	r1, #0
1a00252e:	f7ff fd17 	bl	1a001f60 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a002532:	2025      	movs	r0, #37	; 0x25
1a002534:	2100      	movs	r1, #0
1a002536:	f7ff fd13 	bl	1a001f60 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a00253a:	2026      	movs	r0, #38	; 0x26
1a00253c:	2100      	movs	r1, #0
1a00253e:	f7ff fd0f 	bl	1a001f60 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a002542:	2027      	movs	r0, #39	; 0x27
1a002544:	2100      	movs	r1, #0
1a002546:	f7ff fd0b 	bl	1a001f60 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00254a:	2028      	movs	r0, #40	; 0x28
1a00254c:	2101      	movs	r1, #1
1a00254e:	f7ff fd07 	bl	1a001f60 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a002552:	2029      	movs	r0, #41	; 0x29
1a002554:	2101      	movs	r1, #1
1a002556:	f7ff fd03 	bl	1a001f60 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a00255a:	202a      	movs	r0, #42	; 0x2a
1a00255c:	2101      	movs	r1, #1
1a00255e:	f7ff fcff 	bl	1a001f60 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a002562:	202b      	movs	r0, #43	; 0x2b
1a002564:	2101      	movs	r1, #1
1a002566:	f7ff fcfb 	bl	1a001f60 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00256a:	202c      	movs	r0, #44	; 0x2c
1a00256c:	2101      	movs	r1, #1
1a00256e:	f7ff fcf7 	bl	1a001f60 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a002572:	202d      	movs	r0, #45	; 0x2d
1a002574:	2101      	movs	r1, #1
1a002576:	f7ff fcf3 	bl	1a001f60 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00257a:	202e      	movs	r0, #46	; 0x2e
1a00257c:	2100      	movs	r1, #0
1a00257e:	f7ff fcef 	bl	1a001f60 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a002582:	202f      	movs	r0, #47	; 0x2f
1a002584:	2100      	movs	r1, #0
1a002586:	f7ff fceb 	bl	1a001f60 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a00258a:	2030      	movs	r0, #48	; 0x30
1a00258c:	2100      	movs	r1, #0
1a00258e:	f7ff fce7 	bl	1a001f60 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a002592:	2031      	movs	r0, #49	; 0x31
1a002594:	2100      	movs	r1, #0
1a002596:	f7ff fce3 	bl	1a001f60 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a00259a:	2032      	movs	r0, #50	; 0x32
1a00259c:	2100      	movs	r1, #0
1a00259e:	f7ff fcdf 	bl	1a001f60 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a0025a2:	2033      	movs	r0, #51	; 0x33
1a0025a4:	2100      	movs	r1, #0
1a0025a6:	f7ff fcdb 	bl	1a001f60 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a0025aa:	2034      	movs	r0, #52	; 0x34
1a0025ac:	2100      	movs	r1, #0
1a0025ae:	f7ff fcd7 	bl	1a001f60 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a0025b2:	2035      	movs	r0, #53	; 0x35
1a0025b4:	2100      	movs	r1, #0
1a0025b6:	f7ff fcd3 	bl	1a001f60 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a0025ba:	2036      	movs	r0, #54	; 0x36
1a0025bc:	2101      	movs	r1, #1
1a0025be:	f7ff fccf 	bl	1a001f60 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a0025c2:	2037      	movs	r0, #55	; 0x37
1a0025c4:	2101      	movs	r1, #1
1a0025c6:	f7ff fccb 	bl	1a001f60 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a0025ca:	2038      	movs	r0, #56	; 0x38
1a0025cc:	2101      	movs	r1, #1
1a0025ce:	f7ff fcc7 	bl	1a001f60 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a0025d2:	2039      	movs	r0, #57	; 0x39
1a0025d4:	2101      	movs	r1, #1
1a0025d6:	f7ff fcc3 	bl	1a001f60 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a0025da:	203a      	movs	r0, #58	; 0x3a
1a0025dc:	2101      	movs	r1, #1
1a0025de:	f7ff fcbf 	bl	1a001f60 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a0025e2:	203b      	movs	r0, #59	; 0x3b
1a0025e4:	2101      	movs	r1, #1
1a0025e6:	f7ff fcbb 	bl	1a001f60 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a0025ea:	203c      	movs	r0, #60	; 0x3c
1a0025ec:	2101      	movs	r1, #1
1a0025ee:	f7ff fcb7 	bl	1a001f60 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a0025f2:	203d      	movs	r0, #61	; 0x3d
1a0025f4:	2101      	movs	r1, #1
1a0025f6:	f7ff fcb3 	bl	1a001f60 <gpioInit>
1a0025fa:	bd08      	pop	{r3, pc}
1a0025fc:	10002d78 	.word	0x10002d78

1a002600 <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a002600:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002602:	2200      	movs	r2, #0
1a002604:	e014      	b.n	1a002630 <Board_LED_Init+0x30>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002606:	4b0c      	ldr	r3, [pc, #48]	; (1a002638 <Board_LED_Init+0x38>)
1a002608:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a00260c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a002610:	7859      	ldrb	r1, [r3, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002612:	480a      	ldr	r0, [pc, #40]	; (1a00263c <Board_LED_Init+0x3c>)
1a002614:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a002618:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a00261c:	2301      	movs	r3, #1
1a00261e:	408b      	lsls	r3, r1
1a002620:	4333      	orrs	r3, r6
1a002622:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a002626:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a00262a:	2300      	movs	r3, #0
1a00262c:	5443      	strb	r3, [r0, r1]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00262e:	3201      	adds	r2, #1
1a002630:	2a05      	cmp	r2, #5
1a002632:	d9e8      	bls.n	1a002606 <Board_LED_Init+0x6>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a002634:	bc70      	pop	{r4, r5, r6}
1a002636:	4770      	bx	lr
1a002638:	1a003be8 	.word	0x1a003be8
1a00263c:	400f4000 	.word	0x400f4000

1a002640 <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a002640:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002642:	2300      	movs	r3, #0
1a002644:	e011      	b.n	1a00266a <Board_TEC_Init+0x2a>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002646:	490b      	ldr	r1, [pc, #44]	; (1a002674 <Board_TEC_Init+0x34>)
1a002648:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00264c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002650:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002652:	4c09      	ldr	r4, [pc, #36]	; (1a002678 <Board_TEC_Init+0x38>)
1a002654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002658:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a00265c:	2101      	movs	r1, #1
1a00265e:	40a9      	lsls	r1, r5
1a002660:	ea20 0101 	bic.w	r1, r0, r1
1a002664:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002668:	3301      	adds	r3, #1
1a00266a:	2b03      	cmp	r3, #3
1a00266c:	d9eb      	bls.n	1a002646 <Board_TEC_Init+0x6>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a00266e:	bc30      	pop	{r4, r5}
1a002670:	4770      	bx	lr
1a002672:	bf00      	nop
1a002674:	1a003be0 	.word	0x1a003be0
1a002678:	400f4000 	.word	0x400f4000

1a00267c <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a00267c:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00267e:	2300      	movs	r3, #0
1a002680:	e011      	b.n	1a0026a6 <Board_GPIO_Init+0x2a>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002682:	490b      	ldr	r1, [pc, #44]	; (1a0026b0 <Board_GPIO_Init+0x34>)
1a002684:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002688:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00268c:	784d      	ldrb	r5, [r1, #1]
1a00268e:	4c09      	ldr	r4, [pc, #36]	; (1a0026b4 <Board_GPIO_Init+0x38>)
1a002690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002694:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a002698:	2101      	movs	r1, #1
1a00269a:	40a9      	lsls	r1, r5
1a00269c:	ea20 0101 	bic.w	r1, r0, r1
1a0026a0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0026a4:	3301      	adds	r3, #1
1a0026a6:	2b08      	cmp	r3, #8
1a0026a8:	d9eb      	bls.n	1a002682 <Board_GPIO_Init+0x6>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a0026aa:	bc30      	pop	{r4, r5}
1a0026ac:	4770      	bx	lr
1a0026ae:	bf00      	nop
1a0026b0:	1a003bc4 	.word	0x1a003bc4
1a0026b4:	400f4000 	.word	0x400f4000

1a0026b8 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a0026b8:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a0026ba:	4c0b      	ldr	r4, [pc, #44]	; (1a0026e8 <Board_SPI_Init+0x30>)
1a0026bc:	4620      	mov	r0, r4
1a0026be:	f000 fddf 	bl	1a003280 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0026c2:	6863      	ldr	r3, [r4, #4]
1a0026c4:	f023 0304 	bic.w	r3, r3, #4
1a0026c8:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0026ca:	6823      	ldr	r3, [r4, #0]
1a0026cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0026d0:	f043 0307 	orr.w	r3, r3, #7
1a0026d4:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0026d6:	4620      	mov	r0, r4
1a0026d8:	4904      	ldr	r1, [pc, #16]	; (1a0026ec <Board_SPI_Init+0x34>)
1a0026da:	f000 fdb1 	bl	1a003240 <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0026de:	6863      	ldr	r3, [r4, #4]
1a0026e0:	f043 0302 	orr.w	r3, r3, #2
1a0026e4:	6063      	str	r3, [r4, #4]
1a0026e6:	bd10      	pop	{r4, pc}
1a0026e8:	400c5000 	.word	0x400c5000
1a0026ec:	000186a0 	.word	0x000186a0

1a0026f0 <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a0026f0:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a0026f2:	2000      	movs	r0, #0
1a0026f4:	f000 fdf0 	bl	1a0032d8 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0026f8:	f640 0208 	movw	r2, #2056	; 0x808
1a0026fc:	4b03      	ldr	r3, [pc, #12]	; (1a00270c <Board_I2C_Init+0x1c>)
1a0026fe:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002702:	2000      	movs	r0, #0
1a002704:	4902      	ldr	r1, [pc, #8]	; (1a002710 <Board_I2C_Init+0x20>)
1a002706:	f000 fdf9 	bl	1a0032fc <Chip_I2C_SetClockRate>
1a00270a:	bd08      	pop	{r3, pc}
1a00270c:	40086000 	.word	0x40086000
1a002710:	000f4240 	.word	0x000f4240

1a002714 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002714:	b510      	push	{r4, lr}
1a002716:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a002718:	4c08      	ldr	r4, [pc, #32]	; (1a00273c <Board_ADC_Init+0x28>)
1a00271a:	4620      	mov	r0, r4
1a00271c:	4669      	mov	r1, sp
1a00271e:	f000 f999 	bl	1a002a54 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002722:	4620      	mov	r0, r4
1a002724:	4669      	mov	r1, sp
1a002726:	4a06      	ldr	r2, [pc, #24]	; (1a002740 <Board_ADC_Init+0x2c>)
1a002728:	f000 f9b4 	bl	1a002a94 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a00272c:	4620      	mov	r0, r4
1a00272e:	4669      	mov	r1, sp
1a002730:	2200      	movs	r2, #0
1a002732:	f000 f9c9 	bl	1a002ac8 <Chip_ADC_SetResolution>
}
1a002736:	b002      	add	sp, #8
1a002738:	bd10      	pop	{r4, pc}
1a00273a:	bf00      	nop
1a00273c:	400e3000 	.word	0x400e3000
1a002740:	00061a80 	.word	0x00061a80

1a002744 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002744:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a002746:	4c07      	ldr	r4, [pc, #28]	; (1a002764 <Board_Debug_Init+0x20>)
1a002748:	4620      	mov	r0, r4
1a00274a:	f000 f8a5 	bl	1a002898 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00274e:	4620      	mov	r0, r4
1a002750:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002754:	f000 f8ea 	bl	1a00292c <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002758:	2303      	movs	r3, #3
1a00275a:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a00275c:	2301      	movs	r3, #1
1a00275e:	65e3      	str	r3, [r4, #92]	; 0x5c
1a002760:	bd10      	pop	{r4, pc}
1a002762:	bf00      	nop
1a002764:	400c1000 	.word	0x400c1000

1a002768 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002768:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00276a:	f7ff ffeb 	bl	1a002744 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00276e:	480b      	ldr	r0, [pc, #44]	; (1a00279c <Board_Init+0x34>)
1a002770:	f000 fd44 	bl	1a0031fc <Chip_GPIO_Init>

   Board_LED_Init();
1a002774:	f7ff ff44 	bl	1a002600 <Board_LED_Init>
   Board_TEC_Init();
1a002778:	f7ff ff62 	bl	1a002640 <Board_TEC_Init>
   Board_SPI_Init();
1a00277c:	f7ff ff9c 	bl	1a0026b8 <Board_SPI_Init>
   Board_GPIO_Init();
1a002780:	f7ff ff7c 	bl	1a00267c <Board_GPIO_Init>
   Board_I2C_Init();
1a002784:	f7ff ffb4 	bl	1a0026f0 <Board_I2C_Init>
   Board_ADC_Init();
1a002788:	f7ff ffc4 	bl	1a002714 <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a00278c:	4a04      	ldr	r2, [pc, #16]	; (1a0027a0 <Board_Init+0x38>)
1a00278e:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a002792:	f043 0304 	orr.w	r3, r3, #4
1a002796:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a00279a:	bd08      	pop	{r3, pc}
1a00279c:	400f4000 	.word	0x400f4000
1a0027a0:	40043000 	.word	0x40043000

1a0027a4 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a0027a4:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a0027a6:	4b04      	ldr	r3, [pc, #16]	; (1a0027b8 <SystemInit+0x14>)
1a0027a8:	4a04      	ldr	r2, [pc, #16]	; (1a0027bc <SystemInit+0x18>)
1a0027aa:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a0027ac:	f000 fcfa 	bl	1a0031a4 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a0027b0:	f000 f856 	bl	1a002860 <Board_SystemInit>
1a0027b4:	bd08      	pop	{r3, pc}
1a0027b6:	bf00      	nop
1a0027b8:	e000ed08 	.word	0xe000ed08
1a0027bc:	1a000000 	.word	0x1a000000

1a0027c0 <Board_SetupMuxing>:
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a0027c0:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0027c2:	2300      	movs	r3, #0
1a0027c4:	e00c      	b.n	1a0027e0 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0027c6:	4a09      	ldr	r2, [pc, #36]	; (1a0027ec <Board_SetupMuxing+0x2c>)
1a0027c8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0027cc:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0027d0:	784a      	ldrb	r2, [r1, #1]
1a0027d2:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0027d4:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0027d8:	4905      	ldr	r1, [pc, #20]	; (1a0027f0 <Board_SetupMuxing+0x30>)
1a0027da:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0027de:	3301      	adds	r3, #1
1a0027e0:	2b25      	cmp	r3, #37	; 0x25
1a0027e2:	d9f0      	bls.n	1a0027c6 <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0027e4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0027e8:	4770      	bx	lr
1a0027ea:	bf00      	nop
1a0027ec:	1a003c00 	.word	0x1a003c00
1a0027f0:	40086000 	.word	0x40086000

1a0027f4 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0027f4:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0027f6:	4a17      	ldr	r2, [pc, #92]	; (1a002854 <Board_SetupClocking+0x60>)
1a0027f8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0027fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002800:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002804:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002808:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00280c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002810:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002814:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002818:	2006      	movs	r0, #6
1a00281a:	490f      	ldr	r1, [pc, #60]	; (1a002858 <Board_SetupClocking+0x64>)
1a00281c:	2201      	movs	r2, #1
1a00281e:	f000 fc19 	bl	1a003054 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002822:	2400      	movs	r4, #0
1a002824:	e00a      	b.n	1a00283c <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002826:	4a0d      	ldr	r2, [pc, #52]	; (1a00285c <Board_SetupClocking+0x68>)
1a002828:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a00282c:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a002830:	7859      	ldrb	r1, [r3, #1]
1a002832:	789a      	ldrb	r2, [r3, #2]
1a002834:	78db      	ldrb	r3, [r3, #3]
1a002836:	f000 fb75 	bl	1a002f24 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00283a:	3401      	adds	r4, #1
1a00283c:	2c02      	cmp	r4, #2
1a00283e:	d9f2      	bls.n	1a002826 <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002840:	4b04      	ldr	r3, [pc, #16]	; (1a002854 <Board_SetupClocking+0x60>)
1a002842:	685a      	ldr	r2, [r3, #4]
1a002844:	f022 020c 	bic.w	r2, r2, #12
1a002848:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00284a:	685a      	ldr	r2, [r3, #4]
1a00284c:	f042 0203 	orr.w	r2, r2, #3
1a002850:	605a      	str	r2, [r3, #4]
1a002852:	bd10      	pop	{r4, pc}
1a002854:	40043000 	.word	0x40043000
1a002858:	0c28cb00 	.word	0x0c28cb00
1a00285c:	1a003bf4 	.word	0x1a003bf4

1a002860 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002860:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002862:	f7ff ffad 	bl	1a0027c0 <Board_SetupMuxing>
    Board_SetupClocking();
1a002866:	f7ff ffc5 	bl	1a0027f4 <Board_SetupClocking>
1a00286a:	bd08      	pop	{r3, pc}

1a00286c <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a00286c:	4b09      	ldr	r3, [pc, #36]	; (1a002894 <Chip_UART_GetIndex+0x28>)
1a00286e:	4298      	cmp	r0, r3
1a002870:	d009      	beq.n	1a002886 <Chip_UART_GetIndex+0x1a>
1a002872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002876:	4298      	cmp	r0, r3
1a002878:	d007      	beq.n	1a00288a <Chip_UART_GetIndex+0x1e>
1a00287a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00287e:	4298      	cmp	r0, r3
1a002880:	d005      	beq.n	1a00288e <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002882:	2000      	movs	r0, #0
1a002884:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002886:	2002      	movs	r0, #2
1a002888:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00288a:	2003      	movs	r0, #3
1a00288c:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a00288e:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a002890:	4770      	bx	lr
1a002892:	bf00      	nop
1a002894:	400c1000 	.word	0x400c1000

1a002898 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002898:	b510      	push	{r4, lr}
1a00289a:	b082      	sub	sp, #8
1a00289c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00289e:	f7ff ffe5 	bl	1a00286c <Chip_UART_GetIndex>
1a0028a2:	4b10      	ldr	r3, [pc, #64]	; (1a0028e4 <Chip_UART_Init+0x4c>)
1a0028a4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0028a8:	2101      	movs	r1, #1
1a0028aa:	460a      	mov	r2, r1
1a0028ac:	460b      	mov	r3, r1
1a0028ae:	f000 fb73 	bl	1a002f98 <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a0028b2:	2307      	movs	r3, #7
1a0028b4:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a0028b6:	2300      	movs	r3, #0
1a0028b8:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0028ba:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0028bc:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0028be:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0028c0:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0028c2:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0028c4:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0028c6:	4b08      	ldr	r3, [pc, #32]	; (1a0028e8 <Chip_UART_Init+0x50>)
1a0028c8:	429c      	cmp	r4, r3
1a0028ca:	d103      	bne.n	1a0028d4 <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a0028cc:	2300      	movs	r3, #0
1a0028ce:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a0028d0:	69a3      	ldr	r3, [r4, #24]
1a0028d2:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0028d4:	2303      	movs	r3, #3
1a0028d6:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0028d8:	2310      	movs	r3, #16
1a0028da:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0028dc:	9b01      	ldr	r3, [sp, #4]
}
1a0028de:	b002      	add	sp, #8
1a0028e0:	bd10      	pop	{r4, pc}
1a0028e2:	bf00      	nop
1a0028e4:	1a003ca0 	.word	0x1a003ca0
1a0028e8:	40082000 	.word	0x40082000

1a0028ec <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0028ec:	b538      	push	{r3, r4, r5, lr}
1a0028ee:	4605      	mov	r5, r0
1a0028f0:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0028f2:	f7ff ffbb 	bl	1a00286c <Chip_UART_GetIndex>
1a0028f6:	4b0c      	ldr	r3, [pc, #48]	; (1a002928 <Chip_UART_SetBaud+0x3c>)
1a0028f8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0028fc:	f000 fb84 	bl	1a003008 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002900:	0124      	lsls	r4, r4, #4
1a002902:	fbb0 f3f4 	udiv	r3, r0, r4
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002906:	68ea      	ldr	r2, [r5, #12]
1a002908:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00290c:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a00290e:	b2da      	uxtb	r2, r3
1a002910:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a002912:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a002916:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002918:	68ea      	ldr	r2, [r5, #12]
1a00291a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a00291e:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002920:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002924:	0900      	lsrs	r0, r0, #4
1a002926:	bd38      	pop	{r3, r4, r5, pc}
1a002928:	1a003c98 	.word	0x1a003c98

1a00292c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a00292c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002930:	b083      	sub	sp, #12
1a002932:	4683      	mov	fp, r0
1a002934:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002936:	f7ff ff99 	bl	1a00286c <Chip_UART_GetIndex>
1a00293a:	4b34      	ldr	r3, [pc, #208]	; (1a002a0c <Chip_UART_SetBaudFDR+0xe0>)
1a00293c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002940:	f000 fb62 	bl	1a003008 <Chip_Clock_GetRate>
1a002944:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a002946:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00294a:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a00294c:	2300      	movs	r3, #0
1a00294e:	9301      	str	r3, [sp, #4]
1a002950:	46a2      	mov	sl, r4
1a002952:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002954:	e029      	b.n	1a0029aa <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002956:	2300      	movs	r3, #0
1a002958:	0932      	lsrs	r2, r6, #4
1a00295a:	0730      	lsls	r0, r6, #28
1a00295c:	fba0 0104 	umull	r0, r1, r0, r4
1a002960:	fb04 1102 	mla	r1, r4, r2, r1
1a002964:	1962      	adds	r2, r4, r5
1a002966:	fb08 f202 	mul.w	r2, r8, r2
1a00296a:	f000 fd23 	bl	1a0033b4 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a00296e:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a002970:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a002972:	2800      	cmp	r0, #0
1a002974:	da01      	bge.n	1a00297a <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a002976:	4243      	negs	r3, r0
				div ++;
1a002978:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00297a:	429f      	cmp	r7, r3
1a00297c:	d30a      	bcc.n	1a002994 <Chip_UART_SetBaudFDR+0x68>
1a00297e:	b14a      	cbz	r2, 1a002994 <Chip_UART_SetBaudFDR+0x68>
1a002980:	0c11      	lsrs	r1, r2, #16
1a002982:	d107      	bne.n	1a002994 <Chip_UART_SetBaudFDR+0x68>
1a002984:	2a02      	cmp	r2, #2
1a002986:	d800      	bhi.n	1a00298a <Chip_UART_SetBaudFDR+0x5e>
1a002988:	b925      	cbnz	r5, 1a002994 <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a00298a:	b14b      	cbz	r3, 1a0029a0 <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a00298c:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a00298e:	9501      	str	r5, [sp, #4]
			sm = m;
1a002990:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a002992:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a002994:	3501      	adds	r5, #1
1a002996:	e000      	b.n	1a00299a <Chip_UART_SetBaudFDR+0x6e>
1a002998:	2500      	movs	r5, #0
1a00299a:	42a5      	cmp	r5, r4
1a00299c:	d3db      	bcc.n	1a002956 <Chip_UART_SetBaudFDR+0x2a>
1a00299e:	e003      	b.n	1a0029a8 <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a0029a0:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a0029a2:	9501      	str	r5, [sp, #4]
			sm = m;
1a0029a4:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a0029a6:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0029a8:	3401      	adds	r4, #1
1a0029aa:	b10f      	cbz	r7, 1a0029b0 <Chip_UART_SetBaudFDR+0x84>
1a0029ac:	2c0f      	cmp	r4, #15
1a0029ae:	d9f3      	bls.n	1a002998 <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0029b0:	f1b9 0f00 	cmp.w	r9, #0
1a0029b4:	d026      	beq.n	1a002a04 <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0029b6:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0029ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0029be:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0029c2:	fa5f f389 	uxtb.w	r3, r9
1a0029c6:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a0029ca:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0029ce:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0029d2:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0029d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0029da:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0029de:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0029e2:	b2da      	uxtb	r2, r3
1a0029e4:	9901      	ldr	r1, [sp, #4]
1a0029e6:	f001 030f 	and.w	r3, r1, #15
1a0029ea:	4313      	orrs	r3, r2
1a0029ec:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0029f0:	0933      	lsrs	r3, r6, #4
1a0029f2:	fb0a f303 	mul.w	r3, sl, r3
1a0029f6:	eb0a 0001 	add.w	r0, sl, r1
1a0029fa:	fb09 f000 	mul.w	r0, r9, r0
1a0029fe:	fbb3 f0f0 	udiv	r0, r3, r0
1a002a02:	e000      	b.n	1a002a06 <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a002a04:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a002a06:	b003      	add	sp, #12
1a002a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002a0c:	1a003c98 	.word	0x1a003c98

1a002a10 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002a10:	4b03      	ldr	r3, [pc, #12]	; (1a002a20 <Chip_ADC_GetClockIndex+0x10>)
1a002a12:	4298      	cmp	r0, r3
1a002a14:	d101      	bne.n	1a002a1a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
1a002a16:	2004      	movs	r0, #4
1a002a18:	4770      	bx	lr
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002a1a:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002a1c:	4770      	bx	lr
1a002a1e:	bf00      	nop
1a002a20:	400e4000 	.word	0x400e4000

1a002a24 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002a24:	b570      	push	{r4, r5, r6, lr}
1a002a26:	460d      	mov	r5, r1
1a002a28:	4614      	mov	r4, r2
1a002a2a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002a2c:	f7ff fff0 	bl	1a002a10 <Chip_ADC_GetClockIndex>
1a002a30:	f000 faea 	bl	1a003008 <Chip_Clock_GetRate>
	if (burstMode) {
1a002a34:	b115      	cbz	r5, 1a002a3c <getClkDiv+0x18>
		fullAdcRate = adcRate * clks;
1a002a36:	fb04 f406 	mul.w	r4, r4, r6
1a002a3a:	e003      	b.n	1a002a44 <getClkDiv+0x20>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002a3c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002a40:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002a44:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002a48:	0064      	lsls	r4, r4, #1
1a002a4a:	fbb0 f4f4 	udiv	r4, r0, r4
1a002a4e:	1e60      	subs	r0, r4, #1
	return div;
}
1a002a50:	b2c0      	uxtb	r0, r0
1a002a52:	bd70      	pop	{r4, r5, r6, pc}

1a002a54 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002a54:	b538      	push	{r3, r4, r5, lr}
1a002a56:	4605      	mov	r5, r0
1a002a58:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002a5a:	f7ff ffd9 	bl	1a002a10 <Chip_ADC_GetClockIndex>
1a002a5e:	2101      	movs	r1, #1
1a002a60:	460a      	mov	r2, r1
1a002a62:	460b      	mov	r3, r1
1a002a64:	f000 fa98 	bl	1a002f98 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002a68:	2100      	movs	r1, #0
1a002a6a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002a6c:	4a08      	ldr	r2, [pc, #32]	; (1a002a90 <Chip_ADC_Init+0x3c>)
1a002a6e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002a70:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002a72:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002a74:	4628      	mov	r0, r5
1a002a76:	230b      	movs	r3, #11
1a002a78:	f7ff ffd4 	bl	1a002a24 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002a7c:	0200      	lsls	r0, r0, #8
1a002a7e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002a82:	7920      	ldrb	r0, [r4, #4]
1a002a84:	f000 0007 	and.w	r0, r0, #7
1a002a88:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
	pADC->CR = cr;
1a002a8c:	6028      	str	r0, [r5, #0]
1a002a8e:	bd38      	pop	{r3, r4, r5, pc}
1a002a90:	00061a80 	.word	0x00061a80

1a002a94 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002a94:	b570      	push	{r4, r5, r6, lr}
1a002a96:	4606      	mov	r6, r0
1a002a98:	460d      	mov	r5, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002a9a:	6804      	ldr	r4, [r0, #0]
1a002a9c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002aa0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002aa4:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002aa6:	790b      	ldrb	r3, [r1, #4]
1a002aa8:	f1c3 030b 	rsb	r3, r3, #11
1a002aac:	7949      	ldrb	r1, [r1, #5]
1a002aae:	b2db      	uxtb	r3, r3
1a002ab0:	f7ff ffb8 	bl	1a002a24 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002ab4:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002ab8:	792c      	ldrb	r4, [r5, #4]
1a002aba:	f004 0407 	and.w	r4, r4, #7
1a002abe:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	pADC->CR = cr;
1a002ac2:	6030      	str	r0, [r6, #0]
1a002ac4:	bd70      	pop	{r4, r5, r6, pc}
1a002ac6:	bf00      	nop

1a002ac8 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002ac8:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002aca:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002acc:	680a      	ldr	r2, [r1, #0]
1a002ace:	f7ff ffe1 	bl	1a002a94 <Chip_ADC_SetSampleRate>
1a002ad2:	bd08      	pop	{r3, pc}

1a002ad4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002ad4:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002ad6:	2069      	movs	r0, #105	; 0x69
1a002ad8:	f000 fa96 	bl	1a003008 <Chip_Clock_GetRate>
1a002adc:	4b01      	ldr	r3, [pc, #4]	; (1a002ae4 <SystemCoreClockUpdate+0x10>)
1a002ade:	6018      	str	r0, [r3, #0]
1a002ae0:	bd08      	pop	{r3, pc}
1a002ae2:	bf00      	nop
1a002ae4:	10002d78 	.word	0x10002d78

1a002ae8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002ae8:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002aea:	680b      	ldr	r3, [r1, #0]
1a002aec:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002af0:	d002      	beq.n	1a002af8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002af6:	600b      	str	r3, [r1, #0]
1a002af8:	4686      	mov	lr, r0
1a002afa:	2601      	movs	r6, #1
1a002afc:	e041      	b.n	1a002b82 <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a002afe:	680d      	ldr	r5, [r1, #0]
1a002b00:	f015 0f40 	tst.w	r5, #64	; 0x40
1a002b04:	d008      	beq.n	1a002b18 <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002b06:	1c7b      	adds	r3, r7, #1
1a002b08:	fa04 f203 	lsl.w	r2, r4, r3
1a002b0c:	694b      	ldr	r3, [r1, #20]
1a002b0e:	fb03 f302 	mul.w	r3, r3, r2
1a002b12:	fbb3 f3f6 	udiv	r3, r3, r6
1a002b16:	e004      	b.n	1a002b22 <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a002b18:	694b      	ldr	r3, [r1, #20]
1a002b1a:	fb04 f303 	mul.w	r3, r4, r3
1a002b1e:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002b22:	4a19      	ldr	r2, [pc, #100]	; (1a002b88 <pll_calc_divs+0xa0>)
1a002b24:	4293      	cmp	r3, r2
1a002b26:	d920      	bls.n	1a002b6a <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002b28:	4a18      	ldr	r2, [pc, #96]	; (1a002b8c <pll_calc_divs+0xa4>)
1a002b2a:	4293      	cmp	r3, r2
1a002b2c:	d823      	bhi.n	1a002b76 <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a002b2e:	f015 0f80 	tst.w	r5, #128	; 0x80
1a002b32:	d103      	bne.n	1a002b3c <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a002b34:	1c7a      	adds	r2, r7, #1
1a002b36:	fa23 f202 	lsr.w	r2, r3, r2
1a002b3a:	e000      	b.n	1a002b3e <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002b3c:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002b3e:	1a85      	subs	r5, r0, r2
1a002b40:	d502      	bpl.n	1a002b48 <pll_calc_divs+0x60>
		return -val;
1a002b42:	f1c5 0c00 	rsb	ip, r5, #0
1a002b46:	e000      	b.n	1a002b4a <pll_calc_divs+0x62>
	return val;
1a002b48:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a002b4a:	45e6      	cmp	lr, ip
1a002b4c:	d90d      	bls.n	1a002b6a <pll_calc_divs+0x82>
					ppll->nsel = n;
1a002b4e:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a002b50:	f107 0e01 	add.w	lr, r7, #1
1a002b54:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a002b58:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a002b5a:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a002b5c:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002b5e:	2d00      	cmp	r5, #0
1a002b60:	da02      	bge.n	1a002b68 <pll_calc_divs+0x80>
		return -val;
1a002b62:	f1c5 0e00 	rsb	lr, r5, #0
1a002b66:	e000      	b.n	1a002b6a <pll_calc_divs+0x82>
	return val;
1a002b68:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a002b6a:	3401      	adds	r4, #1
1a002b6c:	e000      	b.n	1a002b70 <pll_calc_divs+0x88>
1a002b6e:	2401      	movs	r4, #1
1a002b70:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a002b74:	ddc3      	ble.n	1a002afe <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002b76:	3701      	adds	r7, #1
1a002b78:	e000      	b.n	1a002b7c <pll_calc_divs+0x94>
1a002b7a:	2700      	movs	r7, #0
1a002b7c:	2f03      	cmp	r7, #3
1a002b7e:	ddf6      	ble.n	1a002b6e <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a002b80:	3601      	adds	r6, #1
1a002b82:	2e04      	cmp	r6, #4
1a002b84:	ddf9      	ble.n	1a002b7a <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a002b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002b88:	094c5eff 	.word	0x094c5eff
1a002b8c:	1312d000 	.word	0x1312d000

1a002b90 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002b90:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002b92:	b099      	sub	sp, #100	; 0x64
1a002b94:	4605      	mov	r5, r0
1a002b96:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002b98:	4668      	mov	r0, sp
1a002b9a:	2100      	movs	r1, #0
1a002b9c:	2260      	movs	r2, #96	; 0x60
1a002b9e:	f000 ff08 	bl	1a0039b2 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002ba2:	2380      	movs	r3, #128	; 0x80
1a002ba4:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002ba6:	6963      	ldr	r3, [r4, #20]
1a002ba8:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002baa:	7923      	ldrb	r3, [r4, #4]
1a002bac:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002bb0:	4628      	mov	r0, r5
1a002bb2:	4669      	mov	r1, sp
1a002bb4:	f7ff ff98 	bl	1a002ae8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002bb8:	9b06      	ldr	r3, [sp, #24]
1a002bba:	42ab      	cmp	r3, r5
1a002bbc:	d107      	bne.n	1a002bce <pll_get_frac+0x3e>
		*ppll = pll[0];
1a002bbe:	466d      	mov	r5, sp
1a002bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002bc4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002bc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002bcc:	e05e      	b.n	1a002c8c <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002bce:	1aeb      	subs	r3, r5, r3
1a002bd0:	d500      	bpl.n	1a002bd4 <pll_get_frac+0x44>
		return -val;
1a002bd2:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002bd4:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002bd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002bdc:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002bde:	6963      	ldr	r3, [r4, #20]
1a002be0:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002be2:	7923      	ldrb	r3, [r4, #4]
1a002be4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002be8:	4628      	mov	r0, r5
1a002bea:	a910      	add	r1, sp, #64	; 0x40
1a002bec:	f7ff ff7c 	bl	1a002ae8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002bf0:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002bf2:	42ab      	cmp	r3, r5
1a002bf4:	d107      	bne.n	1a002c06 <pll_get_frac+0x76>
		*ppll = pll[2];
1a002bf6:	ad10      	add	r5, sp, #64	; 0x40
1a002bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002bfc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002c04:	e042      	b.n	1a002c8c <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002c06:	1aeb      	subs	r3, r5, r3
1a002c08:	d500      	bpl.n	1a002c0c <pll_get_frac+0x7c>
		return -val;
1a002c0a:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002c0c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002c0e:	4b20      	ldr	r3, [pc, #128]	; (1a002c90 <pll_get_frac+0x100>)
1a002c10:	429d      	cmp	r5, r3
1a002c12:	d812      	bhi.n	1a002c3a <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a002c14:	2340      	movs	r3, #64	; 0x40
1a002c16:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002c18:	6963      	ldr	r3, [r4, #20]
1a002c1a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002c1c:	4628      	mov	r0, r5
1a002c1e:	a908      	add	r1, sp, #32
1a002c20:	f7ff ff62 	bl	1a002ae8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002c24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002c26:	42ab      	cmp	r3, r5
1a002c28:	d107      	bne.n	1a002c3a <pll_get_frac+0xaa>
			*ppll = pll[1];
1a002c2a:	ad08      	add	r5, sp, #32
1a002c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002c38:	e028      	b.n	1a002c8c <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002c3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002c3c:	1aed      	subs	r5, r5, r3
1a002c3e:	d500      	bpl.n	1a002c42 <pll_get_frac+0xb2>
		return -val;
1a002c40:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002c42:	42ae      	cmp	r6, r5
1a002c44:	dc11      	bgt.n	1a002c6a <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a002c46:	42be      	cmp	r6, r7
1a002c48:	dc07      	bgt.n	1a002c5a <pll_get_frac+0xca>
			*ppll = pll[0];
1a002c4a:	466d      	mov	r5, sp
1a002c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c58:	e018      	b.n	1a002c8c <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a002c5a:	ad10      	add	r5, sp, #64	; 0x40
1a002c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c68:	e010      	b.n	1a002c8c <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a002c6a:	42af      	cmp	r7, r5
1a002c6c:	db07      	blt.n	1a002c7e <pll_get_frac+0xee>
			*ppll = pll[1];
1a002c6e:	ad08      	add	r5, sp, #32
1a002c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c7c:	e006      	b.n	1a002c8c <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a002c7e:	ad10      	add	r5, sp, #64	; 0x40
1a002c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a002c8c:	b019      	add	sp, #100	; 0x64
1a002c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002c90:	068e7780 	.word	0x068e7780

1a002c94 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002c94:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002c96:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002c98:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002c9a:	e010      	b.n	1a002cbe <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002c9c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002ca0:	0052      	lsls	r2, r2, #1
1a002ca2:	4d0d      	ldr	r5, [pc, #52]	; (1a002cd8 <Chip_Clock_FindBaseClock+0x44>)
1a002ca4:	5aaa      	ldrh	r2, [r5, r2]
1a002ca6:	4282      	cmp	r2, r0
1a002ca8:	d806      	bhi.n	1a002cb8 <Chip_Clock_FindBaseClock+0x24>
1a002caa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002cae:	0052      	lsls	r2, r2, #1
1a002cb0:	442a      	add	r2, r5
1a002cb2:	8852      	ldrh	r2, [r2, #2]
1a002cb4:	4282      	cmp	r2, r0
1a002cb6:	d201      	bcs.n	1a002cbc <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002cb8:	3301      	adds	r3, #1
1a002cba:	e000      	b.n	1a002cbe <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a002cbc:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002cbe:	291c      	cmp	r1, #28
1a002cc0:	d107      	bne.n	1a002cd2 <Chip_Clock_FindBaseClock+0x3e>
1a002cc2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002cc6:	0052      	lsls	r2, r2, #1
1a002cc8:	4c03      	ldr	r4, [pc, #12]	; (1a002cd8 <Chip_Clock_FindBaseClock+0x44>)
1a002cca:	4422      	add	r2, r4
1a002ccc:	7914      	ldrb	r4, [r2, #4]
1a002cce:	428c      	cmp	r4, r1
1a002cd0:	d1e4      	bne.n	1a002c9c <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a002cd2:	4608      	mov	r0, r1
1a002cd4:	bc30      	pop	{r4, r5}
1a002cd6:	4770      	bx	lr
1a002cd8:	1a003cb4 	.word	0x1a003cb4

1a002cdc <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002cdc:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002ce2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002ce4:	4a0d      	ldr	r2, [pc, #52]	; (1a002d1c <Chip_Clock_EnableCrystal+0x40>)
1a002ce6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002ce8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002cec:	6992      	ldr	r2, [r2, #24]
1a002cee:	428a      	cmp	r2, r1
1a002cf0:	d001      	beq.n	1a002cf6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002cf2:	4a0a      	ldr	r2, [pc, #40]	; (1a002d1c <Chip_Clock_EnableCrystal+0x40>)
1a002cf4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002cf6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002cfa:	4a09      	ldr	r2, [pc, #36]	; (1a002d20 <Chip_Clock_EnableCrystal+0x44>)
1a002cfc:	6811      	ldr	r1, [r2, #0]
1a002cfe:	4a09      	ldr	r2, [pc, #36]	; (1a002d24 <Chip_Clock_EnableCrystal+0x48>)
1a002d00:	4291      	cmp	r1, r2
1a002d02:	d901      	bls.n	1a002d08 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002d04:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002d08:	4a04      	ldr	r2, [pc, #16]	; (1a002d1c <Chip_Clock_EnableCrystal+0x40>)
1a002d0a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002d0c:	9b01      	ldr	r3, [sp, #4]
1a002d0e:	1e5a      	subs	r2, r3, #1
1a002d10:	9201      	str	r2, [sp, #4]
1a002d12:	2b00      	cmp	r3, #0
1a002d14:	d1fa      	bne.n	1a002d0c <Chip_Clock_EnableCrystal+0x30>
}
1a002d16:	b002      	add	sp, #8
1a002d18:	4770      	bx	lr
1a002d1a:	bf00      	nop
1a002d1c:	40050000 	.word	0x40050000
1a002d20:	1a003bd8 	.word	0x1a003bd8
1a002d24:	01312cff 	.word	0x01312cff

1a002d28 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002d28:	3012      	adds	r0, #18
1a002d2a:	4b05      	ldr	r3, [pc, #20]	; (1a002d40 <Chip_Clock_GetDividerSource+0x18>)
1a002d2c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002d30:	f010 0f01 	tst.w	r0, #1
1a002d34:	d102      	bne.n	1a002d3c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002d36:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002d3a:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a002d3c:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a002d3e:	4770      	bx	lr
1a002d40:	40050000 	.word	0x40050000

1a002d44 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002d44:	f100 0212 	add.w	r2, r0, #18
1a002d48:	4b03      	ldr	r3, [pc, #12]	; (1a002d58 <Chip_Clock_GetDividerDivisor+0x14>)
1a002d4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002d4e:	4b03      	ldr	r3, [pc, #12]	; (1a002d5c <Chip_Clock_GetDividerDivisor+0x18>)
1a002d50:	5c18      	ldrb	r0, [r3, r0]
}
1a002d52:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002d56:	4770      	bx	lr
1a002d58:	40050000 	.word	0x40050000
1a002d5c:	1a003cac 	.word	0x1a003cac

1a002d60 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002d60:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002d62:	2810      	cmp	r0, #16
1a002d64:	d80a      	bhi.n	1a002d7c <Chip_Clock_GetClockInputHz+0x1c>
1a002d66:	e8df f000 	tbb	[pc, r0]
1a002d6a:	0b42      	.short	0x0b42
1a002d6c:	091f160d 	.word	0x091f160d
1a002d70:	2b282522 	.word	0x2b282522
1a002d74:	322e0909 	.word	0x322e0909
1a002d78:	3a36      	.short	0x3a36
1a002d7a:	3e          	.byte	0x3e
1a002d7b:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a002d7c:	2000      	movs	r0, #0
1a002d7e:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002d80:	481e      	ldr	r0, [pc, #120]	; (1a002dfc <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002d82:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002d84:	4b1e      	ldr	r3, [pc, #120]	; (1a002e00 <Chip_Clock_GetClockInputHz+0xa0>)
1a002d86:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002d8a:	f003 0307 	and.w	r3, r3, #7
1a002d8e:	2b04      	cmp	r3, #4
1a002d90:	d130      	bne.n	1a002df4 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a002d92:	2000      	movs	r0, #0
1a002d94:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002d96:	4b1a      	ldr	r3, [pc, #104]	; (1a002e00 <Chip_Clock_GetClockInputHz+0xa0>)
1a002d98:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002d9c:	f003 0307 	and.w	r3, r3, #7
1a002da0:	2b04      	cmp	r3, #4
1a002da2:	d029      	beq.n	1a002df8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002da4:	4817      	ldr	r0, [pc, #92]	; (1a002e04 <Chip_Clock_GetClockInputHz+0xa4>)
1a002da6:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002da8:	4b17      	ldr	r3, [pc, #92]	; (1a002e08 <Chip_Clock_GetClockInputHz+0xa8>)
1a002daa:	6818      	ldr	r0, [r3, #0]
		break;
1a002dac:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002dae:	4b17      	ldr	r3, [pc, #92]	; (1a002e0c <Chip_Clock_GetClockInputHz+0xac>)
1a002db0:	6818      	ldr	r0, [r3, #0]
		break;
1a002db2:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002db4:	4b16      	ldr	r3, [pc, #88]	; (1a002e10 <Chip_Clock_GetClockInputHz+0xb0>)
1a002db6:	6818      	ldr	r0, [r3, #0]
		break;
1a002db8:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002dba:	4b15      	ldr	r3, [pc, #84]	; (1a002e10 <Chip_Clock_GetClockInputHz+0xb0>)
1a002dbc:	6858      	ldr	r0, [r3, #4]
		break;
1a002dbe:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002dc0:	f000 f86a 	bl	1a002e98 <Chip_Clock_GetMainPLLHz>
		break;
1a002dc4:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002dc6:	2100      	movs	r1, #0
1a002dc8:	f000 f89a 	bl	1a002f00 <Chip_Clock_GetDivRate>
		break;
1a002dcc:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002dce:	2101      	movs	r1, #1
1a002dd0:	f000 f896 	bl	1a002f00 <Chip_Clock_GetDivRate>
		break;
1a002dd4:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002dd6:	2102      	movs	r1, #2
1a002dd8:	f000 f892 	bl	1a002f00 <Chip_Clock_GetDivRate>
		break;
1a002ddc:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002dde:	2103      	movs	r1, #3
1a002de0:	f000 f88e 	bl	1a002f00 <Chip_Clock_GetDivRate>
		break;
1a002de4:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002de6:	2104      	movs	r1, #4
1a002de8:	f000 f88a 	bl	1a002f00 <Chip_Clock_GetDivRate>
		break;
1a002dec:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a002dee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a002df2:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a002df4:	4803      	ldr	r0, [pc, #12]	; (1a002e04 <Chip_Clock_GetClockInputHz+0xa4>)
1a002df6:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a002df8:	4806      	ldr	r0, [pc, #24]	; (1a002e14 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a002dfa:	bd08      	pop	{r3, pc}
1a002dfc:	00b71b00 	.word	0x00b71b00
1a002e00:	40043000 	.word	0x40043000
1a002e04:	017d7840 	.word	0x017d7840
1a002e08:	1a003bdc 	.word	0x1a003bdc
1a002e0c:	1a003bd8 	.word	0x1a003bd8
1a002e10:	10002d0c 	.word	0x10002d0c
1a002e14:	02faf080 	.word	0x02faf080

1a002e18 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002e18:	b538      	push	{r3, r4, r5, lr}
1a002e1a:	4605      	mov	r5, r0
1a002e1c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002e1e:	7908      	ldrb	r0, [r1, #4]
1a002e20:	f7ff ff9e 	bl	1a002d60 <Chip_Clock_GetClockInputHz>
1a002e24:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002e26:	4b19      	ldr	r3, [pc, #100]	; (1a002e8c <Chip_Clock_CalcMainPLLValue+0x74>)
1a002e28:	442b      	add	r3, r5
1a002e2a:	4a19      	ldr	r2, [pc, #100]	; (1a002e90 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002e2c:	4293      	cmp	r3, r2
1a002e2e:	d821      	bhi.n	1a002e74 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002e30:	b318      	cbz	r0, 1a002e7a <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002e32:	2380      	movs	r3, #128	; 0x80
1a002e34:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002e36:	2300      	movs	r3, #0
1a002e38:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002e3a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002e3c:	fbb5 f3f0 	udiv	r3, r5, r0
1a002e40:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002e42:	4a14      	ldr	r2, [pc, #80]	; (1a002e94 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002e44:	4295      	cmp	r5, r2
1a002e46:	d903      	bls.n	1a002e50 <Chip_Clock_CalcMainPLLValue+0x38>
1a002e48:	fb03 f000 	mul.w	r0, r3, r0
1a002e4c:	42a8      	cmp	r0, r5
1a002e4e:	d007      	beq.n	1a002e60 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002e50:	4628      	mov	r0, r5
1a002e52:	4621      	mov	r1, r4
1a002e54:	f7ff fe9c 	bl	1a002b90 <pll_get_frac>
		if (!ppll->nsel) {
1a002e58:	68a3      	ldr	r3, [r4, #8]
1a002e5a:	b18b      	cbz	r3, 1a002e80 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a002e5c:	3b01      	subs	r3, #1
1a002e5e:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a002e60:	6923      	ldr	r3, [r4, #16]
1a002e62:	b183      	cbz	r3, 1a002e86 <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a002e64:	68e2      	ldr	r2, [r4, #12]
1a002e66:	b10a      	cbz	r2, 1a002e6c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002e68:	3a01      	subs	r2, #1
1a002e6a:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a002e6c:	3b01      	subs	r3, #1
1a002e6e:	6123      	str	r3, [r4, #16]

	return 0;
1a002e70:	2000      	movs	r0, #0
1a002e72:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a002e74:	f04f 30ff 	mov.w	r0, #4294967295
1a002e78:	bd38      	pop	{r3, r4, r5, pc}
1a002e7a:	f04f 30ff 	mov.w	r0, #4294967295
1a002e7e:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a002e80:	f04f 30ff 	mov.w	r0, #4294967295
1a002e84:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a002e86:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a002e8a:	bd38      	pop	{r3, r4, r5, pc}
1a002e8c:	ff6b3a10 	.word	0xff6b3a10
1a002e90:	0b940510 	.word	0x0b940510
1a002e94:	094c5eff 	.word	0x094c5eff

1a002e98 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a002e98:	b570      	push	{r4, r5, r6, lr}
1a002e9a:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002e9c:	4d16      	ldr	r5, [pc, #88]	; (1a002ef8 <Chip_Clock_GetMainPLLHz+0x60>)
1a002e9e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002ea0:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002ea4:	f7ff ff5c 	bl	1a002d60 <Chip_Clock_GetClockInputHz>
1a002ea8:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002eaa:	4b14      	ldr	r3, [pc, #80]	; (1a002efc <Chip_Clock_GetMainPLLHz+0x64>)
1a002eac:	6818      	ldr	r0, [r3, #0]
1a002eae:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002eb0:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a002eb2:	f010 0001 	ands.w	r0, r0, #1
1a002eb6:	d01d      	beq.n	1a002ef4 <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a002eb8:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002ebc:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002ec0:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a002ec4:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a002ec8:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a002eca:	3201      	adds	r2, #1
	p = ptab[psel];
1a002ecc:	a802      	add	r0, sp, #8
1a002ece:	4401      	add	r1, r0
1a002ed0:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a002ed4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002ed8:	d100      	bne.n	1a002edc <Chip_Clock_GetMainPLLHz+0x44>
1a002eda:	b125      	cbz	r5, 1a002ee6 <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a002edc:	fbb6 f0f2 	udiv	r0, r6, r2
1a002ee0:	fb03 f000 	mul.w	r0, r3, r0
1a002ee4:	e006      	b.n	1a002ef4 <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a002ee6:	0040      	lsls	r0, r0, #1
1a002ee8:	fbb3 f3f0 	udiv	r3, r3, r0
1a002eec:	fbb6 f0f2 	udiv	r0, r6, r2
1a002ef0:	fb00 f003 	mul.w	r0, r0, r3
}
1a002ef4:	b002      	add	sp, #8
1a002ef6:	bd70      	pop	{r4, r5, r6, pc}
1a002ef8:	40050000 	.word	0x40050000
1a002efc:	1a003ca8 	.word	0x1a003ca8

1a002f00 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a002f00:	b538      	push	{r3, r4, r5, lr}
1a002f02:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a002f04:	4608      	mov	r0, r1
1a002f06:	f7ff ff0f 	bl	1a002d28 <Chip_Clock_GetDividerSource>
1a002f0a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002f0c:	4620      	mov	r0, r4
1a002f0e:	f7ff ff19 	bl	1a002d44 <Chip_Clock_GetDividerDivisor>
1a002f12:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002f14:	4628      	mov	r0, r5
1a002f16:	f7ff ff23 	bl	1a002d60 <Chip_Clock_GetClockInputHz>
1a002f1a:	3401      	adds	r4, #1
}
1a002f1c:	fbb0 f0f4 	udiv	r0, r0, r4
1a002f20:	bd38      	pop	{r3, r4, r5, pc}
1a002f22:	bf00      	nop

1a002f24 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002f24:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002f26:	0085      	lsls	r5, r0, #2
1a002f28:	4c0d      	ldr	r4, [pc, #52]	; (1a002f60 <Chip_Clock_SetBaseClock+0x3c>)
1a002f2a:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a002f2c:	281b      	cmp	r0, #27
1a002f2e:	d80f      	bhi.n	1a002f50 <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a002f30:	2911      	cmp	r1, #17
1a002f32:	d012      	beq.n	1a002f5a <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002f34:	4c0b      	ldr	r4, [pc, #44]	; (1a002f64 <Chip_Clock_SetBaseClock+0x40>)
1a002f36:	402c      	ands	r4, r5

			if (autoblocken) {
1a002f38:	b10a      	cbz	r2, 1a002f3e <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a002f3a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a002f3e:	b10b      	cbz	r3, 1a002f44 <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a002f40:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002f44:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002f48:	0080      	lsls	r0, r0, #2
1a002f4a:	4b05      	ldr	r3, [pc, #20]	; (1a002f60 <Chip_Clock_SetBaseClock+0x3c>)
1a002f4c:	501c      	str	r4, [r3, r0]
1a002f4e:	e004      	b.n	1a002f5a <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002f50:	f045 0501 	orr.w	r5, r5, #1
1a002f54:	0080      	lsls	r0, r0, #2
1a002f56:	4b02      	ldr	r3, [pc, #8]	; (1a002f60 <Chip_Clock_SetBaseClock+0x3c>)
1a002f58:	501d      	str	r5, [r3, r0]
	}
}
1a002f5a:	bc30      	pop	{r4, r5}
1a002f5c:	4770      	bx	lr
1a002f5e:	bf00      	nop
1a002f60:	4005005c 	.word	0x4005005c
1a002f64:	e0fff7fe 	.word	0xe0fff7fe

1a002f68 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002f68:	281b      	cmp	r0, #27
1a002f6a:	d808      	bhi.n	1a002f7e <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002f6c:	0080      	lsls	r0, r0, #2
1a002f6e:	4b06      	ldr	r3, [pc, #24]	; (1a002f88 <Chip_Clock_GetBaseClock+0x20>)
1a002f70:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a002f72:	f010 0f01 	tst.w	r0, #1
1a002f76:	d104      	bne.n	1a002f82 <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002f78:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002f7c:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a002f7e:	2011      	movs	r0, #17
1a002f80:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a002f82:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a002f84:	4770      	bx	lr
1a002f86:	bf00      	nop
1a002f88:	4005005c 	.word	0x4005005c

1a002f8c <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a002f8c:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002f8e:	f7ff ffeb 	bl	1a002f68 <Chip_Clock_GetBaseClock>
1a002f92:	f7ff fee5 	bl	1a002d60 <Chip_Clock_GetClockInputHz>
}
1a002f96:	bd08      	pop	{r3, pc}

1a002f98 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002f98:	b909      	cbnz	r1, 1a002f9e <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a002f9a:	2101      	movs	r1, #1
1a002f9c:	e000      	b.n	1a002fa0 <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a002f9e:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a002fa0:	b10a      	cbz	r2, 1a002fa6 <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a002fa2:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002fa6:	2b02      	cmp	r3, #2
1a002fa8:	d101      	bne.n	1a002fae <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a002faa:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002fae:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002fb2:	d305      	bcc.n	1a002fc0 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002fb4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002fb8:	4b04      	ldr	r3, [pc, #16]	; (1a002fcc <Chip_Clock_EnableOpts+0x34>)
1a002fba:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002fbe:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002fc0:	3020      	adds	r0, #32
1a002fc2:	4b03      	ldr	r3, [pc, #12]	; (1a002fd0 <Chip_Clock_EnableOpts+0x38>)
1a002fc4:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002fc8:	4770      	bx	lr
1a002fca:	bf00      	nop
1a002fcc:	40052000 	.word	0x40052000
1a002fd0:	40051000 	.word	0x40051000

1a002fd4 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002fd4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002fd8:	d309      	bcc.n	1a002fee <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002fda:	4a09      	ldr	r2, [pc, #36]	; (1a003000 <Chip_Clock_Enable+0x2c>)
1a002fdc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002fe0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002fe4:	f043 0301 	orr.w	r3, r3, #1
1a002fe8:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002fec:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002fee:	4a05      	ldr	r2, [pc, #20]	; (1a003004 <Chip_Clock_Enable+0x30>)
1a002ff0:	3020      	adds	r0, #32
1a002ff2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002ff6:	f043 0301 	orr.w	r3, r3, #1
1a002ffa:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002ffe:	4770      	bx	lr
1a003000:	40052000 	.word	0x40052000
1a003004:	40051000 	.word	0x40051000

1a003008 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003008:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00300a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00300e:	d305      	bcc.n	1a00301c <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003010:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003014:	4a0d      	ldr	r2, [pc, #52]	; (1a00304c <Chip_Clock_GetRate+0x44>)
1a003016:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00301a:	e004      	b.n	1a003026 <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a00301c:	f100 0320 	add.w	r3, r0, #32
1a003020:	4a0b      	ldr	r2, [pc, #44]	; (1a003050 <Chip_Clock_GetRate+0x48>)
1a003022:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003026:	f014 0f01 	tst.w	r4, #1
1a00302a:	d00c      	beq.n	1a003046 <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00302c:	f7ff fe32 	bl	1a002c94 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003030:	f7ff ffac 	bl	1a002f8c <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a003034:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003038:	d101      	bne.n	1a00303e <Chip_Clock_GetRate+0x36>
			div = 1;
1a00303a:	2301      	movs	r3, #1
1a00303c:	e000      	b.n	1a003040 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a00303e:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a003040:	fbb0 f0f3 	udiv	r0, r0, r3
1a003044:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a003046:	2000      	movs	r0, #0
	}

	return rate;
}
1a003048:	bd10      	pop	{r4, pc}
1a00304a:	bf00      	nop
1a00304c:	40052000 	.word	0x40052000
1a003050:	40051000 	.word	0x40051000

1a003054 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003054:	b570      	push	{r4, r5, r6, lr}
1a003056:	b08a      	sub	sp, #40	; 0x28
1a003058:	4605      	mov	r5, r0
1a00305a:	460e      	mov	r6, r1
1a00305c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00305e:	f242 7310 	movw	r3, #10000	; 0x2710
1a003062:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003064:	2806      	cmp	r0, #6
1a003066:	d101      	bne.n	1a00306c <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a003068:	f7ff fe38 	bl	1a002cdc <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00306c:	2004      	movs	r0, #4
1a00306e:	4629      	mov	r1, r5
1a003070:	2201      	movs	r2, #1
1a003072:	2300      	movs	r3, #0
1a003074:	f7ff ff56 	bl	1a002f24 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003078:	4a47      	ldr	r2, [pc, #284]	; (1a003198 <Chip_SetupCoreClock+0x144>)
1a00307a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00307c:	f043 0301 	orr.w	r3, r3, #1
1a003080:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003082:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003086:	4630      	mov	r0, r6
1a003088:	a901      	add	r1, sp, #4
1a00308a:	f7ff fec5 	bl	1a002e18 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00308e:	4b43      	ldr	r3, [pc, #268]	; (1a00319c <Chip_SetupCoreClock+0x148>)
1a003090:	429e      	cmp	r6, r3
1a003092:	d913      	bls.n	1a0030bc <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a003094:	9b01      	ldr	r3, [sp, #4]
1a003096:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00309a:	d000      	beq.n	1a00309e <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a00309c:	e7fe      	b.n	1a00309c <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a00309e:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0030a2:	d005      	beq.n	1a0030b0 <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0030a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0030a8:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a0030aa:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a0030ac:	2601      	movs	r6, #1
1a0030ae:	e007      	b.n	1a0030c0 <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a0030b0:	9b04      	ldr	r3, [sp, #16]
1a0030b2:	3301      	adds	r3, #1
1a0030b4:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a0030b6:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a0030b8:	2600      	movs	r6, #0
1a0030ba:	e001      	b.n	1a0030c0 <Chip_SetupCoreClock+0x6c>
1a0030bc:	2500      	movs	r5, #0
1a0030be:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0030c0:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0030c4:	9b01      	ldr	r3, [sp, #4]
1a0030c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0030ca:	9a05      	ldr	r2, [sp, #20]
1a0030cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0030d0:	9a03      	ldr	r2, [sp, #12]
1a0030d2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0030d6:	9a04      	ldr	r2, [sp, #16]
1a0030d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0030dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0030e0:	4a2d      	ldr	r2, [pc, #180]	; (1a003198 <Chip_SetupCoreClock+0x144>)
1a0030e2:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0030e4:	4b2c      	ldr	r3, [pc, #176]	; (1a003198 <Chip_SetupCoreClock+0x144>)
1a0030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0030e8:	f013 0f01 	tst.w	r3, #1
1a0030ec:	d0fa      	beq.n	1a0030e4 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0030ee:	2004      	movs	r0, #4
1a0030f0:	2109      	movs	r1, #9
1a0030f2:	2201      	movs	r2, #1
1a0030f4:	2300      	movs	r3, #0
1a0030f6:	f7ff ff15 	bl	1a002f24 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0030fa:	b1ee      	cbz	r6, 1a003138 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0030fc:	f242 7310 	movw	r3, #10000	; 0x2710
1a003100:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003102:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003104:	1e5a      	subs	r2, r3, #1
1a003106:	9209      	str	r2, [sp, #36]	; 0x24
1a003108:	2b00      	cmp	r3, #0
1a00310a:	d1fa      	bne.n	1a003102 <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a00310c:	9b01      	ldr	r3, [sp, #4]
1a00310e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003112:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003114:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003118:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00311c:	9a05      	ldr	r2, [sp, #20]
1a00311e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003122:	9a03      	ldr	r2, [sp, #12]
1a003124:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003128:	9a04      	ldr	r2, [sp, #16]
1a00312a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00312e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003132:	4a19      	ldr	r2, [pc, #100]	; (1a003198 <Chip_SetupCoreClock+0x144>)
1a003134:	6453      	str	r3, [r2, #68]	; 0x44
1a003136:	e01c      	b.n	1a003172 <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a003138:	b1dd      	cbz	r5, 1a003172 <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00313a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00313e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003140:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003142:	1e5a      	subs	r2, r3, #1
1a003144:	9209      	str	r2, [sp, #36]	; 0x24
1a003146:	2b00      	cmp	r3, #0
1a003148:	d1fa      	bne.n	1a003140 <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a00314a:	9b04      	ldr	r3, [sp, #16]
1a00314c:	1e59      	subs	r1, r3, #1
1a00314e:	9104      	str	r1, [sp, #16]
1a003150:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003154:	9b01      	ldr	r3, [sp, #4]
1a003156:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a00315a:	9b05      	ldr	r3, [sp, #20]
1a00315c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a003160:	9b03      	ldr	r3, [sp, #12]
1a003162:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a003166:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a00316a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00316e:	4a0a      	ldr	r2, [pc, #40]	; (1a003198 <Chip_SetupCoreClock+0x144>)
1a003170:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003172:	b964      	cbnz	r4, 1a00318e <Chip_SetupCoreClock+0x13a>
1a003174:	e00e      	b.n	1a003194 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003176:	4a0a      	ldr	r2, [pc, #40]	; (1a0031a0 <Chip_SetupCoreClock+0x14c>)
1a003178:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a00317c:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a003180:	7859      	ldrb	r1, [r3, #1]
1a003182:	789a      	ldrb	r2, [r3, #2]
1a003184:	78db      	ldrb	r3, [r3, #3]
1a003186:	f7ff fecd 	bl	1a002f24 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00318a:	3401      	adds	r4, #1
1a00318c:	e000      	b.n	1a003190 <Chip_SetupCoreClock+0x13c>
1a00318e:	2400      	movs	r4, #0
1a003190:	2c11      	cmp	r4, #17
1a003192:	d9f0      	bls.n	1a003176 <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003194:	b00a      	add	sp, #40	; 0x28
1a003196:	bd70      	pop	{r4, r5, r6, pc}
1a003198:	40050000 	.word	0x40050000
1a00319c:	068e7780 	.word	0x068e7780
1a0031a0:	1a003d20 	.word	0x1a003d20

1a0031a4 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a0031a4:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a0031a6:	4b10      	ldr	r3, [pc, #64]	; (1a0031e8 <fpuInit+0x44>)
1a0031a8:	681b      	ldr	r3, [r3, #0]
1a0031aa:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a0031ac:	4b0f      	ldr	r3, [pc, #60]	; (1a0031ec <fpuInit+0x48>)
1a0031ae:	681b      	ldr	r3, [r3, #0]
1a0031b0:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a0031b2:	9a02      	ldr	r2, [sp, #8]
1a0031b4:	4b0e      	ldr	r3, [pc, #56]	; (1a0031f0 <fpuInit+0x4c>)
1a0031b6:	429a      	cmp	r2, r3
1a0031b8:	d105      	bne.n	1a0031c6 <fpuInit+0x22>
1a0031ba:	9a01      	ldr	r2, [sp, #4]
1a0031bc:	4b0d      	ldr	r3, [pc, #52]	; (1a0031f4 <fpuInit+0x50>)
1a0031be:	429a      	cmp	r2, r3
1a0031c0:	d003      	beq.n	1a0031ca <fpuInit+0x26>
1a0031c2:	2300      	movs	r3, #0
1a0031c4:	e002      	b.n	1a0031cc <fpuInit+0x28>
1a0031c6:	2300      	movs	r3, #0
1a0031c8:	e000      	b.n	1a0031cc <fpuInit+0x28>
1a0031ca:	2301      	movs	r3, #1

	if (vfpPresent) {
1a0031cc:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0031d0:	d008      	beq.n	1a0031e4 <fpuInit+0x40>
		Cpacr = *regCpacr;
1a0031d2:	4a09      	ldr	r2, [pc, #36]	; (1a0031f8 <fpuInit+0x54>)
1a0031d4:	6813      	ldr	r3, [r2, #0]
1a0031d6:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a0031d8:	9b03      	ldr	r3, [sp, #12]
1a0031da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0031de:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a0031e0:	9b03      	ldr	r3, [sp, #12]
1a0031e2:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a0031e4:	b004      	add	sp, #16
1a0031e6:	4770      	bx	lr
1a0031e8:	e000ef40 	.word	0xe000ef40
1a0031ec:	e000ef44 	.word	0xe000ef44
1a0031f0:	10110021 	.word	0x10110021
1a0031f4:	11000011 	.word	0x11000011
1a0031f8:	e000ed88 	.word	0xe000ed88

1a0031fc <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a0031fc:	4770      	bx	lr
1a0031fe:	bf00      	nop

1a003200 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003200:	4b03      	ldr	r3, [pc, #12]	; (1a003210 <Chip_SSP_GetClockIndex+0x10>)
1a003202:	4298      	cmp	r0, r3
1a003204:	d101      	bne.n	1a00320a <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
1a003206:	20a5      	movs	r0, #165	; 0xa5
1a003208:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00320a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a00320c:	4770      	bx	lr
1a00320e:	bf00      	nop
1a003210:	400c5000 	.word	0x400c5000

1a003214 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003214:	4b04      	ldr	r3, [pc, #16]	; (1a003228 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003216:	4298      	cmp	r0, r3
1a003218:	d102      	bne.n	1a003220 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
1a00321a:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a00321e:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003220:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a003224:	4770      	bx	lr
1a003226:	bf00      	nop
1a003228:	400c5000 	.word	0x400c5000

1a00322c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a00322c:	6803      	ldr	r3, [r0, #0]
1a00322e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003232:	0209      	lsls	r1, r1, #8
1a003234:	b289      	uxth	r1, r1
1a003236:	430b      	orrs	r3, r1
1a003238:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a00323a:	6102      	str	r2, [r0, #16]
1a00323c:	4770      	bx	lr
1a00323e:	bf00      	nop

1a003240 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003240:	b570      	push	{r4, r5, r6, lr}
1a003242:	4606      	mov	r6, r0
1a003244:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003246:	f7ff ffe5 	bl	1a003214 <Chip_SSP_GetPeriphClockIndex>
1a00324a:	f7ff fedd 	bl	1a003008 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00324e:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a003250:	f04f 33ff 	mov.w	r3, #4294967295
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a003254:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a003256:	e00c      	b.n	1a003272 <Chip_SSP_SetBitRate+0x32>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003258:	1c4c      	adds	r4, r1, #1
1a00325a:	fb02 f304 	mul.w	r3, r2, r4
1a00325e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003262:	42ab      	cmp	r3, r5
1a003264:	d905      	bls.n	1a003272 <Chip_SSP_SetBitRate+0x32>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a003266:	2cff      	cmp	r4, #255	; 0xff
1a003268:	d902      	bls.n	1a003270 <Chip_SSP_SetBitRate+0x30>
				cr0_div = 0;
				prescale += 2;
1a00326a:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a00326c:	2100      	movs	r1, #0
1a00326e:	e000      	b.n	1a003272 <Chip_SSP_SetBitRate+0x32>
	prescale = 2;

	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003270:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a003272:	42ab      	cmp	r3, r5
1a003274:	d8f0      	bhi.n	1a003258 <Chip_SSP_SetBitRate+0x18>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003276:	4630      	mov	r0, r6
1a003278:	f7ff ffd8 	bl	1a00322c <Chip_SSP_SetClockRate>
1a00327c:	bd70      	pop	{r4, r5, r6, pc}
1a00327e:	bf00      	nop

1a003280 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003280:	b510      	push	{r4, lr}
1a003282:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003284:	f7ff ffbc 	bl	1a003200 <Chip_SSP_GetClockIndex>
1a003288:	f7ff fea4 	bl	1a002fd4 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00328c:	4620      	mov	r0, r4
1a00328e:	f7ff ffc1 	bl	1a003214 <Chip_SSP_GetPeriphClockIndex>
1a003292:	f7ff fe9f 	bl	1a002fd4 <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003296:	6863      	ldr	r3, [r4, #4]
1a003298:	f023 0304 	bic.w	r3, r3, #4
1a00329c:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00329e:	6823      	ldr	r3, [r4, #0]
1a0032a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0032a4:	f043 0307 	orr.w	r3, r3, #7
1a0032a8:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0032aa:	4620      	mov	r0, r4
1a0032ac:	4901      	ldr	r1, [pc, #4]	; (1a0032b4 <Chip_SSP_Init+0x34>)
1a0032ae:	f7ff ffc7 	bl	1a003240 <Chip_SSP_SetBitRate>
1a0032b2:	bd10      	pop	{r4, pc}
1a0032b4:	000186a0 	.word	0x000186a0

1a0032b8 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0032b8:	2901      	cmp	r1, #1
1a0032ba:	d109      	bne.n	1a0032d0 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a0032bc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0032c0:	0080      	lsls	r0, r0, #2
1a0032c2:	4b04      	ldr	r3, [pc, #16]	; (1a0032d4 <Chip_I2C_EventHandler+0x1c>)
1a0032c4:	4418      	add	r0, r3
1a0032c6:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a0032c8:	7d13      	ldrb	r3, [r2, #20]
1a0032ca:	b2db      	uxtb	r3, r3
1a0032cc:	2b04      	cmp	r3, #4
1a0032ce:	d0fb      	beq.n	1a0032c8 <Chip_I2C_EventHandler+0x10>
1a0032d0:	4770      	bx	lr
1a0032d2:	bf00      	nop
1a0032d4:	1000004c 	.word	0x1000004c

1a0032d8 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0032d8:	b570      	push	{r4, r5, r6, lr}
1a0032da:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a0032dc:	4e06      	ldr	r6, [pc, #24]	; (1a0032f8 <Chip_I2C_Init+0x20>)
1a0032de:	00c4      	lsls	r4, r0, #3
1a0032e0:	1a23      	subs	r3, r4, r0
1a0032e2:	009b      	lsls	r3, r3, #2
1a0032e4:	4433      	add	r3, r6
1a0032e6:	8898      	ldrh	r0, [r3, #4]
1a0032e8:	f7ff fe74 	bl	1a002fd4 <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0032ec:	1b60      	subs	r0, r4, r5
1a0032ee:	0080      	lsls	r0, r0, #2
1a0032f0:	5833      	ldr	r3, [r6, r0]
1a0032f2:	226c      	movs	r2, #108	; 0x6c
1a0032f4:	619a      	str	r2, [r3, #24]
1a0032f6:	bd70      	pop	{r4, r5, r6, pc}
1a0032f8:	1000004c 	.word	0x1000004c

1a0032fc <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0032fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003300:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a003302:	4f09      	ldr	r7, [pc, #36]	; (1a003328 <Chip_I2C_SetClockRate+0x2c>)
1a003304:	00c5      	lsls	r5, r0, #3
1a003306:	1a2e      	subs	r6, r5, r0
1a003308:	00b6      	lsls	r6, r6, #2
1a00330a:	19bb      	adds	r3, r7, r6
1a00330c:	8898      	ldrh	r0, [r3, #4]
1a00330e:	f7ff fe7b 	bl	1a003008 <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003312:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003316:	59bb      	ldr	r3, [r7, r6]
1a003318:	0842      	lsrs	r2, r0, #1
1a00331a:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00331c:	59bb      	ldr	r3, [r7, r6]
1a00331e:	691a      	ldr	r2, [r3, #16]
1a003320:	1a80      	subs	r0, r0, r2
1a003322:	6158      	str	r0, [r3, #20]
1a003324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003328:	1000004c 	.word	0x1000004c

1a00332c <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a00332c:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00332e:	4a19      	ldr	r2, [pc, #100]	; (1a003394 <ResetISR+0x68>)
1a003330:	4b19      	ldr	r3, [pc, #100]	; (1a003398 <ResetISR+0x6c>)
1a003332:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a003334:	4a19      	ldr	r2, [pc, #100]	; (1a00339c <ResetISR+0x70>)
1a003336:	3304      	adds	r3, #4
1a003338:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00333a:	2300      	movs	r3, #0
1a00333c:	e005      	b.n	1a00334a <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00333e:	f04f 31ff 	mov.w	r1, #4294967295
1a003342:	4a17      	ldr	r2, [pc, #92]	; (1a0033a0 <ResetISR+0x74>)
1a003344:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a003348:	3301      	adds	r3, #1
1a00334a:	2b07      	cmp	r3, #7
1a00334c:	d9f7      	bls.n	1a00333e <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a00334e:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a003350:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a003352:	f7ff fa27 	bl	1a0027a4 <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a003356:	4b13      	ldr	r3, [pc, #76]	; (1a0033a4 <ResetISR+0x78>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a003358:	e007      	b.n	1a00336a <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a00335a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00335e:	6818      	ldr	r0, [r3, #0]
1a003360:	6859      	ldr	r1, [r3, #4]
1a003362:	689a      	ldr	r2, [r3, #8]
1a003364:	f7fc ff22 	bl	1a0001ac <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a003368:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a00336a:	4a0f      	ldr	r2, [pc, #60]	; (1a0033a8 <ResetISR+0x7c>)
1a00336c:	4293      	cmp	r3, r2
1a00336e:	d3f4      	bcc.n	1a00335a <ResetISR+0x2e>
1a003370:	e006      	b.n	1a003380 <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a003372:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a003374:	f854 0b08 	ldr.w	r0, [r4], #8
1a003378:	6859      	ldr	r1, [r3, #4]
1a00337a:	f7fc ff25 	bl	1a0001c8 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a00337e:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a003380:	4a0a      	ldr	r2, [pc, #40]	; (1a0033ac <ResetISR+0x80>)
1a003382:	4293      	cmp	r3, r2
1a003384:	d3f5      	bcc.n	1a003372 <ResetISR+0x46>

#if defined (__USE_CMSIS)
    SystemInit();
#endif

    __libc_init_array();
1a003386:	f000 fae3 	bl	1a003950 <__libc_init_array>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a00338a:	f7ff f9ed 	bl	1a002768 <Board_Init>
    main();
1a00338e:	f7fc ffdd 	bl	1a00034c <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a003392:	e7fe      	b.n	1a003392 <ResetISR+0x66>
1a003394:	10df1000 	.word	0x10df1000
1a003398:	40053100 	.word	0x40053100
1a00339c:	01dff7ff 	.word	0x01dff7ff
1a0033a0:	e000e280 	.word	0xe000e280
1a0033a4:	1a000114 	.word	0x1a000114
1a0033a8:	1a000150 	.word	0x1a000150
1a0033ac:	1a000178 	.word	0x1a000178

1a0033b0 <_init>:
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

void _init(void) {}
1a0033b0:	4770      	bx	lr
1a0033b2:	bf00      	nop

1a0033b4 <__aeabi_uldivmod>:
1a0033b4:	b953      	cbnz	r3, 1a0033cc <__aeabi_uldivmod+0x18>
1a0033b6:	b94a      	cbnz	r2, 1a0033cc <__aeabi_uldivmod+0x18>
1a0033b8:	2900      	cmp	r1, #0
1a0033ba:	bf08      	it	eq
1a0033bc:	2800      	cmpeq	r0, #0
1a0033be:	bf1c      	itt	ne
1a0033c0:	f04f 31ff 	movne.w	r1, #4294967295
1a0033c4:	f04f 30ff 	movne.w	r0, #4294967295
1a0033c8:	f000 b83c 	b.w	1a003444 <__aeabi_idiv0>
1a0033cc:	b082      	sub	sp, #8
1a0033ce:	46ec      	mov	ip, sp
1a0033d0:	e92d 5000 	stmdb	sp!, {ip, lr}
1a0033d4:	f000 f81e 	bl	1a003414 <__gnu_uldivmod_helper>
1a0033d8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0033dc:	b002      	add	sp, #8
1a0033de:	bc0c      	pop	{r2, r3}
1a0033e0:	4770      	bx	lr
1a0033e2:	bf00      	nop

1a0033e4 <__gnu_ldivmod_helper>:
1a0033e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0033e8:	9c06      	ldr	r4, [sp, #24]
1a0033ea:	4615      	mov	r5, r2
1a0033ec:	4606      	mov	r6, r0
1a0033ee:	460f      	mov	r7, r1
1a0033f0:	4698      	mov	r8, r3
1a0033f2:	f000 f829 	bl	1a003448 <__divdi3>
1a0033f6:	fb05 f301 	mul.w	r3, r5, r1
1a0033fa:	fb00 3808 	mla	r8, r0, r8, r3
1a0033fe:	fba5 2300 	umull	r2, r3, r5, r0
1a003402:	1ab2      	subs	r2, r6, r2
1a003404:	4443      	add	r3, r8
1a003406:	eb67 0303 	sbc.w	r3, r7, r3
1a00340a:	e9c4 2300 	strd	r2, r3, [r4]
1a00340e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003412:	bf00      	nop

1a003414 <__gnu_uldivmod_helper>:
1a003414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003418:	9c06      	ldr	r4, [sp, #24]
1a00341a:	4690      	mov	r8, r2
1a00341c:	4606      	mov	r6, r0
1a00341e:	460f      	mov	r7, r1
1a003420:	461d      	mov	r5, r3
1a003422:	f000 f95f 	bl	1a0036e4 <__udivdi3>
1a003426:	fb00 f505 	mul.w	r5, r0, r5
1a00342a:	fba0 2308 	umull	r2, r3, r0, r8
1a00342e:	fb08 5501 	mla	r5, r8, r1, r5
1a003432:	1ab2      	subs	r2, r6, r2
1a003434:	442b      	add	r3, r5
1a003436:	eb67 0303 	sbc.w	r3, r7, r3
1a00343a:	e9c4 2300 	strd	r2, r3, [r4]
1a00343e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003442:	bf00      	nop

1a003444 <__aeabi_idiv0>:
1a003444:	4770      	bx	lr
1a003446:	bf00      	nop

1a003448 <__divdi3>:
1a003448:	2900      	cmp	r1, #0
1a00344a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00344e:	f2c0 80a6 	blt.w	1a00359e <__divdi3+0x156>
1a003452:	2600      	movs	r6, #0
1a003454:	2b00      	cmp	r3, #0
1a003456:	f2c0 809c 	blt.w	1a003592 <__divdi3+0x14a>
1a00345a:	4688      	mov	r8, r1
1a00345c:	4694      	mov	ip, r2
1a00345e:	469e      	mov	lr, r3
1a003460:	4615      	mov	r5, r2
1a003462:	4604      	mov	r4, r0
1a003464:	460f      	mov	r7, r1
1a003466:	2b00      	cmp	r3, #0
1a003468:	d13d      	bne.n	1a0034e6 <__divdi3+0x9e>
1a00346a:	428a      	cmp	r2, r1
1a00346c:	d959      	bls.n	1a003522 <__divdi3+0xda>
1a00346e:	fab2 f382 	clz	r3, r2
1a003472:	b13b      	cbz	r3, 1a003484 <__divdi3+0x3c>
1a003474:	f1c3 0220 	rsb	r2, r3, #32
1a003478:	409f      	lsls	r7, r3
1a00347a:	fa20 f202 	lsr.w	r2, r0, r2
1a00347e:	409d      	lsls	r5, r3
1a003480:	4317      	orrs	r7, r2
1a003482:	409c      	lsls	r4, r3
1a003484:	0c29      	lsrs	r1, r5, #16
1a003486:	0c22      	lsrs	r2, r4, #16
1a003488:	fbb7 fef1 	udiv	lr, r7, r1
1a00348c:	b2a8      	uxth	r0, r5
1a00348e:	fb01 771e 	mls	r7, r1, lr, r7
1a003492:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a003496:	fb00 f30e 	mul.w	r3, r0, lr
1a00349a:	42bb      	cmp	r3, r7
1a00349c:	d90a      	bls.n	1a0034b4 <__divdi3+0x6c>
1a00349e:	197f      	adds	r7, r7, r5
1a0034a0:	f10e 32ff 	add.w	r2, lr, #4294967295
1a0034a4:	f080 8105 	bcs.w	1a0036b2 <__divdi3+0x26a>
1a0034a8:	42bb      	cmp	r3, r7
1a0034aa:	f240 8102 	bls.w	1a0036b2 <__divdi3+0x26a>
1a0034ae:	f1ae 0e02 	sub.w	lr, lr, #2
1a0034b2:	442f      	add	r7, r5
1a0034b4:	1aff      	subs	r7, r7, r3
1a0034b6:	b2a4      	uxth	r4, r4
1a0034b8:	fbb7 f3f1 	udiv	r3, r7, r1
1a0034bc:	fb01 7713 	mls	r7, r1, r3, r7
1a0034c0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a0034c4:	fb00 f003 	mul.w	r0, r0, r3
1a0034c8:	42b8      	cmp	r0, r7
1a0034ca:	d908      	bls.n	1a0034de <__divdi3+0x96>
1a0034cc:	197f      	adds	r7, r7, r5
1a0034ce:	f103 32ff 	add.w	r2, r3, #4294967295
1a0034d2:	f080 80f0 	bcs.w	1a0036b6 <__divdi3+0x26e>
1a0034d6:	42b8      	cmp	r0, r7
1a0034d8:	f240 80ed 	bls.w	1a0036b6 <__divdi3+0x26e>
1a0034dc:	3b02      	subs	r3, #2
1a0034de:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a0034e2:	2200      	movs	r2, #0
1a0034e4:	e003      	b.n	1a0034ee <__divdi3+0xa6>
1a0034e6:	428b      	cmp	r3, r1
1a0034e8:	d90f      	bls.n	1a00350a <__divdi3+0xc2>
1a0034ea:	2200      	movs	r2, #0
1a0034ec:	4613      	mov	r3, r2
1a0034ee:	1c34      	adds	r4, r6, #0
1a0034f0:	bf18      	it	ne
1a0034f2:	2401      	movne	r4, #1
1a0034f4:	4260      	negs	r0, r4
1a0034f6:	f04f 0500 	mov.w	r5, #0
1a0034fa:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a0034fe:	4058      	eors	r0, r3
1a003500:	4051      	eors	r1, r2
1a003502:	1900      	adds	r0, r0, r4
1a003504:	4169      	adcs	r1, r5
1a003506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00350a:	fab3 f283 	clz	r2, r3
1a00350e:	2a00      	cmp	r2, #0
1a003510:	f040 8086 	bne.w	1a003620 <__divdi3+0x1d8>
1a003514:	428b      	cmp	r3, r1
1a003516:	d302      	bcc.n	1a00351e <__divdi3+0xd6>
1a003518:	4584      	cmp	ip, r0
1a00351a:	f200 80db 	bhi.w	1a0036d4 <__divdi3+0x28c>
1a00351e:	2301      	movs	r3, #1
1a003520:	e7e5      	b.n	1a0034ee <__divdi3+0xa6>
1a003522:	b912      	cbnz	r2, 1a00352a <__divdi3+0xe2>
1a003524:	2301      	movs	r3, #1
1a003526:	fbb3 f5f2 	udiv	r5, r3, r2
1a00352a:	fab5 f085 	clz	r0, r5
1a00352e:	2800      	cmp	r0, #0
1a003530:	d13b      	bne.n	1a0035aa <__divdi3+0x162>
1a003532:	1b78      	subs	r0, r7, r5
1a003534:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003538:	fa1f fc85 	uxth.w	ip, r5
1a00353c:	2201      	movs	r2, #1
1a00353e:	fbb0 f8fe 	udiv	r8, r0, lr
1a003542:	0c21      	lsrs	r1, r4, #16
1a003544:	fb0e 0718 	mls	r7, lr, r8, r0
1a003548:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a00354c:	fb0c f308 	mul.w	r3, ip, r8
1a003550:	42bb      	cmp	r3, r7
1a003552:	d907      	bls.n	1a003564 <__divdi3+0x11c>
1a003554:	197f      	adds	r7, r7, r5
1a003556:	f108 31ff 	add.w	r1, r8, #4294967295
1a00355a:	d202      	bcs.n	1a003562 <__divdi3+0x11a>
1a00355c:	42bb      	cmp	r3, r7
1a00355e:	f200 80bd 	bhi.w	1a0036dc <__divdi3+0x294>
1a003562:	4688      	mov	r8, r1
1a003564:	1aff      	subs	r7, r7, r3
1a003566:	b2a4      	uxth	r4, r4
1a003568:	fbb7 f3fe 	udiv	r3, r7, lr
1a00356c:	fb0e 7713 	mls	r7, lr, r3, r7
1a003570:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a003574:	fb0c fc03 	mul.w	ip, ip, r3
1a003578:	45bc      	cmp	ip, r7
1a00357a:	d907      	bls.n	1a00358c <__divdi3+0x144>
1a00357c:	197f      	adds	r7, r7, r5
1a00357e:	f103 31ff 	add.w	r1, r3, #4294967295
1a003582:	d202      	bcs.n	1a00358a <__divdi3+0x142>
1a003584:	45bc      	cmp	ip, r7
1a003586:	f200 80a7 	bhi.w	1a0036d8 <__divdi3+0x290>
1a00358a:	460b      	mov	r3, r1
1a00358c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003590:	e7ad      	b.n	1a0034ee <__divdi3+0xa6>
1a003592:	4252      	negs	r2, r2
1a003594:	ea6f 0606 	mvn.w	r6, r6
1a003598:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00359c:	e75d      	b.n	1a00345a <__divdi3+0x12>
1a00359e:	4240      	negs	r0, r0
1a0035a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0035a4:	f04f 36ff 	mov.w	r6, #4294967295
1a0035a8:	e754      	b.n	1a003454 <__divdi3+0xc>
1a0035aa:	f1c0 0220 	rsb	r2, r0, #32
1a0035ae:	fa24 f102 	lsr.w	r1, r4, r2
1a0035b2:	fa07 f300 	lsl.w	r3, r7, r0
1a0035b6:	4085      	lsls	r5, r0
1a0035b8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0035bc:	40d7      	lsrs	r7, r2
1a0035be:	4319      	orrs	r1, r3
1a0035c0:	fbb7 f2fe 	udiv	r2, r7, lr
1a0035c4:	0c0b      	lsrs	r3, r1, #16
1a0035c6:	fb0e 7712 	mls	r7, lr, r2, r7
1a0035ca:	fa1f fc85 	uxth.w	ip, r5
1a0035ce:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a0035d2:	fb0c f702 	mul.w	r7, ip, r2
1a0035d6:	429f      	cmp	r7, r3
1a0035d8:	fa04 f400 	lsl.w	r4, r4, r0
1a0035dc:	d907      	bls.n	1a0035ee <__divdi3+0x1a6>
1a0035de:	195b      	adds	r3, r3, r5
1a0035e0:	f102 30ff 	add.w	r0, r2, #4294967295
1a0035e4:	d274      	bcs.n	1a0036d0 <__divdi3+0x288>
1a0035e6:	429f      	cmp	r7, r3
1a0035e8:	d972      	bls.n	1a0036d0 <__divdi3+0x288>
1a0035ea:	3a02      	subs	r2, #2
1a0035ec:	442b      	add	r3, r5
1a0035ee:	1bdf      	subs	r7, r3, r7
1a0035f0:	b289      	uxth	r1, r1
1a0035f2:	fbb7 f8fe 	udiv	r8, r7, lr
1a0035f6:	fb0e 7318 	mls	r3, lr, r8, r7
1a0035fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0035fe:	fb0c f708 	mul.w	r7, ip, r8
1a003602:	429f      	cmp	r7, r3
1a003604:	d908      	bls.n	1a003618 <__divdi3+0x1d0>
1a003606:	195b      	adds	r3, r3, r5
1a003608:	f108 31ff 	add.w	r1, r8, #4294967295
1a00360c:	d25c      	bcs.n	1a0036c8 <__divdi3+0x280>
1a00360e:	429f      	cmp	r7, r3
1a003610:	d95a      	bls.n	1a0036c8 <__divdi3+0x280>
1a003612:	f1a8 0802 	sub.w	r8, r8, #2
1a003616:	442b      	add	r3, r5
1a003618:	1bd8      	subs	r0, r3, r7
1a00361a:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a00361e:	e78e      	b.n	1a00353e <__divdi3+0xf6>
1a003620:	f1c2 0320 	rsb	r3, r2, #32
1a003624:	fa2c f103 	lsr.w	r1, ip, r3
1a003628:	fa0e fe02 	lsl.w	lr, lr, r2
1a00362c:	fa20 f703 	lsr.w	r7, r0, r3
1a003630:	ea41 0e0e 	orr.w	lr, r1, lr
1a003634:	fa08 f002 	lsl.w	r0, r8, r2
1a003638:	fa28 f103 	lsr.w	r1, r8, r3
1a00363c:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a003640:	4338      	orrs	r0, r7
1a003642:	fbb1 f8f5 	udiv	r8, r1, r5
1a003646:	0c03      	lsrs	r3, r0, #16
1a003648:	fb05 1118 	mls	r1, r5, r8, r1
1a00364c:	fa1f f78e 	uxth.w	r7, lr
1a003650:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a003654:	fb07 f308 	mul.w	r3, r7, r8
1a003658:	428b      	cmp	r3, r1
1a00365a:	fa0c fc02 	lsl.w	ip, ip, r2
1a00365e:	d909      	bls.n	1a003674 <__divdi3+0x22c>
1a003660:	eb11 010e 	adds.w	r1, r1, lr
1a003664:	f108 39ff 	add.w	r9, r8, #4294967295
1a003668:	d230      	bcs.n	1a0036cc <__divdi3+0x284>
1a00366a:	428b      	cmp	r3, r1
1a00366c:	d92e      	bls.n	1a0036cc <__divdi3+0x284>
1a00366e:	f1a8 0802 	sub.w	r8, r8, #2
1a003672:	4471      	add	r1, lr
1a003674:	1ac9      	subs	r1, r1, r3
1a003676:	b280      	uxth	r0, r0
1a003678:	fbb1 f3f5 	udiv	r3, r1, r5
1a00367c:	fb05 1113 	mls	r1, r5, r3, r1
1a003680:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a003684:	fb07 f703 	mul.w	r7, r7, r3
1a003688:	428f      	cmp	r7, r1
1a00368a:	d908      	bls.n	1a00369e <__divdi3+0x256>
1a00368c:	eb11 010e 	adds.w	r1, r1, lr
1a003690:	f103 30ff 	add.w	r0, r3, #4294967295
1a003694:	d216      	bcs.n	1a0036c4 <__divdi3+0x27c>
1a003696:	428f      	cmp	r7, r1
1a003698:	d914      	bls.n	1a0036c4 <__divdi3+0x27c>
1a00369a:	3b02      	subs	r3, #2
1a00369c:	4471      	add	r1, lr
1a00369e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0036a2:	1bc9      	subs	r1, r1, r7
1a0036a4:	fba3 890c 	umull	r8, r9, r3, ip
1a0036a8:	4549      	cmp	r1, r9
1a0036aa:	d309      	bcc.n	1a0036c0 <__divdi3+0x278>
1a0036ac:	d005      	beq.n	1a0036ba <__divdi3+0x272>
1a0036ae:	2200      	movs	r2, #0
1a0036b0:	e71d      	b.n	1a0034ee <__divdi3+0xa6>
1a0036b2:	4696      	mov	lr, r2
1a0036b4:	e6fe      	b.n	1a0034b4 <__divdi3+0x6c>
1a0036b6:	4613      	mov	r3, r2
1a0036b8:	e711      	b.n	1a0034de <__divdi3+0x96>
1a0036ba:	4094      	lsls	r4, r2
1a0036bc:	4544      	cmp	r4, r8
1a0036be:	d2f6      	bcs.n	1a0036ae <__divdi3+0x266>
1a0036c0:	3b01      	subs	r3, #1
1a0036c2:	e7f4      	b.n	1a0036ae <__divdi3+0x266>
1a0036c4:	4603      	mov	r3, r0
1a0036c6:	e7ea      	b.n	1a00369e <__divdi3+0x256>
1a0036c8:	4688      	mov	r8, r1
1a0036ca:	e7a5      	b.n	1a003618 <__divdi3+0x1d0>
1a0036cc:	46c8      	mov	r8, r9
1a0036ce:	e7d1      	b.n	1a003674 <__divdi3+0x22c>
1a0036d0:	4602      	mov	r2, r0
1a0036d2:	e78c      	b.n	1a0035ee <__divdi3+0x1a6>
1a0036d4:	4613      	mov	r3, r2
1a0036d6:	e70a      	b.n	1a0034ee <__divdi3+0xa6>
1a0036d8:	3b02      	subs	r3, #2
1a0036da:	e757      	b.n	1a00358c <__divdi3+0x144>
1a0036dc:	f1a8 0802 	sub.w	r8, r8, #2
1a0036e0:	442f      	add	r7, r5
1a0036e2:	e73f      	b.n	1a003564 <__divdi3+0x11c>

1a0036e4 <__udivdi3>:
1a0036e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0036e8:	2b00      	cmp	r3, #0
1a0036ea:	d144      	bne.n	1a003776 <__udivdi3+0x92>
1a0036ec:	428a      	cmp	r2, r1
1a0036ee:	4615      	mov	r5, r2
1a0036f0:	4604      	mov	r4, r0
1a0036f2:	d94f      	bls.n	1a003794 <__udivdi3+0xb0>
1a0036f4:	fab2 f782 	clz	r7, r2
1a0036f8:	460e      	mov	r6, r1
1a0036fa:	b14f      	cbz	r7, 1a003710 <__udivdi3+0x2c>
1a0036fc:	f1c7 0320 	rsb	r3, r7, #32
1a003700:	40b9      	lsls	r1, r7
1a003702:	fa20 f603 	lsr.w	r6, r0, r3
1a003706:	fa02 f507 	lsl.w	r5, r2, r7
1a00370a:	430e      	orrs	r6, r1
1a00370c:	fa00 f407 	lsl.w	r4, r0, r7
1a003710:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003714:	0c23      	lsrs	r3, r4, #16
1a003716:	fbb6 f0fe 	udiv	r0, r6, lr
1a00371a:	b2af      	uxth	r7, r5
1a00371c:	fb0e 6110 	mls	r1, lr, r0, r6
1a003720:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003724:	fb07 f100 	mul.w	r1, r7, r0
1a003728:	4299      	cmp	r1, r3
1a00372a:	d909      	bls.n	1a003740 <__udivdi3+0x5c>
1a00372c:	195b      	adds	r3, r3, r5
1a00372e:	f100 32ff 	add.w	r2, r0, #4294967295
1a003732:	f080 80ec 	bcs.w	1a00390e <__udivdi3+0x22a>
1a003736:	4299      	cmp	r1, r3
1a003738:	f240 80e9 	bls.w	1a00390e <__udivdi3+0x22a>
1a00373c:	3802      	subs	r0, #2
1a00373e:	442b      	add	r3, r5
1a003740:	1a5a      	subs	r2, r3, r1
1a003742:	b2a4      	uxth	r4, r4
1a003744:	fbb2 f3fe 	udiv	r3, r2, lr
1a003748:	fb0e 2213 	mls	r2, lr, r3, r2
1a00374c:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a003750:	fb07 f703 	mul.w	r7, r7, r3
1a003754:	4297      	cmp	r7, r2
1a003756:	d908      	bls.n	1a00376a <__udivdi3+0x86>
1a003758:	1952      	adds	r2, r2, r5
1a00375a:	f103 31ff 	add.w	r1, r3, #4294967295
1a00375e:	f080 80d8 	bcs.w	1a003912 <__udivdi3+0x22e>
1a003762:	4297      	cmp	r7, r2
1a003764:	f240 80d5 	bls.w	1a003912 <__udivdi3+0x22e>
1a003768:	3b02      	subs	r3, #2
1a00376a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a00376e:	2600      	movs	r6, #0
1a003770:	4631      	mov	r1, r6
1a003772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003776:	428b      	cmp	r3, r1
1a003778:	d847      	bhi.n	1a00380a <__udivdi3+0x126>
1a00377a:	fab3 f683 	clz	r6, r3
1a00377e:	2e00      	cmp	r6, #0
1a003780:	d148      	bne.n	1a003814 <__udivdi3+0x130>
1a003782:	428b      	cmp	r3, r1
1a003784:	d302      	bcc.n	1a00378c <__udivdi3+0xa8>
1a003786:	4282      	cmp	r2, r0
1a003788:	f200 80cd 	bhi.w	1a003926 <__udivdi3+0x242>
1a00378c:	2001      	movs	r0, #1
1a00378e:	4631      	mov	r1, r6
1a003790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003794:	b912      	cbnz	r2, 1a00379c <__udivdi3+0xb8>
1a003796:	2501      	movs	r5, #1
1a003798:	fbb5 f5f2 	udiv	r5, r5, r2
1a00379c:	fab5 f885 	clz	r8, r5
1a0037a0:	f1b8 0f00 	cmp.w	r8, #0
1a0037a4:	d177      	bne.n	1a003896 <__udivdi3+0x1b2>
1a0037a6:	1b4a      	subs	r2, r1, r5
1a0037a8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0037ac:	b2af      	uxth	r7, r5
1a0037ae:	2601      	movs	r6, #1
1a0037b0:	fbb2 f0fe 	udiv	r0, r2, lr
1a0037b4:	0c23      	lsrs	r3, r4, #16
1a0037b6:	fb0e 2110 	mls	r1, lr, r0, r2
1a0037ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a0037be:	fb07 f300 	mul.w	r3, r7, r0
1a0037c2:	428b      	cmp	r3, r1
1a0037c4:	d907      	bls.n	1a0037d6 <__udivdi3+0xf2>
1a0037c6:	1949      	adds	r1, r1, r5
1a0037c8:	f100 32ff 	add.w	r2, r0, #4294967295
1a0037cc:	d202      	bcs.n	1a0037d4 <__udivdi3+0xf0>
1a0037ce:	428b      	cmp	r3, r1
1a0037d0:	f200 80ba 	bhi.w	1a003948 <__udivdi3+0x264>
1a0037d4:	4610      	mov	r0, r2
1a0037d6:	1ac9      	subs	r1, r1, r3
1a0037d8:	b2a4      	uxth	r4, r4
1a0037da:	fbb1 f3fe 	udiv	r3, r1, lr
1a0037de:	fb0e 1113 	mls	r1, lr, r3, r1
1a0037e2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a0037e6:	fb07 f703 	mul.w	r7, r7, r3
1a0037ea:	42a7      	cmp	r7, r4
1a0037ec:	d908      	bls.n	1a003800 <__udivdi3+0x11c>
1a0037ee:	1964      	adds	r4, r4, r5
1a0037f0:	f103 32ff 	add.w	r2, r3, #4294967295
1a0037f4:	f080 808f 	bcs.w	1a003916 <__udivdi3+0x232>
1a0037f8:	42a7      	cmp	r7, r4
1a0037fa:	f240 808c 	bls.w	1a003916 <__udivdi3+0x232>
1a0037fe:	3b02      	subs	r3, #2
1a003800:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a003804:	4631      	mov	r1, r6
1a003806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00380a:	2600      	movs	r6, #0
1a00380c:	4630      	mov	r0, r6
1a00380e:	4631      	mov	r1, r6
1a003810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003814:	f1c6 0420 	rsb	r4, r6, #32
1a003818:	fa22 f504 	lsr.w	r5, r2, r4
1a00381c:	40b3      	lsls	r3, r6
1a00381e:	432b      	orrs	r3, r5
1a003820:	fa20 fc04 	lsr.w	ip, r0, r4
1a003824:	fa01 f706 	lsl.w	r7, r1, r6
1a003828:	fa21 f504 	lsr.w	r5, r1, r4
1a00382c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a003830:	ea4c 0707 	orr.w	r7, ip, r7
1a003834:	fbb5 f8fe 	udiv	r8, r5, lr
1a003838:	0c39      	lsrs	r1, r7, #16
1a00383a:	fb0e 5518 	mls	r5, lr, r8, r5
1a00383e:	fa1f fc83 	uxth.w	ip, r3
1a003842:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a003846:	fb0c f108 	mul.w	r1, ip, r8
1a00384a:	42a9      	cmp	r1, r5
1a00384c:	fa02 f206 	lsl.w	r2, r2, r6
1a003850:	d904      	bls.n	1a00385c <__udivdi3+0x178>
1a003852:	18ed      	adds	r5, r5, r3
1a003854:	f108 34ff 	add.w	r4, r8, #4294967295
1a003858:	d367      	bcc.n	1a00392a <__udivdi3+0x246>
1a00385a:	46a0      	mov	r8, r4
1a00385c:	1a6d      	subs	r5, r5, r1
1a00385e:	b2bf      	uxth	r7, r7
1a003860:	fbb5 f4fe 	udiv	r4, r5, lr
1a003864:	fb0e 5514 	mls	r5, lr, r4, r5
1a003868:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a00386c:	fb0c fc04 	mul.w	ip, ip, r4
1a003870:	458c      	cmp	ip, r1
1a003872:	d904      	bls.n	1a00387e <__udivdi3+0x19a>
1a003874:	18c9      	adds	r1, r1, r3
1a003876:	f104 35ff 	add.w	r5, r4, #4294967295
1a00387a:	d35c      	bcc.n	1a003936 <__udivdi3+0x252>
1a00387c:	462c      	mov	r4, r5
1a00387e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a003882:	ebcc 0101 	rsb	r1, ip, r1
1a003886:	fba4 2302 	umull	r2, r3, r4, r2
1a00388a:	4299      	cmp	r1, r3
1a00388c:	d348      	bcc.n	1a003920 <__udivdi3+0x23c>
1a00388e:	d044      	beq.n	1a00391a <__udivdi3+0x236>
1a003890:	4620      	mov	r0, r4
1a003892:	2600      	movs	r6, #0
1a003894:	e76c      	b.n	1a003770 <__udivdi3+0x8c>
1a003896:	f1c8 0420 	rsb	r4, r8, #32
1a00389a:	fa01 f308 	lsl.w	r3, r1, r8
1a00389e:	fa05 f508 	lsl.w	r5, r5, r8
1a0038a2:	fa20 f704 	lsr.w	r7, r0, r4
1a0038a6:	40e1      	lsrs	r1, r4
1a0038a8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0038ac:	431f      	orrs	r7, r3
1a0038ae:	fbb1 f6fe 	udiv	r6, r1, lr
1a0038b2:	0c3a      	lsrs	r2, r7, #16
1a0038b4:	fb0e 1116 	mls	r1, lr, r6, r1
1a0038b8:	fa1f fc85 	uxth.w	ip, r5
1a0038bc:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a0038c0:	fb0c f206 	mul.w	r2, ip, r6
1a0038c4:	429a      	cmp	r2, r3
1a0038c6:	fa00 f408 	lsl.w	r4, r0, r8
1a0038ca:	d907      	bls.n	1a0038dc <__udivdi3+0x1f8>
1a0038cc:	195b      	adds	r3, r3, r5
1a0038ce:	f106 31ff 	add.w	r1, r6, #4294967295
1a0038d2:	d237      	bcs.n	1a003944 <__udivdi3+0x260>
1a0038d4:	429a      	cmp	r2, r3
1a0038d6:	d935      	bls.n	1a003944 <__udivdi3+0x260>
1a0038d8:	3e02      	subs	r6, #2
1a0038da:	442b      	add	r3, r5
1a0038dc:	1a9b      	subs	r3, r3, r2
1a0038de:	b2bf      	uxth	r7, r7
1a0038e0:	fbb3 f0fe 	udiv	r0, r3, lr
1a0038e4:	fb0e 3310 	mls	r3, lr, r0, r3
1a0038e8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a0038ec:	fb0c f100 	mul.w	r1, ip, r0
1a0038f0:	4299      	cmp	r1, r3
1a0038f2:	d907      	bls.n	1a003904 <__udivdi3+0x220>
1a0038f4:	195b      	adds	r3, r3, r5
1a0038f6:	f100 32ff 	add.w	r2, r0, #4294967295
1a0038fa:	d221      	bcs.n	1a003940 <__udivdi3+0x25c>
1a0038fc:	4299      	cmp	r1, r3
1a0038fe:	d91f      	bls.n	1a003940 <__udivdi3+0x25c>
1a003900:	3802      	subs	r0, #2
1a003902:	442b      	add	r3, r5
1a003904:	1a5a      	subs	r2, r3, r1
1a003906:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a00390a:	4667      	mov	r7, ip
1a00390c:	e750      	b.n	1a0037b0 <__udivdi3+0xcc>
1a00390e:	4610      	mov	r0, r2
1a003910:	e716      	b.n	1a003740 <__udivdi3+0x5c>
1a003912:	460b      	mov	r3, r1
1a003914:	e729      	b.n	1a00376a <__udivdi3+0x86>
1a003916:	4613      	mov	r3, r2
1a003918:	e772      	b.n	1a003800 <__udivdi3+0x11c>
1a00391a:	40b0      	lsls	r0, r6
1a00391c:	4290      	cmp	r0, r2
1a00391e:	d2b7      	bcs.n	1a003890 <__udivdi3+0x1ac>
1a003920:	1e60      	subs	r0, r4, #1
1a003922:	2600      	movs	r6, #0
1a003924:	e724      	b.n	1a003770 <__udivdi3+0x8c>
1a003926:	4630      	mov	r0, r6
1a003928:	e722      	b.n	1a003770 <__udivdi3+0x8c>
1a00392a:	42a9      	cmp	r1, r5
1a00392c:	d995      	bls.n	1a00385a <__udivdi3+0x176>
1a00392e:	f1a8 0802 	sub.w	r8, r8, #2
1a003932:	441d      	add	r5, r3
1a003934:	e792      	b.n	1a00385c <__udivdi3+0x178>
1a003936:	458c      	cmp	ip, r1
1a003938:	d9a0      	bls.n	1a00387c <__udivdi3+0x198>
1a00393a:	3c02      	subs	r4, #2
1a00393c:	4419      	add	r1, r3
1a00393e:	e79e      	b.n	1a00387e <__udivdi3+0x19a>
1a003940:	4610      	mov	r0, r2
1a003942:	e7df      	b.n	1a003904 <__udivdi3+0x220>
1a003944:	460e      	mov	r6, r1
1a003946:	e7c9      	b.n	1a0038dc <__udivdi3+0x1f8>
1a003948:	3802      	subs	r0, #2
1a00394a:	4429      	add	r1, r5
1a00394c:	e743      	b.n	1a0037d6 <__udivdi3+0xf2>
1a00394e:	bf00      	nop

1a003950 <__libc_init_array>:
1a003950:	b570      	push	{r4, r5, r6, lr}
1a003952:	4b0e      	ldr	r3, [pc, #56]	; (1a00398c <__libc_init_array+0x3c>)
1a003954:	4c0e      	ldr	r4, [pc, #56]	; (1a003990 <__libc_init_array+0x40>)
1a003956:	1ae4      	subs	r4, r4, r3
1a003958:	10a4      	asrs	r4, r4, #2
1a00395a:	2500      	movs	r5, #0
1a00395c:	461e      	mov	r6, r3
1a00395e:	42a5      	cmp	r5, r4
1a003960:	d004      	beq.n	1a00396c <__libc_init_array+0x1c>
1a003962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003966:	4798      	blx	r3
1a003968:	3501      	adds	r5, #1
1a00396a:	e7f8      	b.n	1a00395e <__libc_init_array+0xe>
1a00396c:	f7ff fd20 	bl	1a0033b0 <_init>
1a003970:	4c08      	ldr	r4, [pc, #32]	; (1a003994 <__libc_init_array+0x44>)
1a003972:	4b09      	ldr	r3, [pc, #36]	; (1a003998 <__libc_init_array+0x48>)
1a003974:	1ae4      	subs	r4, r4, r3
1a003976:	10a4      	asrs	r4, r4, #2
1a003978:	2500      	movs	r5, #0
1a00397a:	461e      	mov	r6, r3
1a00397c:	42a5      	cmp	r5, r4
1a00397e:	d004      	beq.n	1a00398a <__libc_init_array+0x3a>
1a003980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003984:	4798      	blx	r3
1a003986:	3501      	adds	r5, #1
1a003988:	e7f8      	b.n	1a00397c <__libc_init_array+0x2c>
1a00398a:	bd70      	pop	{r4, r5, r6, pc}
1a00398c:	1a003d68 	.word	0x1a003d68
1a003990:	1a003d68 	.word	0x1a003d68
1a003994:	1a003d68 	.word	0x1a003d68
1a003998:	1a003d68 	.word	0x1a003d68

1a00399c <memcpy>:
1a00399c:	b510      	push	{r4, lr}
1a00399e:	1e43      	subs	r3, r0, #1
1a0039a0:	440a      	add	r2, r1
1a0039a2:	4291      	cmp	r1, r2
1a0039a4:	d004      	beq.n	1a0039b0 <memcpy+0x14>
1a0039a6:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0039aa:	f803 4f01 	strb.w	r4, [r3, #1]!
1a0039ae:	e7f8      	b.n	1a0039a2 <memcpy+0x6>
1a0039b0:	bd10      	pop	{r4, pc}

1a0039b2 <memset>:
1a0039b2:	4402      	add	r2, r0
1a0039b4:	4603      	mov	r3, r0
1a0039b6:	4293      	cmp	r3, r2
1a0039b8:	d002      	beq.n	1a0039c0 <memset+0xe>
1a0039ba:	f803 1b01 	strb.w	r1, [r3], #1
1a0039be:	e7fa      	b.n	1a0039b6 <memset+0x4>
1a0039c0:	4770      	bx	lr

1a0039c2 <strncpy>:
1a0039c2:	b510      	push	{r4, lr}
1a0039c4:	4603      	mov	r3, r0
1a0039c6:	b132      	cbz	r2, 1a0039d6 <strncpy+0x14>
1a0039c8:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0039cc:	f803 4b01 	strb.w	r4, [r3], #1
1a0039d0:	3a01      	subs	r2, #1
1a0039d2:	2c00      	cmp	r4, #0
1a0039d4:	d1f7      	bne.n	1a0039c6 <strncpy+0x4>
1a0039d6:	441a      	add	r2, r3
1a0039d8:	4293      	cmp	r3, r2
1a0039da:	d003      	beq.n	1a0039e4 <strncpy+0x22>
1a0039dc:	2100      	movs	r1, #0
1a0039de:	f803 1b01 	strb.w	r1, [r3], #1
1a0039e2:	e7f9      	b.n	1a0039d8 <strncpy+0x16>
1a0039e4:	bd10      	pop	{r4, pc}
1a0039e6:	0000      	movs	r0, r0
1a0039e8:	6e696c42 	.word	0x6e696c42
1a0039ec:	0000216b 	.word	0x0000216b
1a0039f0:	6f6d654d 	.word	0x6f6d654d
1a0039f4:	50207972 	.word	0x50207972
1a0039f8:	206c6f6f 	.word	0x206c6f6f
1a0039fc:	206e6f63 	.word	0x206e6f63
1a003a00:	65657266 	.word	0x65657266
1a003a04:	534f5452 	.word	0x534f5452
1a003a08:	73207920 	.word	0x73207920
1a003a0c:	2e495041 	.word	0x2e495041
1a003a10:	00000000 	.word	0x00000000
1a003a14:	6154796d 	.word	0x6154796d
1a003a18:	00006b73 	.word	0x00006b73
1a003a1c:	454c4449 	.word	0x454c4449
1a003a20:	00000000 	.word	0x00000000
1a003a24:	51726d54 	.word	0x51726d54
1a003a28:	00000000 	.word	0x00000000
1a003a2c:	20726d54 	.word	0x20726d54
1a003a30:	00637653 	.word	0x00637653

1a003a34 <gpioPinsInit>:
1a003a34:	02000104 00050701 05010d03 04080100     ................
1a003a44:	02020002 02000304 00000403 04070002     ................
1a003a54:	030c0300 09050402 05040103 04030208     ................
1a003a64:	04020305 06040504 0802000c 03000b06     ................
1a003a74:	00090607 07060503 060f0504 03030004     ................
1a003a84:	02000404 00050404 06040502 04060200     ................
1a003a94:	0c050408 05040a04 0003010e 14010a00     ................
1a003aa4:	010f0000 0d000012 00001101 0010010c     ................
1a003ab4:	07070300 000f0300 01000001 00000000     ................
1a003ac4:	000a0600 08060603 06100504 04030005     ................
1a003ad4:	03000106 04090400 04010d05 010b0000     ................
1a003ae4:	0200000f 00000001 00010104 02010800     ................
1a003af4:	01090000 09010006 05040002 04010200     ................
1a003b04:	02020105 02020504 0e00000a 01000b02     ................
1a003b14:	000c020b 00040c01 04000200 01020001     ................
1a003b24:	02000204 00030402 03070302 070b0300     ................
1a003b34:	0c030004 03000507 0006070d 01020e03     ................
1a003b44:	04010504 06020006 02000504 00040405     ................
1a003b54:	08040402 040c0504 0d050409 05040a04     ................
1a003b64:	0005010e 00000801 636b6974 69547265     ........tikcerTi
1a003b74:	0072656d                                mer.

1a003b78 <lpcUarts>:
1a003b78:	40081000 06020406 00180205 40081000     ...@...........@
1a003b88:	09070509 00180706 40082000 00000000     ......... .@....
1a003b98:	00190000 400c1000 07060107 001a0602     .......@........
1a003ba8:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a003bb8:	02020302 001b0204 00000a0d              ............

1a003bc4 <GpioPorts>:
1a003bc4:	03030003 0f050403 05031005 07030603     ................
1a003bd4:	00000802                                ....

1a003bd8 <OscRateIn>:
1a003bd8:	00b71b00                                ....

1a003bdc <ExtRateIn>:
1a003bdc:	00000000                                ....

1a003be0 <GpioButtons>:
1a003be0:	08000400 09010900                       ........

1a003be8 <GpioLeds>:
1a003be8:	01050005 0e000205 0c010b01              ............

1a003bf4 <InitClkStates>:
1a003bf4:	00010308 00010307 01010f01              ............

1a003c00 <pinmuxing>:
1a003c00:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a003c10:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a003c20:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a003c30:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a003c40:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a003c50:	00d50301 00d50401 00160107 00560207     ..............V.
1a003c60:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a003c70:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a003c80:	00b31201 00f01301 00b31401 00b60707     ................
1a003c90:	00f20000 00b60100                       ........

1a003c98 <UART_BClock>:
1a003c98:	01a201c2 01620182                       ......b.

1a003ca0 <UART_PClock>:
1a003ca0:	00820081 00a200a1 08040201 0f0f0f03     ................
1a003cb0:	000000ff                                ....

1a003cb4 <periph_to_base>:
1a003cb4:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a003cc4:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a003cd4:	000100e0 01000100 01200003 00060120     .......... . ...
1a003ce4:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a003cf4:	01820013 00120182 01a201a2 01c20011     ................
1a003d04:	001001c2 01e201e2 0202000f 000e0202     ................
1a003d14:	02220222 0223000d 001c0223              "."...#.#...

1a003d20 <InitClkStates>:
1a003d20:	00010100 00010909 0001090a 01010701     ................
1a003d30:	00010902 00010906 0101090c 0001090d     ................
1a003d40:	0001090e 0001090f 00010910 00010911     ................
1a003d50:	00010912 00010913 00011114 00011119     ................
1a003d60:	0001111a 0001111b                       ........
